/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_jquery_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/jquery.js */ \"./src/js/modules/jquery.js\");\n/* harmony import */ var _modules_owl_carousel_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/owl.carousel.min.js */ \"./src/js/modules/owl.carousel.min.js\");\n/* harmony import */ var _modules_arrows_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/arrows.js */ \"./src/js/modules/arrows.js\");\n/* harmony import */ var _modules_switchTools_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/switchTools.js */ \"./src/js/modules/switchTools.js\");\n/* harmony import */ var _modules_menuBurger_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/menuBurger.js */ \"./src/js/modules/menuBurger.js\");\n/* harmony import */ var _modules_owlBanner_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/owlBanner.js */ \"./src/js/modules/owlBanner.js\");\n/* harmony import */ var _modules_owlFeatures_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/owlFeatures.js */ \"./src/js/modules/owlFeatures.js\");\n/* harmony import */ var _modules_owlPromo_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/owlPromo.js */ \"./src/js/modules/owlPromo.js\");\n/* harmony import */ var _modules_owlAbout_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/owlAbout.js */ \"./src/js/modules/owlAbout.js\");\n/* harmony import */ var _modules_owlReviews_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modules/owlReviews.js */ \"./src/js/modules/owlReviews.js\");\n/* harmony import */ var _modules_yMap_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./modules/yMap.js */ \"./src/js/modules/yMap.js\");\n/* harmony import */ var _modules_form_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/form.js */ \"./src/js/modules/form.js\");\n/* harmony import */ var _modules_ajax_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/ajax.js */ \"./src/js/modules/ajax.js\");\n/* eslint-disable no-unused-vars */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/app.js?");

/***/ }),

/***/ "./src/js/modules/ajax.js":
/*!********************************!*\
  !*** ./src/js/modules/ajax.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\n$(document).ready(function () {\r\n  $('#form').submit(function (e) { // устанавливаем событие отправки для формы с id=form\r\n    e.preventDefault()\r\n    const formData = $(this).serialize() // собераем все данные из формы\r\n    $.ajax({\r\n      type: 'POST', // Метод отправки\r\n      url: 'send.php', // путь до php фаила отправителя\r\n      data: formData,\r\n      success: function () {\r\n        // код в этом блоке выполняется при успешной отправке сообщения\r\n        alert('Ваше сообщение отпрвлено!')\r\n      }\r\n    })\r\n  })\r\n})\r\n// закрыть форму\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/ajax.js?");

/***/ }),

/***/ "./src/js/modules/arrows.js":
/*!**********************************!*\
  !*** ./src/js/modules/arrows.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\ndocument.addEventListener('mouseover', (event) => {\r\n  const parent = event.target.parentNode\r\n  if (event.target.closest('.arrow__right')) parent.querySelector('.l-r-arrows-hover').style.left = '50%'\r\n  if (event.target.closest('.arrow__left')) parent.querySelector('.l-r-arrows-hover').style.left = '0%'\r\n})\r\n\r\ndocument.addEventListener('mousedown', (event) => {\r\n  if (event.target.closest('.arrow__right')) event.target.querySelector('img').style.transform = 'scale(0.7) rotate(180deg)'\r\n  if (event.target.closest('.arrow__left')) event.target.querySelector('img').style.transform = 'scale(0.7)'\r\n})\r\n\r\ndocument.addEventListener('mouseup', (event) => {\r\n  if (event.target.closest('.arrow__right')) event.target.querySelector('img').style.transform = 'scale(0.9) rotate(180deg)'\r\n  if (event.target.closest('.arrow__left')) event.target.querySelector('img').style.transform = 'scale(0.9)'\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/arrows.js?");

/***/ }),

/***/ "./src/js/modules/form.js":
/*!********************************!*\
  !*** ./src/js/modules/form.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst formDiv = document.querySelector('.form__container')\r\nlet status = 0\r\n\r\ndocument.addEventListener('click', (event) => {\r\n  const parent = event.target.parentNode\r\n  console.log(status)\r\n  if (status === 0 && (event.target.classList.contains('show-form-btn') || parent.classList.contains('show-form-btn'))) {\r\n    formDiv.style.display = 'flex'\r\n    status = 1\r\n    console.log('open')\r\n  } else if (status === 1 && event.target.classList.contains('form__container')) {\r\n    formDiv.style.display = 'none'\r\n    status = 0\r\n    console.log('close')\r\n  }\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/form.js?");

/***/ }),

/***/ "./src/js/modules/jquery.js":
/*!**********************************!*\
  !*** ./src/js/modules/jquery.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*!\r\n * jQuery JavaScript Library v3.7.0\r\n * https://jquery.com/\r\n *\r\n * Copyright OpenJS Foundation and other contributors\r\n * Released under the MIT license\r\n * https://jquery.org/license\r\n *\r\n * Date: 2023-05-11T18:29Z\r\n */\r\n(function (global, factory) {\r\n  'use strict'\r\n\r\n  if (typeof module === 'object' && typeof module.exports === 'object') {\r\n    // For CommonJS and CommonJS-like environments where a proper `window`\r\n    // is present, execute the factory and get jQuery.\r\n    // For environments that do not have a `window` with a `document`\r\n    // (such as Node.js), expose a factory as module.exports.\r\n    // This accentuates the need for the creation of a real `window`.\r\n    // e.g. var jQuery = require(\"jquery\")(window);\r\n    // See ticket trac-14549 for more info.\r\n    module.exports = global.document\r\n      ? factory(global, true)\r\n      : function (w) {\r\n        if (!w.document) {\r\n          throw new Error('jQuery requires a window with a document')\r\n        }\r\n        return factory(w)\r\n      }\r\n  } else {\r\n    factory(global)\r\n  }\r\n\r\n// Pass this if window is not defined yet\r\n})(typeof window !== 'undefined' ? window : undefined, function (window, noGlobal) {\r\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\r\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\r\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\r\n  // enough that all such attempts are guarded in a try block.\r\n  'use strict'\r\n\r\n  let arr = []\r\n\r\n  const getProto = Object.getPrototypeOf\r\n\r\n  const slice = arr.slice\r\n\r\n  const flat = arr.flat\r\n    ? function (array) {\r\n      return arr.flat.call(array)\r\n    }\r\n    : function (array) {\r\n      return arr.concat.apply([], array)\r\n    }\r\n\r\n  const push = arr.push\r\n\r\n  const indexOf = arr.indexOf\r\n\r\n  const class2type = {}\r\n\r\n  const toString = class2type.toString\r\n\r\n  const hasOwn = class2type.hasOwnProperty\r\n\r\n  const fnToString = hasOwn.toString\r\n\r\n  const ObjectFunctionString = fnToString.call(Object)\r\n\r\n  const support = {}\r\n\r\n  const isFunction = function isFunction (obj) {\r\n    // Support: Chrome <=57, Firefox <=52\r\n    // In some browsers, typeof returns \"function\" for HTML <object> elements\r\n    // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\r\n    // We don't want to classify *any* DOM node as a function.\r\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\r\n    // Plus for old WebKit, typeof returns \"function\" for HTML collections\r\n    // (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\r\n    return typeof obj === 'function' && typeof obj.nodeType !== 'number' &&\r\n\t\t\ttypeof obj.item !== 'function'\r\n  }\r\n\r\n  const isWindow = function isWindow (obj) {\r\n    return obj != null && obj === obj.window\r\n  }\r\n\r\n  const document = window.document\r\n\r\n  const preservedScriptAttributes = {\r\n    type: true,\r\n    src: true,\r\n    nonce: true,\r\n    noModule: true\r\n  }\r\n\r\n  function DOMEval (code, node, doc) {\r\n    doc = doc || document\r\n\r\n    let i; let val\r\n    const script = doc.createElement('script')\r\n\r\n    script.text = code\r\n    if (node) {\r\n      for (i in preservedScriptAttributes) {\r\n        // Support: Firefox 64+, Edge 18+\r\n        // Some browsers don't support the \"nonce\" property on scripts.\r\n        // On the other hand, just using `getAttribute` is not enough as\r\n        // the `nonce` attribute is reset to an empty string whenever it\r\n        // becomes browsing-context connected.\r\n        // See https://github.com/whatwg/html/issues/2369\r\n        // See https://html.spec.whatwg.org/#nonce-attributes\r\n        // The `node.getAttribute` check was added for the sake of\r\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\r\n        // via an object.\r\n        val = node[i] || node.getAttribute && node.getAttribute(i)\r\n        if (val) {\r\n          script.setAttribute(i, val)\r\n        }\r\n      }\r\n    }\r\n    doc.head.appendChild(script).parentNode.removeChild(script)\r\n  }\r\n\r\n  function toType (obj) {\r\n    if (obj == null) {\r\n      return obj + ''\r\n    }\r\n\r\n    // Support: Android <=2.3 only (functionish RegExp)\r\n    return typeof obj === 'object' || typeof obj === 'function'\r\n      ? class2type[toString.call(obj)] || 'object'\r\n      : typeof obj\r\n  }\r\n  /* global Symbol */\r\n  // Defining this global in .eslintrc.json would create a danger of using the global\r\n  // unguarded in another place, it seems safer to define global only for this module\r\n\r\n  const version = '3.7.0'\r\n\r\n  const rhtmlSuffix = /HTML$/i\r\n\r\n  // Define a local copy of jQuery\r\n  const jQuery = function (selector, context) {\r\n    // The jQuery object is actually just the init constructor 'enhanced'\r\n    // Need init if jQuery is called (just allow error to be thrown if not included)\r\n    return new jQuery.fn.init(selector, context)\r\n  }\r\n\r\n  jQuery.fn = jQuery.prototype = {\r\n\r\n    // The current version of jQuery being used\r\n    jquery: version,\r\n\r\n    constructor: jQuery,\r\n\r\n    // The default length of a jQuery object is 0\r\n    length: 0,\r\n\r\n    toArray: function () {\r\n      return slice.call(this)\r\n    },\r\n\r\n    // Get the Nth element in the matched element set OR\r\n    // Get the whole matched element set as a clean array\r\n    get: function (num) {\r\n      // Return all the elements in a clean array\r\n      if (num == null) {\r\n        return slice.call(this)\r\n      }\r\n\r\n      // Return just the one element from the set\r\n      return num < 0 ? this[num + this.length] : this[num]\r\n    },\r\n\r\n    // Take an array of elements and push it onto the stack\r\n    // (returning the new matched element set)\r\n    pushStack: function (elems) {\r\n      // Build a new jQuery matched element set\r\n      const ret = jQuery.merge(this.constructor(), elems)\r\n\r\n      // Add the old object onto the stack (as a reference)\r\n      ret.prevObject = this\r\n\r\n      // Return the newly-formed element set\r\n      return ret\r\n    },\r\n\r\n    // Execute a callback for every element in the matched set.\r\n    each: function (callback) {\r\n      return jQuery.each(this, callback)\r\n    },\r\n\r\n    map: function (callback) {\r\n      return this.pushStack(jQuery.map(this, function (elem, i) {\r\n        return callback.call(elem, i, elem)\r\n      }))\r\n    },\r\n\r\n    slice: function () {\r\n      return this.pushStack(slice.apply(this, arguments))\r\n    },\r\n\r\n    first: function () {\r\n      return this.eq(0)\r\n    },\r\n\r\n    last: function () {\r\n      return this.eq(-1)\r\n    },\r\n\r\n    even: function () {\r\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\r\n        return (i + 1) % 2\r\n      }))\r\n    },\r\n\r\n    odd: function () {\r\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\r\n        return i % 2\r\n      }))\r\n    },\r\n\r\n    eq: function (i) {\r\n      const len = this.length\r\n      const j = +i + (i < 0 ? len : 0)\r\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : [])\r\n    },\r\n\r\n    end: function () {\r\n      return this.prevObject || this.constructor()\r\n    },\r\n\r\n    // For internal use only.\r\n    // Behaves like an Array's method, not like a jQuery method.\r\n    push,\r\n    sort: arr.sort,\r\n    splice: arr.splice\r\n  }\r\n\r\n  jQuery.extend = jQuery.fn.extend = function () {\r\n    let options; let name; let src; let copy; let copyIsArray; let clone\r\n    let target = arguments[0] || {}\r\n    let i = 1\r\n    const length = arguments.length\r\n    let deep = false\r\n\r\n    // Handle a deep copy situation\r\n    if (typeof target === 'boolean') {\r\n      deep = target\r\n\r\n      // Skip the boolean and the target\r\n      target = arguments[i] || {}\r\n      i++\r\n    }\r\n\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (typeof target !== 'object' && !isFunction(target)) {\r\n      target = {}\r\n    }\r\n\r\n    // Extend jQuery itself if only one argument is passed\r\n    if (i === length) {\r\n      target = this\r\n      i--\r\n    }\r\n\r\n    for (; i < length; i++) {\r\n      // Only deal with non-null/undefined values\r\n      if ((options = arguments[i]) != null) {\r\n        // Extend the base object\r\n        for (name in options) {\r\n          copy = options[name]\r\n\r\n          // Prevent Object.prototype pollution\r\n          // Prevent never-ending loop\r\n          if (name === '__proto__' || target === copy) {\r\n            continue\r\n          }\r\n\r\n          // Recurse if we're merging plain objects or arrays\r\n          if (deep && copy && (jQuery.isPlainObject(copy) ||\r\n\t\t\t\t\t(copyIsArray = Array.isArray(copy)))) {\r\n            src = target[name]\r\n\r\n            // Ensure proper type for the source value\r\n            if (copyIsArray && !Array.isArray(src)) {\r\n              clone = []\r\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\r\n              clone = {}\r\n            } else {\r\n              clone = src\r\n            }\r\n            copyIsArray = false\r\n\r\n            // Never move original objects, clone them\r\n            target[name] = jQuery.extend(deep, clone, copy)\r\n\r\n            // Don't bring in undefined values\r\n          } else if (copy !== undefined) {\r\n            target[name] = copy\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Return the modified object\r\n    return target\r\n  }\r\n\r\n  jQuery.extend({\r\n\r\n    // Unique for each copy of jQuery on the page\r\n    expando: 'jQuery' + (version + Math.random()).replace(/\\D/g, ''),\r\n\r\n    // Assume jQuery is ready without the ready module\r\n    isReady: true,\r\n\r\n    error: function (msg) {\r\n      throw new Error(msg)\r\n    },\r\n\r\n    noop: function () {},\r\n\r\n    isPlainObject: function (obj) {\r\n      let proto, Ctor\r\n\r\n      // Detect obvious negatives\r\n      // Use toString instead of jQuery.type to catch host objects\r\n      if (!obj || toString.call(obj) !== '[object Object]') {\r\n        return false\r\n      }\r\n\r\n      proto = getProto(obj)\r\n\r\n      // Objects with no prototype (e.g., `Object.create( null )`) are plain\r\n      if (!proto) {\r\n        return true\r\n      }\r\n\r\n      // Objects with prototype are plain iff they were constructed by a global Object function\r\n      Ctor = hasOwn.call(proto, 'constructor') && proto.constructor\r\n      return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString\r\n    },\r\n\r\n    isEmptyObject: function (obj) {\r\n      let name\r\n\r\n      for (name in obj) {\r\n        return false\r\n      }\r\n      return true\r\n    },\r\n\r\n    // Evaluates a script in a provided context; falls back to the global one\r\n    // if not specified.\r\n    globalEval: function (code, options, doc) {\r\n      DOMEval(code, { nonce: options && options.nonce }, doc)\r\n    },\r\n\r\n    each: function (obj, callback) {\r\n      let length; let i = 0\r\n\r\n      if (isArrayLike(obj)) {\r\n        length = obj.length\r\n        for (; i < length; i++) {\r\n          if (callback.call(obj[i], i, obj[i]) === false) {\r\n            break\r\n          }\r\n        }\r\n      } else {\r\n        for (i in obj) {\r\n          if (callback.call(obj[i], i, obj[i]) === false) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      return obj\r\n    },\r\n\r\n    // Retrieve the text value of an array of DOM nodes\r\n    text: function (elem) {\r\n      let node\r\n      let ret = ''\r\n      let i = 0\r\n      const nodeType = elem.nodeType\r\n\r\n      if (!nodeType) {\r\n        // If no nodeType, this is expected to be an array\r\n        while ((node = elem[i++])) {\r\n          // Do not traverse comment nodes\r\n          ret += jQuery.text(node)\r\n        }\r\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\r\n        return elem.textContent\r\n      } else if (nodeType === 3 || nodeType === 4) {\r\n        return elem.nodeValue\r\n      }\r\n\r\n      // Do not include comment or processing instruction nodes\r\n\r\n      return ret\r\n    },\r\n\r\n    // results is for internal usage only\r\n    makeArray: function (arr, results) {\r\n      const ret = results || []\r\n\r\n      if (arr != null) {\r\n        if (isArrayLike(Object(arr))) {\r\n          jQuery.merge(ret,\r\n            typeof arr === 'string'\r\n              ? [arr]\r\n              : arr\r\n          )\r\n        } else {\r\n          push.call(ret, arr)\r\n        }\r\n      }\r\n\r\n      return ret\r\n    },\r\n\r\n    inArray: function (elem, arr, i) {\r\n      return arr == null ? -1 : indexOf.call(arr, elem, i)\r\n    },\r\n\r\n    isXMLDoc: function (elem) {\r\n      const namespace = elem && elem.namespaceURI\r\n      const docElem = elem && (elem.ownerDocument || elem).documentElement\r\n\r\n      // Assume HTML when documentElement doesn't yet exist, such as inside\r\n      // document fragments.\r\n      return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || 'HTML')\r\n    },\r\n\r\n    // Support: Android <=4.0 only, PhantomJS 1 only\r\n    // push.apply(_, arraylike) throws on ancient WebKit\r\n    merge: function (first, second) {\r\n      const len = +second.length\r\n      let j = 0\r\n      let i = first.length\r\n\r\n      for (; j < len; j++) {\r\n        first[i++] = second[j]\r\n      }\r\n\r\n      first.length = i\r\n\r\n      return first\r\n    },\r\n\r\n    grep: function (elems, callback, invert) {\r\n      let callbackInverse\r\n      const matches = []\r\n      let i = 0\r\n      const length = elems.length\r\n      const callbackExpect = !invert\r\n\r\n      // Go through the array, only saving the items\r\n      // that pass the validator function\r\n      for (; i < length; i++) {\r\n        callbackInverse = !callback(elems[i], i)\r\n        if (callbackInverse !== callbackExpect) {\r\n          matches.push(elems[i])\r\n        }\r\n      }\r\n\r\n      return matches\r\n    },\r\n\r\n    // arg is for internal usage only\r\n    map: function (elems, callback, arg) {\r\n      let length; let value\r\n      let i = 0\r\n      const ret = []\r\n\r\n      // Go through the array, translating each of the items to their new values\r\n      if (isArrayLike(elems)) {\r\n        length = elems.length\r\n        for (; i < length; i++) {\r\n          value = callback(elems[i], i, arg)\r\n\r\n          if (value != null) {\r\n            ret.push(value)\r\n          }\r\n        }\r\n\r\n        // Go through every key on the object,\r\n      } else {\r\n        for (i in elems) {\r\n          value = callback(elems[i], i, arg)\r\n\r\n          if (value != null) {\r\n            ret.push(value)\r\n          }\r\n        }\r\n      }\r\n\r\n      // Flatten any nested arrays\r\n      return flat(ret)\r\n    },\r\n\r\n    // A global GUID counter for objects\r\n    guid: 1,\r\n\r\n    // jQuery.support is not used in Core but other projects attach their\r\n    // properties to it so it needs to exist.\r\n    support\r\n  })\r\n\r\n  if (typeof Symbol === 'function') {\r\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator]\r\n  }\r\n\r\n  // Populate the class2type map\r\n  jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '),\r\n    function (_i, name) {\r\n      class2type['[object ' + name + ']'] = name.toLowerCase()\r\n    })\r\n\r\n  function isArrayLike (obj) {\r\n    // Support: real iOS 8.2 only (not reproducible in simulator)\r\n    // `in` check used to prevent JIT error (gh-2145)\r\n    // hasOwn isn't used here due to false negatives\r\n    // regarding Nodelist length in IE\r\n    const length = !!obj && 'length' in obj && obj.length\r\n    const type = toType(obj)\r\n\r\n    if (isFunction(obj) || isWindow(obj)) {\r\n      return false\r\n    }\r\n\r\n    return type === 'array' || length === 0 ||\r\n\t\ttypeof length === 'number' && length > 0 && (length - 1) in obj\r\n  }\r\n\r\n  function nodeName (elem, name) {\r\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()\r\n  }\r\n  const pop = arr.pop\r\n\r\n  const sort = arr.sort\r\n\r\n  const splice = arr.splice\r\n\r\n  const whitespace = '[\\\\x20\\\\t\\\\r\\\\n\\\\f]'\r\n\r\n  const rtrimCSS = new RegExp(\r\n    '^' + whitespace + '+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)' + whitespace + '+$',\r\n    'g'\r\n  )\r\n\r\n  // Note: an element does not contain itself\r\n  jQuery.contains = function (a, b) {\r\n    const bup = b && b.parentNode\r\n\r\n    return a === bup || !!(bup && bup.nodeType === 1 && (\r\n\r\n    // Support: IE 9 - 11+\r\n    // IE doesn't have `contains` on SVG.\r\n      a.contains\r\n        ? a.contains(bup)\r\n        : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\r\n    ))\r\n  }\r\n\r\n  // CSS string/identifier serialization\r\n  // https://drafts.csswg.org/cssom/#common-serializing-idioms\r\n  const rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g\r\n\r\n  function fcssescape (ch, asCodePoint) {\r\n    if (asCodePoint) {\r\n      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\r\n      if (ch === '\\0') {\r\n        return '\\uFFFD'\r\n      }\r\n\r\n      // Control characters and (dependent upon position) numbers get escaped as code points\r\n      return ch.slice(0, -1) + '\\\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' '\r\n    }\r\n\r\n    // Other potentially-special ASCII characters get backslash-escaped\r\n    return '\\\\' + ch\r\n  }\r\n\r\n  jQuery.escapeSelector = function (sel) {\r\n    return (sel + '').replace(rcssescape, fcssescape)\r\n  }\r\n\r\n  const preferredDoc = document\r\n  const pushNative = push;\r\n\r\n  (function () {\r\n    let i\r\n    let Expr\r\n    let outermostContext\r\n    let sortInput\r\n    let hasDuplicate\r\n    let push = pushNative\r\n\r\n    // Local document vars\r\n    let document\r\n    let documentElement\r\n    let documentIsHTML\r\n    let rbuggyQSA\r\n    let matches\r\n\r\n    // Instance-specific data\r\n    const expando = jQuery.expando\r\n    let dirruns = 0\r\n    let done = 0\r\n    const classCache = createCache()\r\n    const tokenCache = createCache()\r\n    const compilerCache = createCache()\r\n    const nonnativeSelectorCache = createCache()\r\n    let sortOrder = function (a, b) {\r\n      if (a === b) {\r\n        hasDuplicate = true\r\n      }\r\n      return 0\r\n    }\r\n\r\n    const booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|' +\r\n\t\t'loop|multiple|open|readonly|required|scoped'\r\n\r\n    // Regular expressions\r\n\r\n    // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\r\n    const identifier = '(?:\\\\\\\\[\\\\da-fA-F]{1,6}' + whitespace +\r\n\t\t'?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+'\r\n\r\n    // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\r\n    const attributes = '\\\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace +\r\n\r\n\t\t// Operator (capture 2)\r\n\t\t'*([*^$|!~]?=)' + whitespace +\r\n\r\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\r\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + '))|)' +\r\n\t\twhitespace + '*\\\\]'\r\n\r\n    const pseudos = ':(' + identifier + ')(?:\\\\((' +\r\n\r\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\r\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\r\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\r\n\r\n\t\t// 2. simple (capture 6)\r\n\t\t'((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|' + attributes + ')*)|' +\r\n\r\n\t\t// 3. anything else (capture 2)\r\n\t\t'.*' +\r\n\t\t')\\\\)|)'\r\n\r\n    // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\r\n    const rwhitespace = new RegExp(whitespace + '+', 'g')\r\n\r\n    const rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*')\r\n    const rleadingCombinator = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' +\r\n\t\twhitespace + '*')\r\n    const rdescend = new RegExp(whitespace + '|>')\r\n\r\n    const rpseudo = new RegExp(pseudos)\r\n    const ridentifier = new RegExp('^' + identifier + '$')\r\n\r\n    const matchExpr = {\r\n      ID: new RegExp('^#(' + identifier + ')'),\r\n      CLASS: new RegExp('^\\\\.(' + identifier + ')'),\r\n      TAG: new RegExp('^(' + identifier + '|[*])'),\r\n      ATTR: new RegExp('^' + attributes),\r\n      PSEUDO: new RegExp('^' + pseudos),\r\n      CHILD: new RegExp(\r\n        '^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(' +\r\n\t\t\t\twhitespace + '*(even|odd|(([+-]|)(\\\\d*)n|)' + whitespace + '*(?:([+-]|)' +\r\n\t\t\t\twhitespace + '*(\\\\d+)|))' + whitespace + '*\\\\)|)', 'i'),\r\n      bool: new RegExp('^(?:' + booleans + ')$', 'i'),\r\n\r\n      // For use in libraries implementing .is()\r\n      // We use this for POS matching in `select`\r\n      needsContext: new RegExp('^' + whitespace +\r\n\t\t\t'*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(' + whitespace +\r\n\t\t\t'*((?:-\\\\d)?\\\\d*)' + whitespace + '*\\\\)|)(?=[^-]|$)', 'i')\r\n    }\r\n\r\n    const rinputs = /^(?:input|select|textarea|button)$/i\r\n    const rheader = /^h\\d$/i\r\n\r\n    // Easily-parseable/retrievable ID or TAG or CLASS selectors\r\n    const rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/\r\n\r\n    const rsibling = /[+~]/\r\n\r\n    // CSS escapes\r\n    // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\r\n    const runescape = new RegExp('\\\\\\\\[\\\\da-fA-F]{1,6}' + whitespace +\r\n\t\t'?|\\\\\\\\([^\\\\r\\\\n\\\\f])', 'g')\r\n    const funescape = function (escape, nonHex) {\r\n      const high = '0x' + escape.slice(1) - 0x10000\r\n\r\n      if (nonHex) {\r\n        // Strip the backslash prefix from a non-hex escape sequence\r\n        return nonHex\r\n      }\r\n\r\n      // Replace a hexadecimal escape sequence with the encoded Unicode code point\r\n      // Support: IE <=11+\r\n      // For values outside the Basic Multilingual Plane (BMP), manually construct a\r\n      // surrogate pair\r\n      return high < 0\r\n        ? String.fromCharCode(high + 0x10000)\r\n        : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00)\r\n    }\r\n\r\n    // Used for iframes; see `setDocument`.\r\n    // Support: IE 9 - 11+, Edge 12 - 18+\r\n    // Removing the function wrapper causes a \"Permission Denied\"\r\n    // error in IE/Edge.\r\n    const unloadHandler = function () {\r\n      setDocument()\r\n    }\r\n\r\n    const inDisabledFieldset = addCombinator(\r\n      function (elem) {\r\n        return elem.disabled === true && nodeName(elem, 'fieldset')\r\n      },\r\n      { dir: 'parentNode', next: 'legend' }\r\n    )\r\n\r\n    // Support: IE <=9 only\r\n    // Accessing document.activeElement can throw unexpectedly\r\n    // https://bugs.jquery.com/ticket/13393\r\n    function safeActiveElement () {\r\n      try {\r\n        return document.activeElement\r\n      } catch (err) { }\r\n    }\r\n\r\n    // Optimize for push.apply( _, NodeList )\r\n    try {\r\n      push.apply(\r\n        (arr = slice.call(preferredDoc.childNodes)),\r\n        preferredDoc.childNodes\r\n      )\r\n\r\n      // Support: Android <=4.0\r\n      // Detect silently failing push.apply\r\n      // eslint-disable-next-line no-unused-expressions\r\n      arr[preferredDoc.childNodes.length].nodeType\r\n    } catch (e) {\r\n      push = {\r\n        apply: function (target, els) {\r\n          pushNative.apply(target, slice.call(els))\r\n        },\r\n        call: function (target) {\r\n          pushNative.apply(target, slice.call(arguments, 1))\r\n        }\r\n      }\r\n    }\r\n\r\n    function find (selector, context, results, seed) {\r\n      let m; let i; let elem; let nid; let match; let groups; let newSelector\r\n      let newContext = context && context.ownerDocument\r\n\r\n      // nodeType defaults to 9, since context defaults to document\r\n      const nodeType = context ? context.nodeType : 9\r\n\r\n      results = results || []\r\n\r\n      // Return early from calls with invalid selector or context\r\n      if (typeof selector !== 'string' || !selector ||\r\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\r\n        return results\r\n      }\r\n\r\n      // Try to shortcut find operations (as opposed to filters) in HTML documents\r\n      if (!seed) {\r\n        setDocument(context)\r\n        context = context || document\r\n\r\n        if (documentIsHTML) {\r\n          // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\r\n          // (excepting DocumentFragment context, where the methods don't exist)\r\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\r\n            // ID selector\r\n            if ((m = match[1])) {\r\n              // Document context\r\n              if (nodeType === 9) {\r\n                if ((elem = context.getElementById(m))) {\r\n                  // Support: IE 9 only\r\n                  // getElementById can match elements by name instead of ID\r\n                  if (elem.id === m) {\r\n                    push.call(results, elem)\r\n                    return results\r\n                  }\r\n                } else {\r\n                  return results\r\n                }\r\n\r\n                // Element context\r\n              } else {\r\n                // Support: IE 9 only\r\n                // getElementById can match elements by name instead of ID\r\n                if (newContext && (elem = newContext.getElementById(m)) &&\r\n\t\t\t\t\t\t\tfind.contains(context, elem) &&\r\n\t\t\t\t\t\t\telem.id === m) {\r\n                  push.call(results, elem)\r\n                  return results\r\n                }\r\n              }\r\n\r\n              // Type selector\r\n            } else if (match[2]) {\r\n              push.apply(results, context.getElementsByTagName(selector))\r\n              return results\r\n\r\n              // Class selector\r\n            } else if ((m = match[3]) && context.getElementsByClassName) {\r\n              push.apply(results, context.getElementsByClassName(m))\r\n              return results\r\n            }\r\n          }\r\n\r\n          // Take advantage of querySelectorAll\r\n          if (!nonnativeSelectorCache[selector + ' '] &&\r\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test(selector))) {\r\n            newSelector = selector\r\n            newContext = context\r\n\r\n            // qSA considers elements outside a scoping root when evaluating child or\r\n            // descendant combinators, which is not what we want.\r\n            // In such cases, we work around the behavior by prefixing every selector in the\r\n            // list with an ID selector referencing the scope context.\r\n            // The technique has to be used as well when a leading combinator is used\r\n            // as such selectors are not recognized by querySelectorAll.\r\n            // Thanks to Andrew Dupont for this technique.\r\n            if (nodeType === 1 &&\r\n\t\t\t\t\t(rdescend.test(selector) || rleadingCombinator.test(selector))) {\r\n              // Expand context for sibling selectors\r\n              newContext = rsibling.test(selector) && testContext(context.parentNode) ||\r\n\t\t\t\t\t\tcontext\r\n\r\n              // We can use :scope instead of the ID hack if the browser\r\n              // supports it & if we're not changing the context.\r\n              // Support: IE 11+, Edge 17 - 18+\r\n              // IE/Edge sometimes throw a \"Permission denied\" error when\r\n              // strict-comparing two documents; shallow comparisons work.\r\n              // eslint-disable-next-line eqeqeq\r\n              if (newContext != context || !support.scope) {\r\n                // Capture the context ID, setting it first if necessary\r\n                if ((nid = context.getAttribute('id'))) {\r\n                  nid = jQuery.escapeSelector(nid)\r\n                } else {\r\n                  context.setAttribute('id', (nid = expando))\r\n                }\r\n              }\r\n\r\n              // Prefix every selector in the list\r\n              groups = tokenize(selector)\r\n              i = groups.length\r\n              while (i--) {\r\n                groups[i] = (nid ? '#' + nid : ':scope') + ' ' +\r\n\t\t\t\t\t\t\ttoSelector(groups[i])\r\n              }\r\n              newSelector = groups.join(',')\r\n            }\r\n\r\n            try {\r\n              push.apply(results,\r\n                newContext.querySelectorAll(newSelector)\r\n              )\r\n              return results\r\n            } catch (qsaError) {\r\n              nonnativeSelectorCache(selector, true)\r\n            } finally {\r\n              if (nid === expando) {\r\n                context.removeAttribute('id')\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // All others\r\n      return select(selector.replace(rtrimCSS, '$1'), context, results, seed)\r\n    }\r\n\r\n    /**\r\n * Create key-value caches of limited size\r\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\r\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\r\n *\tdeleting the oldest entry\r\n */\r\n    function createCache () {\r\n      const keys = []\r\n\r\n      function cache (key, value) {\r\n        // Use (key + \" \") to avoid collision with native prototype properties\r\n        // (see https://github.com/jquery/sizzle/issues/157)\r\n        if (keys.push(key + ' ') > Expr.cacheLength) {\r\n          // Only keep the most recent entries\r\n          delete cache[keys.shift()]\r\n        }\r\n        return (cache[key + ' '] = value)\r\n      }\r\n      return cache\r\n    }\r\n\r\n    /**\r\n * Mark a function for special use by jQuery selector module\r\n * @param {Function} fn The function to mark\r\n */\r\n    function markFunction (fn) {\r\n      fn[expando] = true\r\n      return fn\r\n    }\r\n\r\n    /**\r\n * Support testing using an element\r\n * @param {Function} fn Passed the created element and returns a boolean result\r\n */\r\n    function assert (fn) {\r\n      let el = document.createElement('fieldset')\r\n\r\n      try {\r\n        return !!fn(el)\r\n      } catch (e) {\r\n        return false\r\n      } finally {\r\n        // Remove from its parent by default\r\n        if (el.parentNode) {\r\n          el.parentNode.removeChild(el)\r\n        }\r\n\r\n        // release memory in IE\r\n        el = null\r\n      }\r\n    }\r\n\r\n    /**\r\n * Returns a function to use in pseudos for input types\r\n * @param {String} type\r\n */\r\n    function createInputPseudo (type) {\r\n      return function (elem) {\r\n        return nodeName(elem, 'input') && elem.type === type\r\n      }\r\n    }\r\n\r\n    /**\r\n * Returns a function to use in pseudos for buttons\r\n * @param {String} type\r\n */\r\n    function createButtonPseudo (type) {\r\n      return function (elem) {\r\n        return (nodeName(elem, 'input') || nodeName(elem, 'button')) &&\r\n\t\t\telem.type === type\r\n      }\r\n    }\r\n\r\n    /**\r\n * Returns a function to use in pseudos for :enabled/:disabled\r\n * @param {Boolean} disabled true for :disabled; false for :enabled\r\n */\r\n    function createDisabledPseudo (disabled) {\r\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\r\n      return function (elem) {\r\n        // Only certain elements can match :enabled or :disabled\r\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\r\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\r\n        if ('form' in elem) {\r\n          // Check for inherited disabledness on relevant non-disabled elements:\r\n          // * listed form-associated elements in a disabled fieldset\r\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\r\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\r\n          // * option elements in a disabled optgroup\r\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\r\n          // All such elements have a \"form\" property.\r\n          if (elem.parentNode && elem.disabled === false) {\r\n            // Option elements defer to a parent optgroup if present\r\n            if ('label' in elem) {\r\n              if ('label' in elem.parentNode) {\r\n                return elem.parentNode.disabled === disabled\r\n              } else {\r\n                return elem.disabled === disabled\r\n              }\r\n            }\r\n\r\n            // Support: IE 6 - 11+\r\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\r\n            return elem.isDisabled === disabled ||\r\n\r\n\t\t\t\t\t// Where there is no isDisabled, check manually\r\n\t\t\t\t\telem.isDisabled !== !disabled &&\r\n\t\t\t\t\t\tinDisabledFieldset(elem) === disabled\r\n          }\r\n\r\n          return elem.disabled === disabled\r\n\r\n          // Try to winnow out elements that can't be disabled before trusting the disabled property.\r\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\r\n          // even exist on them, let alone have a boolean value.\r\n        } else if ('label' in elem) {\r\n          return elem.disabled === disabled\r\n        }\r\n\r\n        // Remaining elements are neither :enabled nor :disabled\r\n        return false\r\n      }\r\n    }\r\n\r\n    /**\r\n * Returns a function to use in pseudos for positionals\r\n * @param {Function} fn\r\n */\r\n    function createPositionalPseudo (fn) {\r\n      return markFunction(function (argument) {\r\n        argument = +argument\r\n        return markFunction(function (seed, matches) {\r\n          let j\r\n          const matchIndexes = fn([], seed.length, argument)\r\n          let i = matchIndexes.length\r\n\r\n          // Match elements found at the specified indexes\r\n          while (i--) {\r\n            if (seed[(j = matchIndexes[i])]) {\r\n              seed[j] = !(matches[j] = seed[j])\r\n            }\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    /**\r\n * Checks a node for validity as a jQuery selector context\r\n * @param {Element|Object=} context\r\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\r\n */\r\n    function testContext (context) {\r\n      return context && typeof context.getElementsByTagName !== 'undefined' && context\r\n    }\r\n\r\n    /**\r\n * Sets document-related variables once based on the current document\r\n * @param {Element|Object} [node] An element or document object to use to set the document\r\n * @returns {Object} Returns the current document\r\n */\r\n    function setDocument (node) {\r\n      let subWindow\r\n      const doc = node ? node.ownerDocument || node : preferredDoc\r\n\r\n      // Return early if doc is invalid or already selected\r\n      // Support: IE 11+, Edge 17 - 18+\r\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n      // two documents; shallow comparisons work.\r\n      // eslint-disable-next-line eqeqeq\r\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\r\n        return document\r\n      }\r\n\r\n      // Update global variables\r\n      document = doc\r\n      documentElement = document.documentElement\r\n      documentIsHTML = !jQuery.isXMLDoc(document)\r\n\r\n      // Support: iOS 7 only, IE 9 - 11+\r\n      // Older browsers didn't support unprefixed `matches`.\r\n      matches = documentElement.matches ||\r\n\t\tdocumentElement.webkitMatchesSelector ||\r\n\t\tdocumentElement.msMatchesSelector\r\n\r\n      // Support: IE 9 - 11+, Edge 12 - 18+\r\n      // Accessing iframe documents after unload throws \"permission denied\" errors (see trac-13936)\r\n      // Support: IE 11+, Edge 17 - 18+\r\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n      // two documents; shallow comparisons work.\r\n      // eslint-disable-next-line eqeqeq\r\n      if (preferredDoc != document &&\r\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow) {\r\n        // Support: IE 9 - 11+, Edge 12 - 18+\r\n        subWindow.addEventListener('unload', unloadHandler)\r\n      }\r\n\r\n      // Support: IE <10\r\n      // Check if getElementById returns elements by name\r\n      // The broken getElementById methods don't pick up programmatically-set names,\r\n      // so use a roundabout getElementsByName test\r\n      support.getById = assert(function (el) {\r\n        documentElement.appendChild(el).id = jQuery.expando\r\n        return !document.getElementsByName ||\r\n\t\t\t!document.getElementsByName(jQuery.expando).length\r\n      })\r\n\r\n      // Support: IE 9 only\r\n      // Check to see if it's possible to do matchesSelector\r\n      // on a disconnected node.\r\n      support.disconnectedMatch = assert(function (el) {\r\n        return matches.call(el, '*')\r\n      })\r\n\r\n      // Support: IE 9 - 11+, Edge 12 - 18+\r\n      // IE/Edge don't support the :scope pseudo-class.\r\n      support.scope = assert(function () {\r\n        return document.querySelectorAll(':scope')\r\n      })\r\n\r\n      // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\r\n      // Make sure the `:has()` argument is parsed unforgivingly.\r\n      // We include `*` in the test to detect buggy implementations that are\r\n      // _selectively_ forgiving (specifically when the list includes at least\r\n      // one valid selector).\r\n      // Note that we treat complete lack of support for `:has()` as if it were\r\n      // spec-compliant support, which is fine because use of `:has()` in such\r\n      // environments will fail in the qSA path and fall back to jQuery traversal\r\n      // anyway.\r\n      support.cssHas = assert(function () {\r\n        try {\r\n          document.querySelector(':has(*,:jqfake)')\r\n          return false\r\n        } catch (e) {\r\n          return true\r\n        }\r\n      })\r\n\r\n      // ID filter and find\r\n      if (support.getById) {\r\n        Expr.filter.ID = function (id) {\r\n          const attrId = id.replace(runescape, funescape)\r\n          return function (elem) {\r\n            return elem.getAttribute('id') === attrId\r\n          }\r\n        }\r\n        Expr.find.ID = function (id, context) {\r\n          if (typeof context.getElementById !== 'undefined' && documentIsHTML) {\r\n            const elem = context.getElementById(id)\r\n            return elem ? [elem] : []\r\n          }\r\n        }\r\n      } else {\r\n        Expr.filter.ID = function (id) {\r\n          const attrId = id.replace(runescape, funescape)\r\n          return function (elem) {\r\n            const node = typeof elem.getAttributeNode !== 'undefined' &&\r\n\t\t\t\t\telem.getAttributeNode('id')\r\n            return node && node.value === attrId\r\n          }\r\n        }\r\n\r\n        // Support: IE 6 - 7 only\r\n        // getElementById is not reliable as a find shortcut\r\n        Expr.find.ID = function (id, context) {\r\n          if (typeof context.getElementById !== 'undefined' && documentIsHTML) {\r\n            let node; let i; let elems\r\n            let elem = context.getElementById(id)\r\n\r\n            if (elem) {\r\n              // Verify the id attribute\r\n              node = elem.getAttributeNode('id')\r\n              if (node && node.value === id) {\r\n                return [elem]\r\n              }\r\n\r\n              // Fall back on getElementsByName\r\n              elems = context.getElementsByName(id)\r\n              i = 0\r\n              while ((elem = elems[i++])) {\r\n                node = elem.getAttributeNode('id')\r\n                if (node && node.value === id) {\r\n                  return [elem]\r\n                }\r\n              }\r\n            }\r\n\r\n            return []\r\n          }\r\n        }\r\n      }\r\n\r\n      // Tag\r\n      Expr.find.TAG = function (tag, context) {\r\n        if (typeof context.getElementsByTagName !== 'undefined') {\r\n          return context.getElementsByTagName(tag)\r\n\r\n          // DocumentFragment nodes don't have gEBTN\r\n        } else {\r\n          return context.querySelectorAll(tag)\r\n        }\r\n      }\r\n\r\n      // Class\r\n      Expr.find.CLASS = function (className, context) {\r\n        if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {\r\n          return context.getElementsByClassName(className)\r\n        }\r\n      }\r\n\r\n      /* QSA/matchesSelector\r\n\t---------------------------------------------------------------------- */\r\n\r\n      // QSA and matchesSelector support\r\n\r\n      rbuggyQSA = []\r\n\r\n      // Build QSA regex\r\n      // Regex strategy adopted from Diego Perini\r\n      assert(function (el) {\r\n        let input\r\n\r\n        documentElement.appendChild(el).innerHTML =\r\n\t\t\t\"<a id='\" + expando + \"' href='' disabled='disabled'></a>\" +\r\n\t\t\t\"<select id='\" + expando + \"-\\r\\\\' disabled='disabled'>\" +\r\n\t\t\t\"<option selected=''></option></select>\"\r\n\r\n        // Support: iOS <=7 - 8 only\r\n        // Boolean attributes and \"value\" are not treated correctly in some XML documents\r\n        if (!el.querySelectorAll('[selected]').length) {\r\n          rbuggyQSA.push('\\\\[' + whitespace + '*(?:value|' + booleans + ')')\r\n        }\r\n\r\n        // Support: iOS <=7 - 8 only\r\n        if (!el.querySelectorAll('[id~=' + expando + '-]').length) {\r\n          rbuggyQSA.push('~=')\r\n        }\r\n\r\n        // Support: iOS 8 only\r\n        // https://bugs.webkit.org/show_bug.cgi?id=136851\r\n        // In-page `selector#id sibling-combinator selector` fails\r\n        if (!el.querySelectorAll('a#' + expando + '+*').length) {\r\n          rbuggyQSA.push('.#.+[+~]')\r\n        }\r\n\r\n        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\r\n        // In some of the document kinds, these selectors wouldn't work natively.\r\n        // This is probably OK but for backwards compatibility we want to maintain\r\n        // handling them through jQuery traversal in jQuery 3.x.\r\n        if (!el.querySelectorAll(':checked').length) {\r\n          rbuggyQSA.push(':checked')\r\n        }\r\n\r\n        // Support: Windows 8 Native Apps\r\n        // The type and name attributes are restricted during .innerHTML assignment\r\n        input = document.createElement('input')\r\n        input.setAttribute('type', 'hidden')\r\n        el.appendChild(input).setAttribute('name', 'D')\r\n\r\n        // Support: IE 9 - 11+\r\n        // IE's :disabled selector does not pick up the children of disabled fieldsets\r\n        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\r\n        // In some of the document kinds, these selectors wouldn't work natively.\r\n        // This is probably OK but for backwards compatibility we want to maintain\r\n        // handling them through jQuery traversal in jQuery 3.x.\r\n        documentElement.appendChild(el).disabled = true\r\n        if (el.querySelectorAll(':disabled').length !== 2) {\r\n          rbuggyQSA.push(':enabled', ':disabled')\r\n        }\r\n\r\n        // Support: IE 11+, Edge 15 - 18+\r\n        // IE 11/Edge don't find elements on a `[name='']` query in some cases.\r\n        // Adding a temporary attribute to the document before the selection works\r\n        // around the issue.\r\n        // Interestingly, IE 10 & older don't seem to have the issue.\r\n        input = document.createElement('input')\r\n        input.setAttribute('name', '')\r\n        el.appendChild(input)\r\n        if (!el.querySelectorAll(\"[name='']\").length) {\r\n          rbuggyQSA.push('\\\\[' + whitespace + '*name' + whitespace + '*=' +\r\n\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\")\r\n        }\r\n      })\r\n\r\n      if (!support.cssHas) {\r\n        // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\r\n        // Our regular `try-catch` mechanism fails to detect natively-unsupported\r\n        // pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\r\n        // in browsers that parse the `:has()` argument as a forgiving selector list.\r\n        // https://drafts.csswg.org/selectors/#relational now requires the argument\r\n        // to be parsed unforgivingly, but browsers have not yet fully adjusted.\r\n        rbuggyQSA.push(':has')\r\n      }\r\n\r\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'))\r\n\r\n      /* Sorting\r\n\t---------------------------------------------------------------------- */\r\n\r\n      // Document order sorting\r\n      sortOrder = function (a, b) {\r\n        // Flag for duplicate removal\r\n        if (a === b) {\r\n          hasDuplicate = true\r\n          return 0\r\n        }\r\n\r\n        // Sort on method existence if only one input has compareDocumentPosition\r\n        let compare = !a.compareDocumentPosition - !b.compareDocumentPosition\r\n        if (compare) {\r\n          return compare\r\n        }\r\n\r\n        // Calculate position if both inputs belong to the same document\r\n        // Support: IE 11+, Edge 17 - 18+\r\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n        // two documents; shallow comparisons work.\r\n        // eslint-disable-next-line eqeqeq\r\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b)\r\n          ? a.compareDocumentPosition(b)\r\n\r\n        // Otherwise we know they are disconnected\r\n          : 1\r\n\r\n        // Disconnected nodes\r\n        if (compare & 1 ||\r\n\t\t\t(!support.sortDetached && b.compareDocumentPosition(a) === compare)) {\r\n          // Choose the first element that is related to our preferred document\r\n          // Support: IE 11+, Edge 17 - 18+\r\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n          // two documents; shallow comparisons work.\r\n          // eslint-disable-next-line eqeqeq\r\n          if (a === document || a.ownerDocument == preferredDoc &&\r\n\t\t\t\tfind.contains(preferredDoc, a)) {\r\n            return -1\r\n          }\r\n\r\n          // Support: IE 11+, Edge 17 - 18+\r\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n          // two documents; shallow comparisons work.\r\n          // eslint-disable-next-line eqeqeq\r\n          if (b === document || b.ownerDocument == preferredDoc &&\r\n\t\t\t\tfind.contains(preferredDoc, b)) {\r\n            return 1\r\n          }\r\n\r\n          // Maintain original order\r\n          return sortInput\r\n            ? (indexOf.call(sortInput, a) - indexOf.call(sortInput, b))\r\n            : 0\r\n        }\r\n\r\n        return compare & 4 ? -1 : 1\r\n      }\r\n\r\n      return document\r\n    }\r\n\r\n    find.matches = function (expr, elements) {\r\n      return find(expr, null, null, elements)\r\n    }\r\n\r\n    find.matchesSelector = function (elem, expr) {\r\n      setDocument(elem)\r\n\r\n      if (documentIsHTML &&\r\n\t\t!nonnativeSelectorCache[expr + ' '] &&\r\n\t\t(!rbuggyQSA || !rbuggyQSA.test(expr))) {\r\n        try {\r\n          const ret = matches.call(elem, expr)\r\n\r\n          // IE 9's matchesSelector returns false on disconnected nodes\r\n          if (ret || support.disconnectedMatch ||\r\n\r\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\r\n\t\t\t\t\t// fragment in IE 9\r\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\r\n            return ret\r\n          }\r\n        } catch (e) {\r\n          nonnativeSelectorCache(expr, true)\r\n        }\r\n      }\r\n\r\n      return find(expr, document, null, [elem]).length > 0\r\n    }\r\n\r\n    find.contains = function (context, elem) {\r\n      // Set document vars if needed\r\n      // Support: IE 11+, Edge 17 - 18+\r\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n      // two documents; shallow comparisons work.\r\n      // eslint-disable-next-line eqeqeq\r\n      if ((context.ownerDocument || context) != document) {\r\n        setDocument(context)\r\n      }\r\n      return jQuery.contains(context, elem)\r\n    }\r\n\r\n    find.attr = function (elem, name) {\r\n      // Set document vars if needed\r\n      // Support: IE 11+, Edge 17 - 18+\r\n      // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n      // two documents; shallow comparisons work.\r\n      // eslint-disable-next-line eqeqeq\r\n      if ((elem.ownerDocument || elem) != document) {\r\n        setDocument(elem)\r\n      }\r\n\r\n      const fn = Expr.attrHandle[name.toLowerCase()]\r\n\r\n      // Don't get fooled by Object.prototype properties (see trac-13807)\r\n      const val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())\r\n        ? fn(elem, name, !documentIsHTML)\r\n        : undefined\r\n\r\n      if (val !== undefined) {\r\n        return val\r\n      }\r\n\r\n      return elem.getAttribute(name)\r\n    }\r\n\r\n    find.error = function (msg) {\r\n      throw new Error('Syntax error, unrecognized expression: ' + msg)\r\n    }\r\n\r\n    /**\r\n * Document sorting and removing duplicates\r\n * @param {ArrayLike} results\r\n */\r\n    jQuery.uniqueSort = function (results) {\r\n      let elem\r\n      const duplicates = []\r\n      let j = 0\r\n      let i = 0\r\n\r\n      // Unless we *know* we can detect duplicates, assume their presence\r\n      //\r\n      // Support: Android <=4.0+\r\n      // Testing for detecting duplicates is unpredictable so instead assume we can't\r\n      // depend on duplicate detection in all browsers without a stable sort.\r\n      hasDuplicate = !support.sortStable\r\n      sortInput = !support.sortStable && slice.call(results, 0)\r\n      sort.call(results, sortOrder)\r\n\r\n      if (hasDuplicate) {\r\n        while ((elem = results[i++])) {\r\n          if (elem === results[i]) {\r\n            j = duplicates.push(i)\r\n          }\r\n        }\r\n        while (j--) {\r\n          splice.call(results, duplicates[j], 1)\r\n        }\r\n      }\r\n\r\n      // Clear input after sorting to release objects\r\n      // See https://github.com/jquery/sizzle/pull/225\r\n      sortInput = null\r\n\r\n      return results\r\n    }\r\n\r\n    jQuery.fn.uniqueSort = function () {\r\n      return this.pushStack(jQuery.uniqueSort(slice.apply(this)))\r\n    }\r\n\r\n    Expr = jQuery.expr = {\r\n\r\n      // Can be adjusted by the user\r\n      cacheLength: 50,\r\n\r\n      createPseudo: markFunction,\r\n\r\n      match: matchExpr,\r\n\r\n      attrHandle: {},\r\n\r\n      find: {},\r\n\r\n      relative: {\r\n        '>': { dir: 'parentNode', first: true },\r\n        ' ': { dir: 'parentNode' },\r\n        '+': { dir: 'previousSibling', first: true },\r\n        '~': { dir: 'previousSibling' }\r\n      },\r\n\r\n      preFilter: {\r\n        ATTR: function (match) {\r\n          match[1] = match[1].replace(runescape, funescape)\r\n\r\n          // Move the given value to match[3] whether quoted or unquoted\r\n          match[3] = (match[3] || match[4] || match[5] || '')\r\n            .replace(runescape, funescape)\r\n\r\n          if (match[2] === '~=') {\r\n            match[3] = ' ' + match[3] + ' '\r\n          }\r\n\r\n          return match.slice(0, 4)\r\n        },\r\n\r\n        CHILD: function (match) {\r\n          /* matches from matchExpr[\"CHILD\"]\r\n\t\t\t\t1 type (only|nth|...)\r\n\t\t\t\t2 what (child|of-type)\r\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\r\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\r\n\t\t\t\t5 sign of xn-component\r\n\t\t\t\t6 x of xn-component\r\n\t\t\t\t7 sign of y-component\r\n\t\t\t\t8 y of y-component\r\n\t\t\t*/\r\n          match[1] = match[1].toLowerCase()\r\n\r\n          if (match[1].slice(0, 3) === 'nth') {\r\n            // nth-* requires argument\r\n            if (!match[3]) {\r\n              find.error(match[0])\r\n            }\r\n\r\n            // numeric x and y parameters for Expr.filter.CHILD\r\n            // remember that false/true cast respectively to 0/1\r\n            match[4] = +(match[4]\r\n              ? match[5] + (match[6] || 1)\r\n              : 2 * (match[3] === 'even' || match[3] === 'odd')\r\n            )\r\n            match[5] = +((match[7] + match[8]) || match[3] === 'odd')\r\n\r\n            // other types prohibit arguments\r\n          } else if (match[3]) {\r\n            find.error(match[0])\r\n          }\r\n\r\n          return match\r\n        },\r\n\r\n        PSEUDO: function (match) {\r\n          let excess\r\n          const unquoted = !match[6] && match[2]\r\n\r\n          if (matchExpr.CHILD.test(match[0])) {\r\n            return null\r\n          }\r\n\r\n          // Accept quoted arguments as-is\r\n          if (match[3]) {\r\n            match[2] = match[4] || match[5] || ''\r\n\r\n            // Strip excess characters from unquoted arguments\r\n          } else if (unquoted && rpseudo.test(unquoted) &&\r\n\r\n\t\t\t\t// Get excess from tokenize (recursively)\r\n\t\t\t\t(excess = tokenize(unquoted, true)) &&\r\n\r\n\t\t\t\t// advance to the next closing parenthesis\r\n\t\t\t\t(excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {\r\n            // excess is a negative index\r\n            match[0] = match[0].slice(0, excess)\r\n            match[2] = unquoted.slice(0, excess)\r\n          }\r\n\r\n          // Return only captures needed by the pseudo filter method (type and argument)\r\n          return match.slice(0, 3)\r\n        }\r\n      },\r\n\r\n      filter: {\r\n\r\n        TAG: function (nodeNameSelector) {\r\n          const expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase()\r\n          return nodeNameSelector === '*'\r\n            ? function () {\r\n              return true\r\n            }\r\n            : function (elem) {\r\n              return nodeName(elem, expectedNodeName)\r\n            }\r\n        },\r\n\r\n        CLASS: function (className) {\r\n          let pattern = classCache[className + ' ']\r\n\r\n          return pattern ||\r\n\t\t\t\t(pattern = new RegExp('(^|' + whitespace + ')' + className +\r\n\t\t\t\t\t'(' + whitespace + '|$)')) &&\r\n\t\t\t\tclassCache(className, function (elem) {\r\n\t\t\t\t  return pattern.test(\r\n\t\t\t\t    typeof elem.className === 'string' && elem.className ||\r\n\t\t\t\t\t\t\ttypeof elem.getAttribute !== 'undefined' &&\r\n\t\t\t\t\t\t\t\telem.getAttribute('class') ||\r\n\t\t\t\t\t\t\t''\r\n\t\t\t\t  )\r\n\t\t\t\t})\r\n        },\r\n\r\n        ATTR: function (name, operator, check) {\r\n          return function (elem) {\r\n            let result = find.attr(elem, name)\r\n\r\n            if (result == null) {\r\n              return operator === '!='\r\n            }\r\n            if (!operator) {\r\n              return true\r\n            }\r\n\r\n            result += ''\r\n\r\n            if (operator === '=') {\r\n              return result === check\r\n            }\r\n            if (operator === '!=') {\r\n              return result !== check\r\n            }\r\n            if (operator === '^=') {\r\n              return check && result.indexOf(check) === 0\r\n            }\r\n            if (operator === '*=') {\r\n              return check && result.indexOf(check) > -1\r\n            }\r\n            if (operator === '$=') {\r\n              return check && result.slice(-check.length) === check\r\n            }\r\n            if (operator === '~=') {\r\n              return (' ' + result.replace(rwhitespace, ' ') + ' ')\r\n                .indexOf(check) > -1\r\n            }\r\n            if (operator === '|=') {\r\n              return result === check || result.slice(0, check.length + 1) === check + '-'\r\n            }\r\n\r\n            return false\r\n          }\r\n        },\r\n\r\n        CHILD: function (type, what, _argument, first, last) {\r\n          const simple = type.slice(0, 3) !== 'nth'\r\n          const forward = type.slice(-4) !== 'last'\r\n          const ofType = what === 'of-type'\r\n\r\n          return first === 1 && last === 0\r\n\r\n          // Shortcut for :nth-*(n)\r\n            ? function (elem) {\r\n              return !!elem.parentNode\r\n            }\r\n\r\n            : function (elem, _context, xml) {\r\n              let cache; let outerCache; let node; let nodeIndex; let start\r\n              let dir = simple !== forward ? 'nextSibling' : 'previousSibling'\r\n              const parent = elem.parentNode\r\n              const name = ofType && elem.nodeName.toLowerCase()\r\n              const useCache = !xml && !ofType\r\n              let diff = false\r\n\r\n              if (parent) {\r\n                // :(first|last|only)-(child|of-type)\r\n                if (simple) {\r\n                  while (dir) {\r\n                    node = elem\r\n                    while ((node = node[dir])) {\r\n                      if (ofType\r\n                        ? nodeName(node, name)\r\n                        : node.nodeType === 1) {\r\n                        return false\r\n                      }\r\n                    }\r\n\r\n                    // Reverse direction for :only-* (if we haven't yet done so)\r\n                    start = dir = type === 'only' && !start && 'nextSibling'\r\n                  }\r\n                  return true\r\n                }\r\n\r\n                start = [forward ? parent.firstChild : parent.lastChild]\r\n\r\n                // non-xml :nth-child(...) stores cache data on `parent`\r\n                if (forward && useCache) {\r\n                  // Seek `elem` from a previously-cached index\r\n                  outerCache = parent[expando] || (parent[expando] = {})\r\n                  cache = outerCache[type] || []\r\n                  nodeIndex = cache[0] === dirruns && cache[1]\r\n                  diff = nodeIndex && cache[2]\r\n                  node = nodeIndex && parent.childNodes[nodeIndex]\r\n\r\n                  while ((node = ++nodeIndex && node && node[dir] ||\r\n\r\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\r\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop())) {\r\n                    // When found, cache indexes on `parent` and break\r\n                    if (node.nodeType === 1 && ++diff && node === elem) {\r\n                      outerCache[type] = [dirruns, nodeIndex, diff]\r\n                      break\r\n                    }\r\n                  }\r\n                } else {\r\n                  // Use previously-cached element index if available\r\n                  if (useCache) {\r\n                    outerCache = elem[expando] || (elem[expando] = {})\r\n                    cache = outerCache[type] || []\r\n                    nodeIndex = cache[0] === dirruns && cache[1]\r\n                    diff = nodeIndex\r\n                  }\r\n\r\n                  // xml :nth-child(...)\r\n                  // or :nth-last-child(...) or :nth(-last)?-of-type(...)\r\n                  if (diff === false) {\r\n                    // Use the same loop as above to seek `elem` from the start\r\n                    while ((node = ++nodeIndex && node && node[dir] ||\r\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop())) {\r\n                      if ((ofType\r\n                        ? nodeName(node, name)\r\n                        : node.nodeType === 1) &&\r\n\t\t\t\t\t\t\t\t\t\t++diff) {\r\n                        // Cache the index of each encountered element\r\n                        if (useCache) {\r\n                          outerCache = node[expando] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t(node[expando] = {})\r\n                          outerCache[type] = [dirruns, diff]\r\n                        }\r\n\r\n                        if (node === elem) {\r\n                          break\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                // Incorporate the offset, then check against cycle size\r\n                diff -= last\r\n                return diff === first || (diff % first === 0 && diff / first >= 0)\r\n              }\r\n            }\r\n        },\r\n\r\n        PSEUDO: function (pseudo, argument) {\r\n          // pseudo-class names are case-insensitive\r\n          // https://www.w3.org/TR/selectors/#pseudo-classes\r\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\r\n          // Remember that setFilters inherits from pseudos\r\n          let args\r\n          const fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||\r\n\t\t\t\t\tfind.error('unsupported pseudo: ' + pseudo)\r\n\r\n          // The user may use createPseudo to indicate that\r\n          // arguments are needed to create the filter function\r\n          // just as jQuery does\r\n          if (fn[expando]) {\r\n            return fn(argument)\r\n          }\r\n\r\n          // But maintain support for old signatures\r\n          if (fn.length > 1) {\r\n            args = [pseudo, pseudo, '', argument]\r\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())\r\n              ? markFunction(function (seed, matches) {\r\n                let idx\r\n                const matched = fn(seed, argument)\r\n                let i = matched.length\r\n                while (i--) {\r\n                  idx = indexOf.call(seed, matched[i])\r\n                  seed[idx] = !(matches[idx] = matched[i])\r\n                }\r\n              })\r\n              : function (elem) {\r\n                return fn(elem, 0, args)\r\n              }\r\n          }\r\n\r\n          return fn\r\n        }\r\n      },\r\n\r\n      pseudos: {\r\n\r\n        // Potentially complex pseudos\r\n        not: markFunction(function (selector) {\r\n          // Trim the selector passed to compile\r\n          // to avoid treating leading and trailing\r\n          // spaces as combinators\r\n          const input = []\r\n          const results = []\r\n          const matcher = compile(selector.replace(rtrimCSS, '$1'))\r\n\r\n          return matcher[expando]\r\n            ? markFunction(function (seed, matches, _context, xml) {\r\n              let elem\r\n              const unmatched = matcher(seed, null, xml, [])\r\n              let i = seed.length\r\n\r\n              // Match elements unmatched by `matcher`\r\n              while (i--) {\r\n                if ((elem = unmatched[i])) {\r\n                  seed[i] = !(matches[i] = elem)\r\n                }\r\n              }\r\n            })\r\n            : function (elem, _context, xml) {\r\n              input[0] = elem\r\n              matcher(input, null, xml, results)\r\n\r\n              // Don't keep the element\r\n              // (see https://github.com/jquery/sizzle/issues/299)\r\n              input[0] = null\r\n              return !results.pop()\r\n            }\r\n        }),\r\n\r\n        has: markFunction(function (selector) {\r\n          return function (elem) {\r\n            return find(selector, elem).length > 0\r\n          }\r\n        }),\r\n\r\n        contains: markFunction(function (text) {\r\n          text = text.replace(runescape, funescape)\r\n          return function (elem) {\r\n            return (elem.textContent || jQuery.text(elem)).indexOf(text) > -1\r\n          }\r\n        }),\r\n\r\n        // \"Whether an element is represented by a :lang() selector\r\n        // is based solely on the element's language value\r\n        // being equal to the identifier C,\r\n        // or beginning with the identifier C immediately followed by \"-\".\r\n        // The matching of C against the element's language value is performed case-insensitively.\r\n        // The identifier C does not have to be a valid language name.\"\r\n        // https://www.w3.org/TR/selectors/#lang-pseudo\r\n        lang: markFunction(function (lang) {\r\n          // lang value must be a valid identifier\r\n          if (!ridentifier.test(lang || '')) {\r\n            find.error('unsupported lang: ' + lang)\r\n          }\r\n          lang = lang.replace(runescape, funescape).toLowerCase()\r\n          return function (elem) {\r\n            let elemLang\r\n            do {\r\n              if ((elemLang = documentIsHTML\r\n                ? elem.lang\r\n                : elem.getAttribute('xml:lang') || elem.getAttribute('lang'))) {\r\n                elemLang = elemLang.toLowerCase()\r\n                return elemLang === lang || elemLang.indexOf(lang + '-') === 0\r\n              }\r\n            } while ((elem = elem.parentNode) && elem.nodeType === 1)\r\n            return false\r\n          }\r\n        }),\r\n\r\n        // Miscellaneous\r\n        target: function (elem) {\r\n          const hash = window.location && window.location.hash\r\n          return hash && hash.slice(1) === elem.id\r\n        },\r\n\r\n        root: function (elem) {\r\n          return elem === documentElement\r\n        },\r\n\r\n        focus: function (elem) {\r\n          return elem === safeActiveElement() &&\r\n\t\t\t\tdocument.hasFocus() &&\r\n\t\t\t\t!!(elem.type || elem.href || ~elem.tabIndex)\r\n        },\r\n\r\n        // Boolean properties\r\n        enabled: createDisabledPseudo(false),\r\n        disabled: createDisabledPseudo(true),\r\n\r\n        checked: function (elem) {\r\n          // In CSS3, :checked should return both checked and selected elements\r\n          // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n          return (nodeName(elem, 'input') && !!elem.checked) ||\r\n\t\t\t\t(nodeName(elem, 'option') && !!elem.selected)\r\n        },\r\n\r\n        selected: function (elem) {\r\n          // Support: IE <=11+\r\n          // Accessing the selectedIndex property\r\n          // forces the browser to treat the default option as\r\n          // selected when in an optgroup.\r\n          if (elem.parentNode) {\r\n            // eslint-disable-next-line no-unused-expressions\r\n            elem.parentNode.selectedIndex\r\n          }\r\n\r\n          return elem.selected === true\r\n        },\r\n\r\n        // Contents\r\n        empty: function (elem) {\r\n          // https://www.w3.org/TR/selectors/#empty-pseudo\r\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\r\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\r\n          // nodeType < 6 works because attributes (2) do not appear as children\r\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\r\n            if (elem.nodeType < 6) {\r\n              return false\r\n            }\r\n          }\r\n          return true\r\n        },\r\n\r\n        parent: function (elem) {\r\n          return !Expr.pseudos.empty(elem)\r\n        },\r\n\r\n        // Element/input types\r\n        header: function (elem) {\r\n          return rheader.test(elem.nodeName)\r\n        },\r\n\r\n        input: function (elem) {\r\n          return rinputs.test(elem.nodeName)\r\n        },\r\n\r\n        button: function (elem) {\r\n          return nodeName(elem, 'input') && elem.type === 'button' ||\r\n\t\t\t\tnodeName(elem, 'button')\r\n        },\r\n\r\n        text: function (elem) {\r\n          let attr\r\n          return nodeName(elem, 'input') && elem.type === 'text' &&\r\n\r\n\t\t\t\t// Support: IE <10 only\r\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear\r\n\t\t\t\t// with elem.type === \"text\"\r\n\t\t\t\t((attr = elem.getAttribute('type')) == null ||\r\n\t\t\t\t\tattr.toLowerCase() === 'text')\r\n        },\r\n\r\n        // Position-in-collection\r\n        first: createPositionalPseudo(function () {\r\n          return [0]\r\n        }),\r\n\r\n        last: createPositionalPseudo(function (_matchIndexes, length) {\r\n          return [length - 1]\r\n        }),\r\n\r\n        eq: createPositionalPseudo(function (_matchIndexes, length, argument) {\r\n          return [argument < 0 ? argument + length : argument]\r\n        }),\r\n\r\n        even: createPositionalPseudo(function (matchIndexes, length) {\r\n          let i = 0\r\n          for (; i < length; i += 2) {\r\n            matchIndexes.push(i)\r\n          }\r\n          return matchIndexes\r\n        }),\r\n\r\n        odd: createPositionalPseudo(function (matchIndexes, length) {\r\n          let i = 1\r\n          for (; i < length; i += 2) {\r\n            matchIndexes.push(i)\r\n          }\r\n          return matchIndexes\r\n        }),\r\n\r\n        lt: createPositionalPseudo(function (matchIndexes, length, argument) {\r\n          let i\r\n\r\n          if (argument < 0) {\r\n            i = argument + length\r\n          } else if (argument > length) {\r\n            i = length\r\n          } else {\r\n            i = argument\r\n          }\r\n\r\n          for (; --i >= 0;) {\r\n            matchIndexes.push(i)\r\n          }\r\n          return matchIndexes\r\n        }),\r\n\r\n        gt: createPositionalPseudo(function (matchIndexes, length, argument) {\r\n          let i = argument < 0 ? argument + length : argument\r\n          for (; ++i < length;) {\r\n            matchIndexes.push(i)\r\n          }\r\n          return matchIndexes\r\n        })\r\n      }\r\n    }\r\n\r\n    Expr.pseudos.nth = Expr.pseudos.eq\r\n\r\n    // Add button/input type pseudos\r\n    for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\r\n      Expr.pseudos[i] = createInputPseudo(i)\r\n    }\r\n    for (i in { submit: true, reset: true }) {\r\n      Expr.pseudos[i] = createButtonPseudo(i)\r\n    }\r\n\r\n    // Easy API for creating new setFilters\r\n    function setFilters () {}\r\n    setFilters.prototype = Expr.filters = Expr.pseudos\r\n    Expr.setFilters = new setFilters()\r\n\r\n    function tokenize (selector, parseOnly) {\r\n      let matched; let match; let tokens; let type\r\n      let soFar; let groups; let preFilters\r\n      const cached = tokenCache[selector + ' ']\r\n\r\n      if (cached) {\r\n        return parseOnly ? 0 : cached.slice(0)\r\n      }\r\n\r\n      soFar = selector\r\n      groups = []\r\n      preFilters = Expr.preFilter\r\n\r\n      while (soFar) {\r\n        // Comma and first run\r\n        if (!matched || (match = rcomma.exec(soFar))) {\r\n          if (match) {\r\n            // Don't consume trailing commas as valid\r\n            soFar = soFar.slice(match[0].length) || soFar\r\n          }\r\n          groups.push((tokens = []))\r\n        }\r\n\r\n        matched = false\r\n\r\n        // Combinators\r\n        if ((match = rleadingCombinator.exec(soFar))) {\r\n          matched = match.shift()\r\n          tokens.push({\r\n            value: matched,\r\n\r\n            // Cast descendant combinators to space\r\n            type: match[0].replace(rtrimCSS, ' ')\r\n          })\r\n          soFar = soFar.slice(matched.length)\r\n        }\r\n\r\n        // Filters\r\n        for (type in Expr.filter) {\r\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||\r\n\t\t\t\t(match = preFilters[type](match)))) {\r\n            matched = match.shift()\r\n            tokens.push({\r\n              value: matched,\r\n              type,\r\n              matches: match\r\n            })\r\n            soFar = soFar.slice(matched.length)\r\n          }\r\n        }\r\n\r\n        if (!matched) {\r\n          break\r\n        }\r\n      }\r\n\r\n      // Return the length of the invalid excess\r\n      // if we're just parsing\r\n      // Otherwise, throw an error or return tokens\r\n      if (parseOnly) {\r\n        return soFar.length\r\n      }\r\n\r\n      return soFar\r\n        ? find.error(selector)\r\n\r\n      // Cache the tokens\r\n        : tokenCache(selector, groups).slice(0)\r\n    }\r\n\r\n    function toSelector (tokens) {\r\n      let i = 0\r\n      const len = tokens.length\r\n      let selector = ''\r\n      for (; i < len; i++) {\r\n        selector += tokens[i].value\r\n      }\r\n      return selector\r\n    }\r\n\r\n    function addCombinator (matcher, combinator, base) {\r\n      const dir = combinator.dir\r\n      const skip = combinator.next\r\n      const key = skip || dir\r\n      const checkNonElements = base && key === 'parentNode'\r\n      const doneName = done++\r\n\r\n      return combinator.first\r\n\r\n      // Check against closest ancestor/preceding element\r\n        ? function (elem, context, xml) {\r\n          while ((elem = elem[dir])) {\r\n            if (elem.nodeType === 1 || checkNonElements) {\r\n              return matcher(elem, context, xml)\r\n            }\r\n          }\r\n          return false\r\n        }\r\n\r\n      // Check against all ancestor/preceding elements\r\n        : function (elem, context, xml) {\r\n          let oldCache; let outerCache\r\n          const newCache = [dirruns, doneName]\r\n\r\n          // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\r\n          if (xml) {\r\n            while ((elem = elem[dir])) {\r\n              if (elem.nodeType === 1 || checkNonElements) {\r\n                if (matcher(elem, context, xml)) {\r\n                  return true\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            while ((elem = elem[dir])) {\r\n              if (elem.nodeType === 1 || checkNonElements) {\r\n                outerCache = elem[expando] || (elem[expando] = {})\r\n\r\n                if (skip && nodeName(elem, skip)) {\r\n                  elem = elem[dir] || elem\r\n                } else if ((oldCache = outerCache[key]) &&\r\n\t\t\t\t\t\t\toldCache[0] === dirruns && oldCache[1] === doneName) {\r\n                  // Assign to newCache so results back-propagate to previous elements\r\n                  return (newCache[2] = oldCache[2])\r\n                } else {\r\n                  // Reuse newcache so results back-propagate to previous elements\r\n                  outerCache[key] = newCache\r\n\r\n                  // A match means we're done; a fail means we have to keep checking\r\n                  if ((newCache[2] = matcher(elem, context, xml))) {\r\n                    return true\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return false\r\n        }\r\n    }\r\n\r\n    function elementMatcher (matchers) {\r\n      return matchers.length > 1\r\n        ? function (elem, context, xml) {\r\n          let i = matchers.length\r\n          while (i--) {\r\n            if (!matchers[i](elem, context, xml)) {\r\n              return false\r\n            }\r\n          }\r\n          return true\r\n        }\r\n        : matchers[0]\r\n    }\r\n\r\n    function multipleContexts (selector, contexts, results) {\r\n      let i = 0\r\n      const len = contexts.length\r\n      for (; i < len; i++) {\r\n        find(selector, contexts[i], results)\r\n      }\r\n      return results\r\n    }\r\n\r\n    function condense (unmatched, map, filter, context, xml) {\r\n      let elem\r\n      const newUnmatched = []\r\n      let i = 0\r\n      const len = unmatched.length\r\n      const mapped = map != null\r\n\r\n      for (; i < len; i++) {\r\n        if ((elem = unmatched[i])) {\r\n          if (!filter || filter(elem, context, xml)) {\r\n            newUnmatched.push(elem)\r\n            if (mapped) {\r\n              map.push(i)\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return newUnmatched\r\n    }\r\n\r\n    function setMatcher (preFilter, selector, matcher, postFilter, postFinder, postSelector) {\r\n      if (postFilter && !postFilter[expando]) {\r\n        postFilter = setMatcher(postFilter)\r\n      }\r\n      if (postFinder && !postFinder[expando]) {\r\n        postFinder = setMatcher(postFinder, postSelector)\r\n      }\r\n      return markFunction(function (seed, results, context, xml) {\r\n        let temp; let i; let elem; let matcherOut\r\n        const preMap = []\r\n        const postMap = []\r\n        const preexisting = results.length\r\n\r\n        // Get initial elements from seed or context\r\n        const elems = seed ||\r\n\t\t\t\tmultipleContexts(selector || '*',\r\n\t\t\t\t  context.nodeType ? [context] : context, [])\r\n\r\n        // Prefilter to get matcher input, preserving a map for seed-results synchronization\r\n        const matcherIn = preFilter && (seed || !selector)\r\n          ? condense(elems, preMap, preFilter, context, xml)\r\n          : elems\r\n\r\n        if (matcher) {\r\n          // If we have a postFinder, or filtered seed, or non-seed postFilter\r\n          // or preexisting results,\r\n          matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter)\r\n\r\n          // ...intermediate processing is necessary\r\n            ? []\r\n\r\n          // ...otherwise use results directly\r\n            : results\r\n\r\n          // Find primary matches\r\n          matcher(matcherIn, matcherOut, context, xml)\r\n        } else {\r\n          matcherOut = matcherIn\r\n        }\r\n\r\n        // Apply postFilter\r\n        if (postFilter) {\r\n          temp = condense(matcherOut, postMap)\r\n          postFilter(temp, [], context, xml)\r\n\r\n          // Un-match failing elements by moving them back to matcherIn\r\n          i = temp.length\r\n          while (i--) {\r\n            if ((elem = temp[i])) {\r\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)\r\n            }\r\n          }\r\n        }\r\n\r\n        if (seed) {\r\n          if (postFinder || preFilter) {\r\n            if (postFinder) {\r\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\r\n              temp = []\r\n              i = matcherOut.length\r\n              while (i--) {\r\n                if ((elem = matcherOut[i])) {\r\n                  // Restore matcherIn since elem is not yet a final match\r\n                  temp.push((matcherIn[i] = elem))\r\n                }\r\n              }\r\n              postFinder(null, (matcherOut = []), temp, xml)\r\n            }\r\n\r\n            // Move matched elements from seed to results to keep them synchronized\r\n            i = matcherOut.length\r\n            while (i--) {\r\n              if ((elem = matcherOut[i]) &&\r\n\t\t\t\t\t\t(temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\r\n                seed[temp] = !(results[temp] = elem)\r\n              }\r\n            }\r\n          }\r\n\r\n          // Add elements to results, through postFinder if defined\r\n        } else {\r\n          matcherOut = condense(\r\n            matcherOut === results\r\n              ? matcherOut.splice(preexisting, matcherOut.length)\r\n              : matcherOut\r\n          )\r\n          if (postFinder) {\r\n            postFinder(null, results, matcherOut, xml)\r\n          } else {\r\n            push.apply(results, matcherOut)\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    function matcherFromTokens (tokens) {\r\n      let checkContext; let matcher; let j\r\n      const len = tokens.length\r\n      const leadingRelative = Expr.relative[tokens[0].type]\r\n      const implicitRelative = leadingRelative || Expr.relative[' ']\r\n      let i = leadingRelative ? 1 : 0\r\n\r\n      // The foundational matcher ensures that elements are reachable from top-level context(s)\r\n      const matchContext = addCombinator(function (elem) {\r\n        return elem === checkContext\r\n      }, implicitRelative, true)\r\n      const matchAnyContext = addCombinator(function (elem) {\r\n        return indexOf.call(checkContext, elem) > -1\r\n      }, implicitRelative, true)\r\n      let matchers = [function (elem, context, xml) {\r\n        // Support: IE 11+, Edge 17 - 18+\r\n        // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n        // two documents; shallow comparisons work.\r\n        // eslint-disable-next-line eqeqeq\r\n        const ret = (!leadingRelative && (xml || context != outermostContext)) || (\r\n          (checkContext = context).nodeType\r\n            ? matchContext(elem, context, xml)\r\n            : matchAnyContext(elem, context, xml))\r\n\r\n        // Avoid hanging onto element\r\n        // (see https://github.com/jquery/sizzle/issues/299)\r\n        checkContext = null\r\n        return ret\r\n      }]\r\n\r\n      for (; i < len; i++) {\r\n        if ((matcher = Expr.relative[tokens[i].type])) {\r\n          matchers = [addCombinator(elementMatcher(matchers), matcher)]\r\n        } else {\r\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches)\r\n\r\n          // Return special upon seeing a positional matcher\r\n          if (matcher[expando]) {\r\n            // Find the next relative operator (if any) for proper handling\r\n            j = ++i\r\n            for (; j < len; j++) {\r\n              if (Expr.relative[tokens[j].type]) {\r\n                break\r\n              }\r\n            }\r\n            return setMatcher(\r\n              i > 1 && elementMatcher(matchers),\r\n              i > 1 && toSelector(\r\n\r\n                // If the preceding token was a descendant combinator, insert an implicit any-element `*`\r\n                tokens.slice(0, i - 1)\r\n                  .concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })\r\n              ).replace(rtrimCSS, '$1'),\r\n              matcher,\r\n              i < j && matcherFromTokens(tokens.slice(i, j)),\r\n              j < len && matcherFromTokens((tokens = tokens.slice(j))),\r\n              j < len && toSelector(tokens)\r\n            )\r\n          }\r\n          matchers.push(matcher)\r\n        }\r\n      }\r\n\r\n      return elementMatcher(matchers)\r\n    }\r\n\r\n    function matcherFromGroupMatchers (elementMatchers, setMatchers) {\r\n      const bySet = setMatchers.length > 0\r\n      const byElement = elementMatchers.length > 0\r\n      const superMatcher = function (seed, context, xml, results, outermost) {\r\n        let elem; let j; let matcher\r\n        let matchedCount = 0\r\n        let i = '0'\r\n        const unmatched = seed && []\r\n        let setMatched = []\r\n        const contextBackup = outermostContext\r\n\r\n        // We must always have either seed elements or outermost context\r\n        const elems = seed || byElement && Expr.find.TAG('*', outermost)\r\n\r\n        // Use integer dirruns iff this is the outermost matcher\r\n        const dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1)\r\n        const len = elems.length\r\n\r\n        if (outermost) {\r\n          // Support: IE 11+, Edge 17 - 18+\r\n          // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n          // two documents; shallow comparisons work.\r\n          // eslint-disable-next-line eqeqeq\r\n          outermostContext = context == document || context || outermost\r\n        }\r\n\r\n        // Add elements passing elementMatchers directly to results\r\n        // Support: iOS <=7 - 9 only\r\n        // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching\r\n        // elements by id. (see trac-14142)\r\n        for (; i !== len && (elem = elems[i]) != null; i++) {\r\n          if (byElement && elem) {\r\n            j = 0\r\n\r\n            // Support: IE 11+, Edge 17 - 18+\r\n            // IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\r\n            // two documents; shallow comparisons work.\r\n            // eslint-disable-next-line eqeqeq\r\n            if (!context && elem.ownerDocument != document) {\r\n              setDocument(elem)\r\n              xml = !documentIsHTML\r\n            }\r\n            while ((matcher = elementMatchers[j++])) {\r\n              if (matcher(elem, context || document, xml)) {\r\n                push.call(results, elem)\r\n                break\r\n              }\r\n            }\r\n            if (outermost) {\r\n              dirruns = dirrunsUnique\r\n            }\r\n          }\r\n\r\n          // Track unmatched elements for set filters\r\n          if (bySet) {\r\n            // They will have gone through all possible matchers\r\n            if ((elem = !matcher && elem)) {\r\n              matchedCount--\r\n            }\r\n\r\n            // Lengthen the array for every element, matched or not\r\n            if (seed) {\r\n              unmatched.push(elem)\r\n            }\r\n          }\r\n        }\r\n\r\n        // `i` is now the count of elements visited above, and adding it to `matchedCount`\r\n        // makes the latter nonnegative.\r\n        matchedCount += i\r\n\r\n        // Apply set filters to unmatched elements\r\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\r\n        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\r\n        // no element matchers and no seed.\r\n        // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\r\n        // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\r\n        // numerically zero.\r\n        if (bySet && i !== matchedCount) {\r\n          j = 0\r\n          while ((matcher = setMatchers[j++])) {\r\n            matcher(unmatched, setMatched, context, xml)\r\n          }\r\n\r\n          if (seed) {\r\n            // Reintegrate element matches to eliminate the need for sorting\r\n            if (matchedCount > 0) {\r\n              while (i--) {\r\n                if (!(unmatched[i] || setMatched[i])) {\r\n                  setMatched[i] = pop.call(results)\r\n                }\r\n              }\r\n            }\r\n\r\n            // Discard index placeholder values to get only actual matches\r\n            setMatched = condense(setMatched)\r\n          }\r\n\r\n          // Add matches to results\r\n          push.apply(results, setMatched)\r\n\r\n          // Seedless set matches succeeding multiple successful matchers stipulate sorting\r\n          if (outermost && !seed && setMatched.length > 0 &&\r\n\t\t\t\t\t(matchedCount + setMatchers.length) > 1) {\r\n            jQuery.uniqueSort(results)\r\n          }\r\n        }\r\n\r\n        // Override manipulation of globals by nested matchers\r\n        if (outermost) {\r\n          dirruns = dirrunsUnique\r\n          outermostContext = contextBackup\r\n        }\r\n\r\n        return unmatched\r\n      }\r\n\r\n      return bySet\r\n        ? markFunction(superMatcher)\r\n        : superMatcher\r\n    }\r\n\r\n    function compile (selector, match /* Internal Use Only */) {\r\n      let i\r\n      const setMatchers = []\r\n      const elementMatchers = []\r\n      let cached = compilerCache[selector + ' ']\r\n\r\n      if (!cached) {\r\n        // Generate a function of recursive functions that can be used to check each element\r\n        if (!match) {\r\n          match = tokenize(selector)\r\n        }\r\n        i = match.length\r\n        while (i--) {\r\n          cached = matcherFromTokens(match[i])\r\n          if (cached[expando]) {\r\n            setMatchers.push(cached)\r\n          } else {\r\n            elementMatchers.push(cached)\r\n          }\r\n        }\r\n\r\n        // Cache the compiled function\r\n        cached = compilerCache(selector,\r\n          matcherFromGroupMatchers(elementMatchers, setMatchers))\r\n\r\n        // Save selector and tokenization\r\n        cached.selector = selector\r\n      }\r\n      return cached\r\n    }\r\n\r\n    /**\r\n * A low-level selection function that works with jQuery's compiled\r\n *  selector functions\r\n * @param {String|Function} selector A selector or a pre-compiled\r\n *  selector function built with jQuery selector compile\r\n * @param {Element} context\r\n * @param {Array} [results]\r\n * @param {Array} [seed] A set of elements to match against\r\n */\r\n    function select (selector, context, results, seed) {\r\n      let i; let tokens; let token; let type; let find\r\n      const compiled = typeof selector === 'function' && selector\r\n      const match = !seed && tokenize((selector = compiled.selector || selector))\r\n\r\n      results = results || []\r\n\r\n      // Try to minimize operations if there is only one selector in the list and no seed\r\n      // (the latter of which guarantees us context)\r\n      if (match.length === 1) {\r\n        // Reduce context if the leading compound selector is an ID\r\n        tokens = match[0] = match[0].slice(0)\r\n        if (tokens.length > 2 && (token = tokens[0]).type === 'ID' &&\r\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\r\n          context = (Expr.find.ID(\r\n            token.matches[0].replace(runescape, funescape),\r\n            context\r\n          ) || [])[0]\r\n          if (!context) {\r\n            return results\r\n\r\n            // Precompiled matchers will still verify ancestry, so step up a level\r\n          } else if (compiled) {\r\n            context = context.parentNode\r\n          }\r\n\r\n          selector = selector.slice(tokens.shift().value.length)\r\n        }\r\n\r\n        // Fetch a seed set for right-to-left matching\r\n        i = matchExpr.needsContext.test(selector) ? 0 : tokens.length\r\n        while (i--) {\r\n          token = tokens[i]\r\n\r\n          // Abort if we hit a combinator\r\n          if (Expr.relative[(type = token.type)]) {\r\n            break\r\n          }\r\n          if ((find = Expr.find[type])) {\r\n            // Search, expanding context for leading sibling combinators\r\n            if ((seed = find(\r\n              token.matches[0].replace(runescape, funescape),\r\n              rsibling.test(tokens[0].type) &&\r\n\t\t\t\t\t\ttestContext(context.parentNode) || context\r\n            ))) {\r\n              // If seed is empty or no tokens remain, we can return early\r\n              tokens.splice(i, 1)\r\n              selector = seed.length && toSelector(tokens)\r\n              if (!selector) {\r\n                push.apply(results, seed)\r\n                return results\r\n              }\r\n\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Compile and execute a filtering function if one is not provided\r\n      // Provide `match` to avoid retokenization if we modified the selector above\r\n      (compiled || compile(selector, match))(\r\n        seed,\r\n        context,\r\n        !documentIsHTML,\r\n        results,\r\n        !context || rsibling.test(selector) && testContext(context.parentNode) || context\r\n      )\r\n      return results\r\n    }\r\n\r\n    // One-time assignments\r\n\r\n    // Support: Android <=4.0 - 4.1+\r\n    // Sort stability\r\n    support.sortStable = expando.split('').sort(sortOrder).join('') === expando\r\n\r\n    // Initialize against the default document\r\n    setDocument()\r\n\r\n    // Support: Android <=4.0 - 4.1+\r\n    // Detached nodes confoundingly follow *each other*\r\n    support.sortDetached = assert(function (el) {\r\n      // Should return 1, but returns 4 (following)\r\n      return el.compareDocumentPosition(document.createElement('fieldset')) & 1\r\n    })\r\n\r\n    jQuery.find = find\r\n\r\n    // Deprecated\r\n    jQuery.expr[':'] = jQuery.expr.pseudos\r\n    jQuery.unique = jQuery.uniqueSort\r\n\r\n    // These have always been private, but they used to be documented\r\n    // as part of Sizzle so let's maintain them in the 3.x line\r\n    // for backwards compatibility purposes.\r\n    find.compile = compile\r\n    find.select = select\r\n    find.setDocument = setDocument\r\n\r\n    find.escape = jQuery.escapeSelector\r\n    find.getText = jQuery.text\r\n    find.isXML = jQuery.isXMLDoc\r\n    find.selectors = jQuery.expr\r\n    find.support = jQuery.support\r\n    find.uniqueSort = jQuery.uniqueSort\r\n\r\n    /* eslint-enable */\r\n  })()\r\n\r\n  const dir = function (elem, dir, until) {\r\n    const matched = []\r\n    const truncate = until !== undefined\r\n\r\n    while ((elem = elem[dir]) && elem.nodeType !== 9) {\r\n      if (elem.nodeType === 1) {\r\n        if (truncate && jQuery(elem).is(until)) {\r\n          break\r\n        }\r\n        matched.push(elem)\r\n      }\r\n    }\r\n    return matched\r\n  }\r\n\r\n  const siblings = function (n, elem) {\r\n    const matched = []\r\n\r\n    for (; n; n = n.nextSibling) {\r\n      if (n.nodeType === 1 && n !== elem) {\r\n        matched.push(n)\r\n      }\r\n    }\r\n\r\n    return matched\r\n  }\r\n\r\n  const rneedsContext = jQuery.expr.match.needsContext\r\n\r\n  const rsingleTag = (/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i)\r\n\r\n  // Implement the identical functionality for filter and not\r\n  function winnow (elements, qualifier, not) {\r\n    if (isFunction(qualifier)) {\r\n      return jQuery.grep(elements, function (elem, i) {\r\n        return !!qualifier.call(elem, i, elem) !== not\r\n      })\r\n    }\r\n\r\n    // Single element\r\n    if (qualifier.nodeType) {\r\n      return jQuery.grep(elements, function (elem) {\r\n        return (elem === qualifier) !== not\r\n      })\r\n    }\r\n\r\n    // Arraylike of elements (jQuery, arguments, Array)\r\n    if (typeof qualifier !== 'string') {\r\n      return jQuery.grep(elements, function (elem) {\r\n        return (indexOf.call(qualifier, elem) > -1) !== not\r\n      })\r\n    }\r\n\r\n    // Filtered directly for both simple and complex selectors\r\n    return jQuery.filter(qualifier, elements, not)\r\n  }\r\n\r\n  jQuery.filter = function (expr, elems, not) {\r\n    const elem = elems[0]\r\n\r\n    if (not) {\r\n      expr = ':not(' + expr + ')'\r\n    }\r\n\r\n    if (elems.length === 1 && elem.nodeType === 1) {\r\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : []\r\n    }\r\n\r\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\r\n      return elem.nodeType === 1\r\n    }))\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    find: function (selector) {\r\n      let i; let ret\r\n      const len = this.length\r\n      const self = this\r\n\r\n      if (typeof selector !== 'string') {\r\n        return this.pushStack(jQuery(selector).filter(function () {\r\n          for (i = 0; i < len; i++) {\r\n            if (jQuery.contains(self[i], this)) {\r\n              return true\r\n            }\r\n          }\r\n        }))\r\n      }\r\n\r\n      ret = this.pushStack([])\r\n\r\n      for (i = 0; i < len; i++) {\r\n        jQuery.find(selector, self[i], ret)\r\n      }\r\n\r\n      return len > 1 ? jQuery.uniqueSort(ret) : ret\r\n    },\r\n    filter: function (selector) {\r\n      return this.pushStack(winnow(this, selector || [], false))\r\n    },\r\n    not: function (selector) {\r\n      return this.pushStack(winnow(this, selector || [], true))\r\n    },\r\n    is: function (selector) {\r\n      return !!winnow(\r\n        this,\r\n\r\n        // If this is a positional/relative selector, check membership in the returned set\r\n        // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\r\n        typeof selector === 'string' && rneedsContext.test(selector)\r\n          ? jQuery(selector)\r\n          : selector || [],\r\n        false\r\n      ).length\r\n    }\r\n  })\r\n\r\n  // Initialize a jQuery object\r\n\r\n  // A central reference to the root jQuery(document)\r\n  let rootjQuery\r\n\r\n  // A simple way to check for HTML strings\r\n  // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\r\n  // Strict HTML recognition (trac-11290: must start with <)\r\n  // Shortcut simple #id case for speed\r\n  const rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/\r\n\r\n  const init = jQuery.fn.init = function (selector, context, root) {\r\n    let match, elem\r\n\r\n    // HANDLE: $(\"\"), $(null), $(undefined), $(false)\r\n    if (!selector) {\r\n      return this\r\n    }\r\n\r\n    // Method init() accepts an alternate rootjQuery\r\n    // so migrate can support jQuery.sub (gh-2101)\r\n    root = root || rootjQuery\r\n\r\n    // Handle HTML strings\r\n    if (typeof selector === 'string') {\r\n      if (selector[0] === '<' &&\r\n\t\t\t\tselector[selector.length - 1] === '>' &&\r\n\t\t\t\tselector.length >= 3) {\r\n        // Assume that strings that start and end with <> are HTML and skip the regex check\r\n        match = [null, selector, null]\r\n      } else {\r\n        match = rquickExpr.exec(selector)\r\n      }\r\n\r\n      // Match html or make sure no context is specified for #id\r\n      if (match && (match[1] || !context)) {\r\n        // HANDLE: $(html) -> $(array)\r\n        if (match[1]) {\r\n          context = context instanceof jQuery ? context[0] : context\r\n\r\n          // Option to run scripts is true for back-compat\r\n          // Intentionally let the error be thrown if parseHTML is not present\r\n          jQuery.merge(this, jQuery.parseHTML(\r\n            match[1],\r\n            context && context.nodeType ? context.ownerDocument || context : document,\r\n            true\r\n          ))\r\n\r\n          // HANDLE: $(html, props)\r\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\r\n            for (match in context) {\r\n              // Properties of context are called as methods if possible\r\n              if (isFunction(this[match])) {\r\n                this[match](context[match])\r\n\r\n                // ...and otherwise set as attributes\r\n              } else {\r\n                this.attr(match, context[match])\r\n              }\r\n            }\r\n          }\r\n\r\n          return this\r\n\r\n          // HANDLE: $(#id)\r\n        } else {\r\n          elem = document.getElementById(match[2])\r\n\r\n          if (elem) {\r\n            // Inject the element directly into the jQuery object\r\n            this[0] = elem\r\n            this.length = 1\r\n          }\r\n          return this\r\n        }\r\n\r\n        // HANDLE: $(expr, $(...))\r\n      } else if (!context || context.jquery) {\r\n        return (context || root).find(selector)\r\n\r\n        // HANDLE: $(expr, context)\r\n        // (which is just equivalent to: $(context).find(expr)\r\n      } else {\r\n        return this.constructor(context).find(selector)\r\n      }\r\n\r\n      // HANDLE: $(DOMElement)\r\n    } else if (selector.nodeType) {\r\n      this[0] = selector\r\n      this.length = 1\r\n      return this\r\n\r\n      // HANDLE: $(function)\r\n      // Shortcut for document ready\r\n    } else if (isFunction(selector)) {\r\n      return root.ready !== undefined\r\n        ? root.ready(selector)\r\n\r\n      // Execute immediately if ready is not present\r\n        : selector(jQuery)\r\n    }\r\n\r\n    return jQuery.makeArray(selector, this)\r\n  }\r\n\r\n  // Give the init function the jQuery prototype for later instantiation\r\n  init.prototype = jQuery.fn\r\n\r\n  // Initialize central reference\r\n  rootjQuery = jQuery(document)\r\n\r\n  const rparentsprev = /^(?:parents|prev(?:Until|All))/\r\n\r\n  // Methods guaranteed to produce a unique set when starting from a unique set\r\n  const guaranteedUnique = {\r\n    children: true,\r\n    contents: true,\r\n    next: true,\r\n    prev: true\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    has: function (target) {\r\n      const targets = jQuery(target, this)\r\n      const l = targets.length\r\n\r\n      return this.filter(function () {\r\n        let i = 0\r\n        for (; i < l; i++) {\r\n          if (jQuery.contains(this, targets[i])) {\r\n            return true\r\n          }\r\n        }\r\n      })\r\n    },\r\n\r\n    closest: function (selectors, context) {\r\n      let cur\r\n      let i = 0\r\n      const l = this.length\r\n      const matched = []\r\n      const targets = typeof selectors !== 'string' && jQuery(selectors)\r\n\r\n      // Positional selectors never match, since there's no _selection_ context\r\n      if (!rneedsContext.test(selectors)) {\r\n        for (; i < l; i++) {\r\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\r\n            // Always skip document fragments\r\n            if (cur.nodeType < 11 && (targets\r\n              ? targets.index(cur) > -1\r\n\r\n            // Don't pass non-elements to jQuery#find\r\n              : cur.nodeType === 1 &&\r\n\t\t\t\t\t\t\tjQuery.find.matchesSelector(cur, selectors))) {\r\n              matched.push(cur)\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched)\r\n    },\r\n\r\n    // Determine the position of an element within the set\r\n    index: function (elem) {\r\n      // No argument, return index in parent\r\n      if (!elem) {\r\n        return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1\r\n      }\r\n\r\n      // Index in selector\r\n      if (typeof elem === 'string') {\r\n        return indexOf.call(jQuery(elem), this[0])\r\n      }\r\n\r\n      // Locate the position of the desired element\r\n      return indexOf.call(this,\r\n\r\n        // If it receives a jQuery object, the first element is used\r\n        elem.jquery ? elem[0] : elem\r\n      )\r\n    },\r\n\r\n    add: function (selector, context) {\r\n      return this.pushStack(\r\n        jQuery.uniqueSort(\r\n          jQuery.merge(this.get(), jQuery(selector, context))\r\n        )\r\n      )\r\n    },\r\n\r\n    addBack: function (selector) {\r\n      return this.add(selector == null\r\n        ? this.prevObject\r\n        : this.prevObject.filter(selector)\r\n      )\r\n    }\r\n  })\r\n\r\n  function sibling (cur, dir) {\r\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\r\n    return cur\r\n  }\r\n\r\n  jQuery.each({\r\n    parent: function (elem) {\r\n      const parent = elem.parentNode\r\n      return parent && parent.nodeType !== 11 ? parent : null\r\n    },\r\n    parents: function (elem) {\r\n      return dir(elem, 'parentNode')\r\n    },\r\n    parentsUntil: function (elem, _i, until) {\r\n      return dir(elem, 'parentNode', until)\r\n    },\r\n    next: function (elem) {\r\n      return sibling(elem, 'nextSibling')\r\n    },\r\n    prev: function (elem) {\r\n      return sibling(elem, 'previousSibling')\r\n    },\r\n    nextAll: function (elem) {\r\n      return dir(elem, 'nextSibling')\r\n    },\r\n    prevAll: function (elem) {\r\n      return dir(elem, 'previousSibling')\r\n    },\r\n    nextUntil: function (elem, _i, until) {\r\n      return dir(elem, 'nextSibling', until)\r\n    },\r\n    prevUntil: function (elem, _i, until) {\r\n      return dir(elem, 'previousSibling', until)\r\n    },\r\n    siblings: function (elem) {\r\n      return siblings((elem.parentNode || {}).firstChild, elem)\r\n    },\r\n    children: function (elem) {\r\n      return siblings(elem.firstChild)\r\n    },\r\n    contents: function (elem) {\r\n      if (elem.contentDocument != null &&\r\n\r\n\t\t\t// Support: IE 11+\r\n\t\t\t// <object> elements with no `data` attribute has an object\r\n\t\t\t// `contentDocument` with a `null` prototype.\r\n\t\t\tgetProto(elem.contentDocument)) {\r\n        return elem.contentDocument\r\n      }\r\n\r\n      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\r\n      // Treat the template element as a regular one in browsers that\r\n      // don't support it.\r\n      if (nodeName(elem, 'template')) {\r\n        elem = elem.content || elem\r\n      }\r\n\r\n      return jQuery.merge([], elem.childNodes)\r\n    }\r\n  }, function (name, fn) {\r\n    jQuery.fn[name] = function (until, selector) {\r\n      let matched = jQuery.map(this, fn, until)\r\n\r\n      if (name.slice(-5) !== 'Until') {\r\n        selector = until\r\n      }\r\n\r\n      if (selector && typeof selector === 'string') {\r\n        matched = jQuery.filter(selector, matched)\r\n      }\r\n\r\n      if (this.length > 1) {\r\n        // Remove duplicates\r\n        if (!guaranteedUnique[name]) {\r\n          jQuery.uniqueSort(matched)\r\n        }\r\n\r\n        // Reverse order for parents* and prev-derivatives\r\n        if (rparentsprev.test(name)) {\r\n          matched.reverse()\r\n        }\r\n      }\r\n\r\n      return this.pushStack(matched)\r\n    }\r\n  })\r\n  const rnothtmlwhite = (/[^\\x20\\t\\r\\n\\f]+/g)\r\n\r\n  // Convert String-formatted options into Object-formatted ones\r\n  function createOptions (options) {\r\n    const object = {}\r\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\r\n      object[flag] = true\r\n    })\r\n    return object\r\n  }\r\n\r\n  /*\r\n * Create a callback list using the following parameters:\r\n *\r\n *\toptions: an optional list of space-separated options that will change how\r\n *\t\t\tthe callback list behaves or a more traditional option object\r\n *\r\n * By default a callback list will act like an event callback list and can be\r\n * \"fired\" multiple times.\r\n *\r\n * Possible options:\r\n *\r\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n *\r\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n *\t\t\t\t\tvalues (like a Deferred)\r\n *\r\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n *\r\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n *\r\n */\r\n  jQuery.Callbacks = function (options) {\r\n    // Convert options from String-formatted to Object-formatted if needed\r\n    // (we check in cache first)\r\n    options = typeof options === 'string'\r\n      ? createOptions(options)\r\n      : jQuery.extend({}, options)\r\n\r\n    let // Flag to know if list is currently firing\r\n      firing\r\n\r\n    // Last fire value for non-forgettable lists\r\n    let memory\r\n\r\n    // Flag to know if list was already fired\r\n    let fired\r\n\r\n    // Flag to prevent firing\r\n    let locked\r\n\r\n    // Actual callback list\r\n    let list = []\r\n\r\n    // Queue of execution data for repeatable lists\r\n    let queue = []\r\n\r\n    // Index of currently firing callback (modified by add/remove as needed)\r\n    let firingIndex = -1\r\n\r\n    // Fire callbacks\r\n    const fire = function () {\r\n      // Enforce single-firing\r\n      locked = locked || options.once\r\n\r\n      // Execute callbacks for all pending executions,\r\n      // respecting firingIndex overrides and runtime changes\r\n      fired = firing = true\r\n      for (; queue.length; firingIndex = -1) {\r\n        memory = queue.shift()\r\n        while (++firingIndex < list.length) {\r\n          // Run callback and check for early termination\r\n          if (list[firingIndex].apply(memory[0], memory[1]) === false &&\r\n\t\t\t\t\t\toptions.stopOnFalse) {\r\n            // Jump to end and forget the data so .add doesn't re-fire\r\n            firingIndex = list.length\r\n            memory = false\r\n          }\r\n        }\r\n      }\r\n\r\n      // Forget the data if we're done with it\r\n      if (!options.memory) {\r\n        memory = false\r\n      }\r\n\r\n      firing = false\r\n\r\n      // Clean up if we're done firing for good\r\n      if (locked) {\r\n        // Keep an empty list if we have data for future add calls\r\n        if (memory) {\r\n          list = []\r\n\r\n          // Otherwise, this object is spent\r\n        } else {\r\n          list = ''\r\n        }\r\n      }\r\n    }\r\n\r\n    // Actual Callbacks object\r\n    var self = {\r\n\r\n      // Add a callback or a collection of callbacks to the list\r\n      add: function () {\r\n        if (list) {\r\n          // If we have memory from a past run, we should fire after adding\r\n          if (memory && !firing) {\r\n            firingIndex = list.length - 1\r\n            queue.push(memory)\r\n          }\r\n\r\n          (function add (args) {\r\n            jQuery.each(args, function (_, arg) {\r\n              if (isFunction(arg)) {\r\n                if (!options.unique || !self.has(arg)) {\r\n                  list.push(arg)\r\n                }\r\n              } else if (arg && arg.length && toType(arg) !== 'string') {\r\n                // Inspect recursively\r\n                add(arg)\r\n              }\r\n            })\r\n          })(arguments)\r\n\r\n          if (memory && !firing) {\r\n            fire()\r\n          }\r\n        }\r\n        return this\r\n      },\r\n\r\n      // Remove a callback from the list\r\n      remove: function () {\r\n        jQuery.each(arguments, function (_, arg) {\r\n          let index\r\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\r\n            list.splice(index, 1)\r\n\r\n            // Handle firing indexes\r\n            if (index <= firingIndex) {\r\n              firingIndex--\r\n            }\r\n          }\r\n        })\r\n        return this\r\n      },\r\n\r\n      // Check if a given callback is in the list.\r\n      // If no argument is given, return whether or not list has callbacks attached.\r\n      has: function (fn) {\r\n        return fn\r\n          ? jQuery.inArray(fn, list) > -1\r\n          : list.length > 0\r\n      },\r\n\r\n      // Remove all callbacks from the list\r\n      empty: function () {\r\n        if (list) {\r\n          list = []\r\n        }\r\n        return this\r\n      },\r\n\r\n      // Disable .fire and .add\r\n      // Abort any current/pending executions\r\n      // Clear all callbacks and values\r\n      disable: function () {\r\n        locked = queue = []\r\n        list = memory = ''\r\n        return this\r\n      },\r\n      disabled: function () {\r\n        return !list\r\n      },\r\n\r\n      // Disable .fire\r\n      // Also disable .add unless we have memory (since it would have no effect)\r\n      // Abort any pending executions\r\n      lock: function () {\r\n        locked = queue = []\r\n        if (!memory && !firing) {\r\n          list = memory = ''\r\n        }\r\n        return this\r\n      },\r\n      locked: function () {\r\n        return !!locked\r\n      },\r\n\r\n      // Call all callbacks with the given context and arguments\r\n      fireWith: function (context, args) {\r\n        if (!locked) {\r\n          args = args || []\r\n          args = [context, args.slice ? args.slice() : args]\r\n          queue.push(args)\r\n          if (!firing) {\r\n            fire()\r\n          }\r\n        }\r\n        return this\r\n      },\r\n\r\n      // Call all the callbacks with the given arguments\r\n      fire: function () {\r\n        self.fireWith(this, arguments)\r\n        return this\r\n      },\r\n\r\n      // To know if the callbacks have already been called at least once\r\n      fired: function () {\r\n        return !!fired\r\n      }\r\n    }\r\n\r\n    return self\r\n  }\r\n\r\n  function Identity (v) {\r\n    return v\r\n  }\r\n  function Thrower (ex) {\r\n    throw ex\r\n  }\r\n\r\n  function adoptValue (value, resolve, reject, noValue) {\r\n    let method\r\n\r\n    try {\r\n      // Check for promise aspect first to privilege synchronous behavior\r\n      if (value && isFunction((method = value.promise))) {\r\n        method.call(value).done(resolve).fail(reject)\r\n\r\n        // Other thenables\r\n      } else if (value && isFunction((method = value.then))) {\r\n        method.call(value, resolve, reject)\r\n\r\n        // Other non-thenables\r\n      } else {\r\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\r\n        // * false: [ value ].slice( 0 ) => resolve( value )\r\n        // * true: [ value ].slice( 1 ) => resolve()\r\n        resolve.apply(undefined, [value].slice(noValue))\r\n      }\r\n\r\n      // For Promises/A+, convert exceptions into rejections\r\n      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\r\n      // Deferred#then to conditionally suppress rejection.\r\n    } catch (value) {\r\n      // Support: Android 4.0 only\r\n      // Strict mode functions invoked without .call/.apply get global-object context\r\n      reject.apply(undefined, [value])\r\n    }\r\n  }\r\n\r\n  jQuery.extend({\r\n\r\n    Deferred: function (func) {\r\n      const tuples = [\r\n\r\n        // action, add listener, callbacks,\r\n        // ... .then handlers, argument index, [final state]\r\n        ['notify', 'progress', jQuery.Callbacks('memory'),\r\n          jQuery.Callbacks('memory'), 2],\r\n        ['resolve', 'done', jQuery.Callbacks('once memory'),\r\n          jQuery.Callbacks('once memory'), 0, 'resolved'],\r\n        ['reject', 'fail', jQuery.Callbacks('once memory'),\r\n          jQuery.Callbacks('once memory'), 1, 'rejected']\r\n      ]\r\n      let state = 'pending'\r\n      var promise = {\r\n        state: function () {\r\n          return state\r\n        },\r\n        always: function () {\r\n          deferred.done(arguments).fail(arguments)\r\n          return this\r\n        },\r\n        catch: function (fn) {\r\n          return promise.then(null, fn)\r\n        },\r\n\r\n        // Keep pipe for back-compat\r\n        pipe: function (/* fnDone, fnFail, fnProgress */) {\r\n          let fns = arguments\r\n\r\n          return jQuery.Deferred(function (newDefer) {\r\n            jQuery.each(tuples, function (_i, tuple) {\r\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\r\n              const fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]\r\n\r\n              // deferred.progress(function() { bind to newDefer or newDefer.notify })\r\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\r\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\r\n              deferred[tuple[1]](function () {\r\n                const returned = fn && fn.apply(this, arguments)\r\n                if (returned && isFunction(returned.promise)) {\r\n                  returned.promise()\r\n                    .progress(newDefer.notify)\r\n                    .done(newDefer.resolve)\r\n                    .fail(newDefer.reject)\r\n                } else {\r\n                  newDefer[tuple[0] + 'With'](\r\n                    this,\r\n                    fn ? [returned] : arguments\r\n                  )\r\n                }\r\n              })\r\n            })\r\n            fns = null\r\n          }).promise()\r\n        },\r\n        then: function (onFulfilled, onRejected, onProgress) {\r\n          let maxDepth = 0\r\n          function resolve (depth, deferred, handler, special) {\r\n            return function () {\r\n              let that = this\r\n              let args = arguments\r\n              const mightThrow = function () {\r\n                let returned, then\r\n\r\n                // Support: Promises/A+ section 2.3.3.3.3\r\n                // https://promisesaplus.com/#point-59\r\n                // Ignore double-resolution attempts\r\n                if (depth < maxDepth) {\r\n                  return\r\n                }\r\n\r\n                returned = handler.apply(that, args)\r\n\r\n                // Support: Promises/A+ section 2.3.1\r\n                // https://promisesaplus.com/#point-48\r\n                if (returned === deferred.promise()) {\r\n                  throw new TypeError('Thenable self-resolution')\r\n                }\r\n\r\n                // Support: Promises/A+ sections 2.3.3.1, 3.5\r\n                // https://promisesaplus.com/#point-54\r\n                // https://promisesaplus.com/#point-75\r\n                // Retrieve `then` only once\r\n                then = returned &&\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\r\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\r\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\r\n\t\t\t\t\t\t\t\t\t\t(typeof returned === 'object' ||\r\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === 'function') &&\r\n\t\t\t\t\t\t\t\t\t\treturned.then\r\n\r\n                // Handle a returned thenable\r\n                if (isFunction(then)) {\r\n                  // Special processors (notify) just wait for resolution\r\n                  if (special) {\r\n                    then.call(\r\n                      returned,\r\n                      resolve(maxDepth, deferred, Identity, special),\r\n                      resolve(maxDepth, deferred, Thrower, special)\r\n                    )\r\n\r\n                    // Normal processors (resolve) also hook into progress\r\n                  } else {\r\n                    // ...and disregard older resolution values\r\n                    maxDepth++\r\n\r\n                    then.call(\r\n                      returned,\r\n                      resolve(maxDepth, deferred, Identity, special),\r\n                      resolve(maxDepth, deferred, Thrower, special),\r\n                      resolve(maxDepth, deferred, Identity,\r\n                        deferred.notifyWith)\r\n                    )\r\n                  }\r\n\r\n                  // Handle all other returned values\r\n                } else {\r\n                  // Only substitute handlers pass on context\r\n                  // and multiple values (non-spec behavior)\r\n                  if (handler !== Identity) {\r\n                    that = undefined\r\n                    args = [returned]\r\n                  }\r\n\r\n                  // Process the value(s)\r\n                  // Default process is resolve\r\n                  (special || deferred.resolveWith)(that, args)\r\n                }\r\n              }\r\n\r\n              // Only normal processors (resolve) catch and reject exceptions\r\n              var process = special\r\n                ? mightThrow\r\n                : function () {\r\n                  try {\r\n                    mightThrow()\r\n                  } catch (e) {\r\n                    if (jQuery.Deferred.exceptionHook) {\r\n                      jQuery.Deferred.exceptionHook(e,\r\n                        process.error)\r\n                    }\r\n\r\n                    // Support: Promises/A+ section 2.3.3.3.4.1\r\n                    // https://promisesaplus.com/#point-61\r\n                    // Ignore post-resolution exceptions\r\n                    if (depth + 1 >= maxDepth) {\r\n                      // Only substitute handlers pass on context\r\n                      // and multiple values (non-spec behavior)\r\n                      if (handler !== Thrower) {\r\n                        that = undefined\r\n                        args = [e]\r\n                      }\r\n\r\n                      deferred.rejectWith(that, args)\r\n                    }\r\n                  }\r\n                }\r\n\r\n              // Support: Promises/A+ section 2.3.3.3.1\r\n              // https://promisesaplus.com/#point-57\r\n              // Re-resolve promises immediately to dodge false rejection from\r\n              // subsequent errors\r\n              if (depth) {\r\n                process()\r\n              } else {\r\n                // Call an optional hook to record the error, in case of exception\r\n                // since it's otherwise lost when execution goes async\r\n                if (jQuery.Deferred.getErrorHook) {\r\n                  process.error = jQuery.Deferred.getErrorHook()\r\n\r\n                  // The deprecated alias of the above. While the name suggests\r\n                  // returning the stack, not an error instance, jQuery just passes\r\n                  // it directly to `console.warn` so both will work; an instance\r\n                  // just better cooperates with source maps.\r\n                } else if (jQuery.Deferred.getStackHook) {\r\n                  process.error = jQuery.Deferred.getStackHook()\r\n                }\r\n                window.setTimeout(process)\r\n              }\r\n            }\r\n          }\r\n\r\n          return jQuery.Deferred(function (newDefer) {\r\n            // progress_handlers.add( ... )\r\n            tuples[0][3].add(\r\n              resolve(\r\n                0,\r\n                newDefer,\r\n                isFunction(onProgress)\r\n                  ? onProgress\r\n                  : Identity,\r\n                newDefer.notifyWith\r\n              )\r\n            )\r\n\r\n            // fulfilled_handlers.add( ... )\r\n            tuples[1][3].add(\r\n              resolve(\r\n                0,\r\n                newDefer,\r\n                isFunction(onFulfilled)\r\n                  ? onFulfilled\r\n                  : Identity\r\n              )\r\n            )\r\n\r\n            // rejected_handlers.add( ... )\r\n            tuples[2][3].add(\r\n              resolve(\r\n                0,\r\n                newDefer,\r\n                isFunction(onRejected)\r\n                  ? onRejected\r\n                  : Thrower\r\n              )\r\n            )\r\n          }).promise()\r\n        },\r\n\r\n        // Get a promise for this deferred\r\n        // If obj is provided, the promise aspect is added to the object\r\n        promise: function (obj) {\r\n          return obj != null ? jQuery.extend(obj, promise) : promise\r\n        }\r\n      }\r\n      var deferred = {}\r\n\r\n      // Add list-specific methods\r\n      jQuery.each(tuples, function (i, tuple) {\r\n        const list = tuple[2]\r\n        const stateString = tuple[5]\r\n\r\n        // promise.progress = list.add\r\n        // promise.done = list.add\r\n        // promise.fail = list.add\r\n        promise[tuple[1]] = list.add\r\n\r\n        // Handle state\r\n        if (stateString) {\r\n          list.add(\r\n            function () {\r\n              // state = \"resolved\" (i.e., fulfilled)\r\n              // state = \"rejected\"\r\n              state = stateString\r\n            },\r\n\r\n            // rejected_callbacks.disable\r\n            // fulfilled_callbacks.disable\r\n            tuples[3 - i][2].disable,\r\n\r\n            // rejected_handlers.disable\r\n            // fulfilled_handlers.disable\r\n            tuples[3 - i][3].disable,\r\n\r\n            // progress_callbacks.lock\r\n            tuples[0][2].lock,\r\n\r\n            // progress_handlers.lock\r\n            tuples[0][3].lock\r\n          )\r\n        }\r\n\r\n        // progress_handlers.fire\r\n        // fulfilled_handlers.fire\r\n        // rejected_handlers.fire\r\n        list.add(tuple[3].fire)\r\n\r\n        // deferred.notify = function() { deferred.notifyWith(...) }\r\n        // deferred.resolve = function() { deferred.resolveWith(...) }\r\n        // deferred.reject = function() { deferred.rejectWith(...) }\r\n        deferred[tuple[0]] = function () {\r\n          deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments)\r\n          return this\r\n        }\r\n\r\n        // deferred.notifyWith = list.fireWith\r\n        // deferred.resolveWith = list.fireWith\r\n        // deferred.rejectWith = list.fireWith\r\n        deferred[tuple[0] + 'With'] = list.fireWith\r\n      })\r\n\r\n      // Make the deferred a promise\r\n      promise.promise(deferred)\r\n\r\n      // Call given func if any\r\n      if (func) {\r\n        func.call(deferred, deferred)\r\n      }\r\n\r\n      // All done!\r\n      return deferred\r\n    },\r\n\r\n    // Deferred helper\r\n    when: function (singleValue) {\r\n      let\r\n\r\n        // count of uncompleted subordinates\r\n        remaining = arguments.length\r\n\r\n      // count of unprocessed arguments\r\n      let i = remaining\r\n\r\n      // subordinate fulfillment data\r\n      const resolveContexts = Array(i)\r\n      const resolveValues = slice.call(arguments)\r\n\r\n      // the primary Deferred\r\n      const primary = jQuery.Deferred()\r\n\r\n      // subordinate callback factory\r\n      const updateFunc = function (i) {\r\n        return function (value) {\r\n          resolveContexts[i] = this\r\n          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value\r\n          if (!(--remaining)) {\r\n            primary.resolveWith(resolveContexts, resolveValues)\r\n          }\r\n        }\r\n      }\r\n\r\n      // Single- and empty arguments are adopted like Promise.resolve\r\n      if (remaining <= 1) {\r\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject,\r\n          !remaining)\r\n\r\n        // Use .then() to unwrap secondary thenables (cf. gh-3000)\r\n        if (primary.state() === 'pending' ||\r\n\t\t\t\tisFunction(resolveValues[i] && resolveValues[i].then)) {\r\n          return primary.then()\r\n        }\r\n      }\r\n\r\n      // Multiple arguments are aggregated like Promise.all array elements\r\n      while (i--) {\r\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject)\r\n      }\r\n\r\n      return primary.promise()\r\n    }\r\n  })\r\n\r\n  // These usually indicate a programmer mistake during development,\r\n  // warn about them ASAP rather than swallowing them by default.\r\n  const rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/\r\n\r\n  // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\r\n  // captured before the async barrier to get the original error cause\r\n  // which may otherwise be hidden.\r\n  jQuery.Deferred.exceptionHook = function (error, asyncError) {\r\n    // Support: IE 8 - 9 only\r\n    // Console exists when dev tools are open, which can happen at any time\r\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\r\n      window.console.warn('jQuery.Deferred exception: ' + error.message,\r\n        error.stack, asyncError)\r\n    }\r\n  }\r\n\r\n  jQuery.readyException = function (error) {\r\n    window.setTimeout(function () {\r\n      throw error\r\n    })\r\n  }\r\n\r\n  // The deferred used on DOM ready\r\n  const readyList = jQuery.Deferred()\r\n\r\n  jQuery.fn.ready = function (fn) {\r\n    readyList\r\n      .then(fn)\r\n\r\n    // Wrap jQuery.readyException in a function so that the lookup\r\n    // happens at the time of error handling instead of callback\r\n    // registration.\r\n      .catch(function (error) {\r\n        jQuery.readyException(error)\r\n      })\r\n\r\n    return this\r\n  }\r\n\r\n  jQuery.extend({\r\n\r\n    // Is the DOM ready to be used? Set to true once it occurs.\r\n    isReady: false,\r\n\r\n    // A counter to track how many items to wait for before\r\n    // the ready event fires. See trac-6781\r\n    readyWait: 1,\r\n\r\n    // Handle when the DOM is ready\r\n    ready: function (wait) {\r\n      // Abort if there are pending holds or we're already ready\r\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\r\n        return\r\n      }\r\n\r\n      // Remember that the DOM is ready\r\n      jQuery.isReady = true\r\n\r\n      // If a normal DOM Ready event fired, decrement, and wait if need be\r\n      if (wait !== true && --jQuery.readyWait > 0) {\r\n        return\r\n      }\r\n\r\n      // If there are functions bound, to execute\r\n      readyList.resolveWith(document, [jQuery])\r\n    }\r\n  })\r\n\r\n  jQuery.ready.then = readyList.then\r\n\r\n  // The ready event handler and self cleanup method\r\n  function completed () {\r\n    document.removeEventListener('DOMContentLoaded', completed)\r\n    window.removeEventListener('load', completed)\r\n    jQuery.ready()\r\n  }\r\n\r\n  // Catch cases where $(document).ready() is called\r\n  // after the browser event has already occurred.\r\n  // Support: IE <=9 - 10 only\r\n  // Older IE sometimes signals \"interactive\" too soon\r\n  if (document.readyState === 'complete' ||\r\n\t(document.readyState !== 'loading' && !document.documentElement.doScroll)) {\r\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\r\n    window.setTimeout(jQuery.ready)\r\n  } else {\r\n    // Use the handy event callback\r\n    document.addEventListener('DOMContentLoaded', completed)\r\n\r\n    // A fallback to window.onload, that will always work\r\n    window.addEventListener('load', completed)\r\n  }\r\n\r\n  // Multifunctional method to get and set values of a collection\r\n  // The value/s can optionally be executed if it's a function\r\n  const access = function (elems, fn, key, value, chainable, emptyGet, raw) {\r\n    let i = 0\r\n    const len = elems.length\r\n    let bulk = key == null\r\n\r\n    // Sets many values\r\n    if (toType(key) === 'object') {\r\n      chainable = true\r\n      for (i in key) {\r\n        access(elems, fn, i, key[i], true, emptyGet, raw)\r\n      }\r\n\r\n      // Sets one value\r\n    } else if (value !== undefined) {\r\n      chainable = true\r\n\r\n      if (!isFunction(value)) {\r\n        raw = true\r\n      }\r\n\r\n      if (bulk) {\r\n        // Bulk operations run against the entire set\r\n        if (raw) {\r\n          fn.call(elems, value)\r\n          fn = null\r\n\r\n          // ...except when executing function values\r\n        } else {\r\n          bulk = fn\r\n          fn = function (elem, _key, value) {\r\n            return bulk.call(jQuery(elem), value)\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fn) {\r\n        for (; i < len; i++) {\r\n          fn(\r\n            elems[i], key, raw\r\n              ? value\r\n              : value.call(elems[i], i, fn(elems[i], key))\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    if (chainable) {\r\n      return elems\r\n    }\r\n\r\n    // Gets\r\n    if (bulk) {\r\n      return fn.call(elems)\r\n    }\r\n\r\n    return len ? fn(elems[0], key) : emptyGet\r\n  }\r\n\r\n  // Matches dashed string for camelizing\r\n  const rmsPrefix = /^-ms-/\r\n  const rdashAlpha = /-([a-z])/g\r\n\r\n  // Used by camelCase as callback to replace()\r\n  function fcamelCase (_all, letter) {\r\n    return letter.toUpperCase()\r\n  }\r\n\r\n  // Convert dashed to camelCase; used by the css and data modules\r\n  // Support: IE <=9 - 11, Edge 12 - 15\r\n  // Microsoft forgot to hump their vendor prefix (trac-9572)\r\n  function camelCase (string) {\r\n    return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase)\r\n  }\r\n  const acceptData = function (owner) {\r\n    // Accepts only:\r\n    //  - Node\r\n    //    - Node.ELEMENT_NODE\r\n    //    - Node.DOCUMENT_NODE\r\n    //  - Object\r\n    //    - Any\r\n    return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType)\r\n  }\r\n\r\n  function Data () {\r\n    this.expando = jQuery.expando + Data.uid++\r\n  }\r\n\r\n  Data.uid = 1\r\n\r\n  Data.prototype = {\r\n\r\n    cache: function (owner) {\r\n      // Check if the owner object already has a cache\r\n      let value = owner[this.expando]\r\n\r\n      // If not, create one\r\n      if (!value) {\r\n        value = {}\r\n\r\n        // We can accept data for non-element nodes in modern browsers,\r\n        // but we should not, see trac-8335.\r\n        // Always return an empty object.\r\n        if (acceptData(owner)) {\r\n          // If it is a node unlikely to be stringify-ed or looped over\r\n          // use plain assignment\r\n          if (owner.nodeType) {\r\n            owner[this.expando] = value\r\n\r\n            // Otherwise secure it in a non-enumerable property\r\n            // configurable must be true to allow the property to be\r\n            // deleted when data is removed\r\n          } else {\r\n            Object.defineProperty(owner, this.expando, {\r\n              value,\r\n              configurable: true\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n      return value\r\n    },\r\n    set: function (owner, data, value) {\r\n      let prop\r\n      const cache = this.cache(owner)\r\n\r\n      // Handle: [ owner, key, value ] args\r\n      // Always use camelCase key (gh-2257)\r\n      if (typeof data === 'string') {\r\n        cache[camelCase(data)] = value\r\n\r\n        // Handle: [ owner, { properties } ] args\r\n      } else {\r\n        // Copy the properties one-by-one to the cache object\r\n        for (prop in data) {\r\n          cache[camelCase(prop)] = data[prop]\r\n        }\r\n      }\r\n      return cache\r\n    },\r\n    get: function (owner, key) {\r\n      return key === undefined\r\n        ? this.cache(owner)\r\n\r\n      // Always use camelCase key (gh-2257)\r\n        : owner[this.expando] && owner[this.expando][camelCase(key)]\r\n    },\r\n    access: function (owner, key, value) {\r\n      // In cases where either:\r\n      //\r\n      //   1. No key was specified\r\n      //   2. A string key was specified, but no value provided\r\n      //\r\n      // Take the \"read\" path and allow the get method to determine\r\n      // which value to return, respectively either:\r\n      //\r\n      //   1. The entire cache object\r\n      //   2. The data stored at the key\r\n      //\r\n      if (key === undefined ||\r\n\t\t\t\t((key && typeof key === 'string') && value === undefined)) {\r\n        return this.get(owner, key)\r\n      }\r\n\r\n      // When the key is not a string, or both a key and value\r\n      // are specified, set or extend (existing objects) with either:\r\n      //\r\n      //   1. An object of properties\r\n      //   2. A key and value\r\n      //\r\n      this.set(owner, key, value)\r\n\r\n      // Since the \"set\" path can have two possible entry points\r\n      // return the expected data based on which path was taken[*]\r\n      return value !== undefined ? value : key\r\n    },\r\n    remove: function (owner, key) {\r\n      let i\r\n      const cache = owner[this.expando]\r\n\r\n      if (cache === undefined) {\r\n        return\r\n      }\r\n\r\n      if (key !== undefined) {\r\n        // Support array or space separated string of keys\r\n        if (Array.isArray(key)) {\r\n          // If key is an array of keys...\r\n          // We always set camelCase keys, so remove that.\r\n          key = key.map(camelCase)\r\n        } else {\r\n          key = camelCase(key)\r\n\r\n          // If a key with the spaces exists, use it.\r\n          // Otherwise, create an array by matching non-whitespace\r\n          key = key in cache\r\n            ? [key]\r\n            : (key.match(rnothtmlwhite) || [])\r\n        }\r\n\r\n        i = key.length\r\n\r\n        while (i--) {\r\n          delete cache[key[i]]\r\n        }\r\n      }\r\n\r\n      // Remove the expando if there's no more data\r\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\r\n        // Support: Chrome <=35 - 45\r\n        // Webkit & Blink performance suffers when deleting properties\r\n        // from DOM nodes, so set to undefined instead\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\r\n        if (owner.nodeType) {\r\n          owner[this.expando] = undefined\r\n        } else {\r\n          delete owner[this.expando]\r\n        }\r\n      }\r\n    },\r\n    hasData: function (owner) {\r\n      const cache = owner[this.expando]\r\n      return cache !== undefined && !jQuery.isEmptyObject(cache)\r\n    }\r\n  }\r\n  const dataPriv = new Data()\r\n\r\n  const dataUser = new Data()\r\n\r\n  //\tImplementation Summary\r\n  //\r\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\r\n  //\t2. Improve the module's maintainability by reducing the storage\r\n  //\t\tpaths to a single mechanism.\r\n  //\t3. Use the same single mechanism to support \"private\" and \"user\" data.\r\n  //\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\r\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\r\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\r\n\r\n  const rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/\r\n  const rmultiDash = /[A-Z]/g\r\n\r\n  function getData (data) {\r\n    if (data === 'true') {\r\n      return true\r\n    }\r\n\r\n    if (data === 'false') {\r\n      return false\r\n    }\r\n\r\n    if (data === 'null') {\r\n      return null\r\n    }\r\n\r\n    // Only convert to a number if it doesn't change the string\r\n    if (data === +data + '') {\r\n      return +data\r\n    }\r\n\r\n    if (rbrace.test(data)) {\r\n      return JSON.parse(data)\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  function dataAttr (elem, key, data) {\r\n    let name\r\n\r\n    // If nothing was found internally, try to fetch any\r\n    // data from the HTML5 data-* attribute\r\n    if (data === undefined && elem.nodeType === 1) {\r\n      name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase()\r\n      data = elem.getAttribute(name)\r\n\r\n      if (typeof data === 'string') {\r\n        try {\r\n          data = getData(data)\r\n        } catch (e) {}\r\n\r\n        // Make sure we set the data so it isn't changed later\r\n        dataUser.set(elem, key, data)\r\n      } else {\r\n        data = undefined\r\n      }\r\n    }\r\n    return data\r\n  }\r\n\r\n  jQuery.extend({\r\n    hasData: function (elem) {\r\n      return dataUser.hasData(elem) || dataPriv.hasData(elem)\r\n    },\r\n\r\n    data: function (elem, name, data) {\r\n      return dataUser.access(elem, name, data)\r\n    },\r\n\r\n    removeData: function (elem, name) {\r\n      dataUser.remove(elem, name)\r\n    },\r\n\r\n    // TODO: Now that all calls to _data and _removeData have been replaced\r\n    // with direct calls to dataPriv methods, these can be deprecated.\r\n    _data: function (elem, name, data) {\r\n      return dataPriv.access(elem, name, data)\r\n    },\r\n\r\n    _removeData: function (elem, name) {\r\n      dataPriv.remove(elem, name)\r\n    }\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n    data: function (key, value) {\r\n      let i; let name; let data\r\n      const elem = this[0]\r\n      const attrs = elem && elem.attributes\r\n\r\n      // Gets all values\r\n      if (key === undefined) {\r\n        if (this.length) {\r\n          data = dataUser.get(elem)\r\n\r\n          if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {\r\n            i = attrs.length\r\n            while (i--) {\r\n              // Support: IE 11 only\r\n              // The attrs elements can be null (trac-14894)\r\n              if (attrs[i]) {\r\n                name = attrs[i].name\r\n                if (name.indexOf('data-') === 0) {\r\n                  name = camelCase(name.slice(5))\r\n                  dataAttr(elem, name, data[name])\r\n                }\r\n              }\r\n            }\r\n            dataPriv.set(elem, 'hasDataAttrs', true)\r\n          }\r\n        }\r\n\r\n        return data\r\n      }\r\n\r\n      // Sets multiple values\r\n      if (typeof key === 'object') {\r\n        return this.each(function () {\r\n          dataUser.set(this, key)\r\n        })\r\n      }\r\n\r\n      return access(this, function (value) {\r\n        let data\r\n\r\n        // The calling jQuery object (element matches) is not empty\r\n        // (and therefore has an element appears at this[ 0 ]) and the\r\n        // `value` parameter was not undefined. An empty jQuery object\r\n        // will result in `undefined` for elem = this[ 0 ] which will\r\n        // throw an exception if an attempt to read a data cache is made.\r\n        if (elem && value === undefined) {\r\n          // Attempt to get data from the cache\r\n          // The key will always be camelCased in Data\r\n          data = dataUser.get(elem, key)\r\n          if (data !== undefined) {\r\n            return data\r\n          }\r\n\r\n          // Attempt to \"discover\" the data in\r\n          // HTML5 custom data-* attrs\r\n          data = dataAttr(elem, key)\r\n          if (data !== undefined) {\r\n            return data\r\n          }\r\n\r\n          // We tried really hard, but the data doesn't exist.\r\n          return\r\n        }\r\n\r\n        // Set the data...\r\n        this.each(function () {\r\n          // We always store the camelCased key\r\n          dataUser.set(this, key, value)\r\n        })\r\n      }, null, value, arguments.length > 1, null, true)\r\n    },\r\n\r\n    removeData: function (key) {\r\n      return this.each(function () {\r\n        dataUser.remove(this, key)\r\n      })\r\n    }\r\n  })\r\n\r\n  jQuery.extend({\r\n    queue: function (elem, type, data) {\r\n      let queue\r\n\r\n      if (elem) {\r\n        type = (type || 'fx') + 'queue'\r\n        queue = dataPriv.get(elem, type)\r\n\r\n        // Speed up dequeue by getting out quickly if this is just a lookup\r\n        if (data) {\r\n          if (!queue || Array.isArray(data)) {\r\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data))\r\n          } else {\r\n            queue.push(data)\r\n          }\r\n        }\r\n        return queue || []\r\n      }\r\n    },\r\n\r\n    dequeue: function (elem, type) {\r\n      type = type || 'fx'\r\n\r\n      const queue = jQuery.queue(elem, type)\r\n      let startLength = queue.length\r\n      let fn = queue.shift()\r\n      const hooks = jQuery._queueHooks(elem, type)\r\n      const next = function () {\r\n        jQuery.dequeue(elem, type)\r\n      }\r\n\r\n      // If the fx queue is dequeued, always remove the progress sentinel\r\n      if (fn === 'inprogress') {\r\n        fn = queue.shift()\r\n        startLength--\r\n      }\r\n\r\n      if (fn) {\r\n        // Add a progress sentinel to prevent the fx queue from being\r\n        // automatically dequeued\r\n        if (type === 'fx') {\r\n          queue.unshift('inprogress')\r\n        }\r\n\r\n        // Clear up the last queue stop function\r\n        delete hooks.stop\r\n        fn.call(elem, next, hooks)\r\n      }\r\n\r\n      if (!startLength && hooks) {\r\n        hooks.empty.fire()\r\n      }\r\n    },\r\n\r\n    // Not public - generate a queueHooks object, or return the current one\r\n    _queueHooks: function (elem, type) {\r\n      const key = type + 'queueHooks'\r\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\r\n        empty: jQuery.Callbacks('once memory').add(function () {\r\n          dataPriv.remove(elem, [type + 'queue', key])\r\n        })\r\n      })\r\n    }\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n    queue: function (type, data) {\r\n      let setter = 2\r\n\r\n      if (typeof type !== 'string') {\r\n        data = type\r\n        type = 'fx'\r\n        setter--\r\n      }\r\n\r\n      if (arguments.length < setter) {\r\n        return jQuery.queue(this[0], type)\r\n      }\r\n\r\n      return data === undefined\r\n        ? this\r\n        : this.each(function () {\r\n          const queue = jQuery.queue(this, type, data)\r\n\r\n          // Ensure a hooks for this queue\r\n          jQuery._queueHooks(this, type)\r\n\r\n          if (type === 'fx' && queue[0] !== 'inprogress') {\r\n            jQuery.dequeue(this, type)\r\n          }\r\n        })\r\n    },\r\n    dequeue: function (type) {\r\n      return this.each(function () {\r\n        jQuery.dequeue(this, type)\r\n      })\r\n    },\r\n    clearQueue: function (type) {\r\n      return this.queue(type || 'fx', [])\r\n    },\r\n\r\n    // Get a promise resolved when queues of a certain type\r\n    // are emptied (fx is the type by default)\r\n    promise: function (type, obj) {\r\n      let tmp\r\n      let count = 1\r\n      const defer = jQuery.Deferred()\r\n      const elements = this\r\n      let i = this.length\r\n      const resolve = function () {\r\n        if (!(--count)) {\r\n          defer.resolveWith(elements, [elements])\r\n        }\r\n      }\r\n\r\n      if (typeof type !== 'string') {\r\n        obj = type\r\n        type = undefined\r\n      }\r\n      type = type || 'fx'\r\n\r\n      while (i--) {\r\n        tmp = dataPriv.get(elements[i], type + 'queueHooks')\r\n        if (tmp && tmp.empty) {\r\n          count++\r\n          tmp.empty.add(resolve)\r\n        }\r\n      }\r\n      resolve()\r\n      return defer.promise(obj)\r\n    }\r\n  })\r\n  const pnum = (/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/).source\r\n\r\n  const rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i')\r\n\r\n  const cssExpand = ['Top', 'Right', 'Bottom', 'Left']\r\n\r\n  const documentElement = document.documentElement\r\n\r\n  let isAttached = function (elem) {\r\n    return jQuery.contains(elem.ownerDocument, elem)\r\n  }\r\n  const composed = { composed: true }\r\n\r\n  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\r\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\r\n  // Support: iOS 10.0-10.2 only\r\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\r\n  // leading to errors. We need to check for `getRootNode`.\r\n  if (documentElement.getRootNode) {\r\n    isAttached = function (elem) {\r\n      return jQuery.contains(elem.ownerDocument, elem) ||\r\n\t\t\t\telem.getRootNode(composed) === elem.ownerDocument\r\n    }\r\n  }\r\n  const isHiddenWithinTree = function (elem, el) {\r\n    // isHiddenWithinTree might be called from jQuery#filter function;\r\n    // in that case, element will be second argument\r\n    elem = el || elem\r\n\r\n    // Inline style trumps all\r\n    return elem.style.display === 'none' ||\r\n\t\t\telem.style.display === '' &&\r\n\r\n\t\t\t// Otherwise, check computed style\r\n\t\t\t// Support: Firefox <=43 - 45\r\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\r\n\t\t\t// in the document.\r\n\t\t\tisAttached(elem) &&\r\n\r\n\t\t\tjQuery.css(elem, 'display') === 'none'\r\n  }\r\n\r\n  function adjustCSS (elem, prop, valueParts, tween) {\r\n    let adjusted; let scale\r\n    let maxIterations = 20\r\n    const currentValue = tween\r\n      ? function () {\r\n        return tween.cur()\r\n      }\r\n      : function () {\r\n        return jQuery.css(elem, prop, '')\r\n      }\r\n    let initial = currentValue()\r\n    let unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px')\r\n\r\n    // Starting value computation is required for potential unit mismatches\r\n    let initialInUnit = elem.nodeType &&\r\n\t\t\t(jQuery.cssNumber[prop] || unit !== 'px' && +initial) &&\r\n\t\t\trcssNum.exec(jQuery.css(elem, prop))\r\n\r\n    if (initialInUnit && initialInUnit[3] !== unit) {\r\n      // Support: Firefox <=54\r\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\r\n      initial = initial / 2\r\n\r\n      // Trust units reported by jQuery.css\r\n      unit = unit || initialInUnit[3]\r\n\r\n      // Iteratively approximate from a nonzero starting point\r\n      initialInUnit = +initial || 1\r\n\r\n      while (maxIterations--) {\r\n        // Evaluate and update our best guess (doubling guesses that zero out).\r\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\r\n        jQuery.style(elem, prop, initialInUnit + unit)\r\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\r\n          maxIterations = 0\r\n        }\r\n        initialInUnit = initialInUnit / scale\r\n      }\r\n\r\n      initialInUnit = initialInUnit * 2\r\n      jQuery.style(elem, prop, initialInUnit + unit)\r\n\r\n      // Make sure we update the tween properties later on\r\n      valueParts = valueParts || []\r\n    }\r\n\r\n    if (valueParts) {\r\n      initialInUnit = +initialInUnit || +initial || 0\r\n\r\n      // Apply relative offset (+=/-=) if specified\r\n      adjusted = valueParts[1]\r\n        ? initialInUnit + (valueParts[1] + 1) * valueParts[2]\r\n        : +valueParts[2]\r\n      if (tween) {\r\n        tween.unit = unit\r\n        tween.start = initialInUnit\r\n        tween.end = adjusted\r\n      }\r\n    }\r\n    return adjusted\r\n  }\r\n\r\n  const defaultDisplayMap = {}\r\n\r\n  function getDefaultDisplay (elem) {\r\n    let temp\r\n    const doc = elem.ownerDocument\r\n    const nodeName = elem.nodeName\r\n    let display = defaultDisplayMap[nodeName]\r\n\r\n    if (display) {\r\n      return display\r\n    }\r\n\r\n    temp = doc.body.appendChild(doc.createElement(nodeName))\r\n    display = jQuery.css(temp, 'display')\r\n\r\n    temp.parentNode.removeChild(temp)\r\n\r\n    if (display === 'none') {\r\n      display = 'block'\r\n    }\r\n    defaultDisplayMap[nodeName] = display\r\n\r\n    return display\r\n  }\r\n\r\n  function showHide (elements, show) {\r\n    let display; let elem\r\n    const values = []\r\n    let index = 0\r\n    const length = elements.length\r\n\r\n    // Determine new display value for elements that need to change\r\n    for (; index < length; index++) {\r\n      elem = elements[index]\r\n      if (!elem.style) {\r\n        continue\r\n      }\r\n\r\n      display = elem.style.display\r\n      if (show) {\r\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\r\n        // check is required in this first loop unless we have a nonempty display value (either\r\n        // inline or about-to-be-restored)\r\n        if (display === 'none') {\r\n          values[index] = dataPriv.get(elem, 'display') || null\r\n          if (!values[index]) {\r\n            elem.style.display = ''\r\n          }\r\n        }\r\n        if (elem.style.display === '' && isHiddenWithinTree(elem)) {\r\n          values[index] = getDefaultDisplay(elem)\r\n        }\r\n      } else {\r\n        if (display !== 'none') {\r\n          values[index] = 'none'\r\n\r\n          // Remember what we're overwriting\r\n          dataPriv.set(elem, 'display', display)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Set the display of the elements in a second loop to avoid constant reflow\r\n    for (index = 0; index < length; index++) {\r\n      if (values[index] != null) {\r\n        elements[index].style.display = values[index]\r\n      }\r\n    }\r\n\r\n    return elements\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    show: function () {\r\n      return showHide(this, true)\r\n    },\r\n    hide: function () {\r\n      return showHide(this)\r\n    },\r\n    toggle: function (state) {\r\n      if (typeof state === 'boolean') {\r\n        return state ? this.show() : this.hide()\r\n      }\r\n\r\n      return this.each(function () {\r\n        if (isHiddenWithinTree(this)) {\r\n          jQuery(this).show()\r\n        } else {\r\n          jQuery(this).hide()\r\n        }\r\n      })\r\n    }\r\n  })\r\n  const rcheckableType = (/^(?:checkbox|radio)$/i)\r\n\r\n  const rtagName = (/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i)\r\n\r\n  const rscriptType = (/^$|^module$|\\/(?:java|ecma)script/i);\r\n\r\n  (function () {\r\n    const fragment = document.createDocumentFragment()\r\n    const div = fragment.appendChild(document.createElement('div'))\r\n    const input = document.createElement('input')\r\n\r\n    // Support: Android 4.0 - 4.3 only\r\n    // Check state lost if the name is set (trac-11217)\r\n    // Support: Windows Web Apps (WWA)\r\n    // `name` and `type` must use .setAttribute for WWA (trac-14901)\r\n    input.setAttribute('type', 'radio')\r\n    input.setAttribute('checked', 'checked')\r\n    input.setAttribute('name', 't')\r\n\r\n    div.appendChild(input)\r\n\r\n    // Support: Android <=4.1 only\r\n    // Older WebKit doesn't clone checked state correctly in fragments\r\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked\r\n\r\n    // Support: IE <=11 only\r\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\r\n    div.innerHTML = '<textarea>x</textarea>'\r\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue\r\n\r\n    // Support: IE <=9 only\r\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\r\n    // the select element.\r\n    div.innerHTML = '<option></option>'\r\n    support.option = !!div.lastChild\r\n  })()\r\n\r\n  // We have to close these tags to support XHTML (trac-13200)\r\n  const wrapMap = {\r\n\r\n    // XHTML parsers do not magically insert elements in the\r\n    // same way that tag soup parsers do. So we cannot shorten\r\n    // this by omitting <tbody> or other required elements.\r\n    thead: [1, '<table>', '</table>'],\r\n    col: [2, '<table><colgroup>', '</colgroup></table>'],\r\n    tr: [2, '<table><tbody>', '</tbody></table>'],\r\n    td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],\r\n\r\n    _default: [0, '', '']\r\n  }\r\n\r\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead\r\n  wrapMap.th = wrapMap.td\r\n\r\n  // Support: IE <=9 only\r\n  if (!support.option) {\r\n    wrapMap.optgroup = wrapMap.option = [1, \"<select multiple='multiple'>\", '</select>']\r\n  }\r\n\r\n  function getAll (context, tag) {\r\n    // Support: IE <=9 - 11 only\r\n    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\r\n    let ret\r\n\r\n    if (typeof context.getElementsByTagName !== 'undefined') {\r\n      ret = context.getElementsByTagName(tag || '*')\r\n    } else if (typeof context.querySelectorAll !== 'undefined') {\r\n      ret = context.querySelectorAll(tag || '*')\r\n    } else {\r\n      ret = []\r\n    }\r\n\r\n    if (tag === undefined || tag && nodeName(context, tag)) {\r\n      return jQuery.merge([context], ret)\r\n    }\r\n\r\n    return ret\r\n  }\r\n\r\n  // Mark scripts as having already been evaluated\r\n  function setGlobalEval (elems, refElements) {\r\n    let i = 0\r\n    const l = elems.length\r\n\r\n    for (; i < l; i++) {\r\n      dataPriv.set(\r\n        elems[i],\r\n        'globalEval',\r\n        !refElements || dataPriv.get(refElements[i], 'globalEval')\r\n      )\r\n    }\r\n  }\r\n\r\n  const rhtml = /<|&#?\\w+;/\r\n\r\n  function buildFragment (elems, context, scripts, selection, ignored) {\r\n    let elem; let tmp; let tag; let wrap; let attached; let j\r\n    const fragment = context.createDocumentFragment()\r\n    const nodes = []\r\n    let i = 0\r\n    const l = elems.length\r\n\r\n    for (; i < l; i++) {\r\n      elem = elems[i]\r\n\r\n      if (elem || elem === 0) {\r\n        // Add nodes directly\r\n        if (toType(elem) === 'object') {\r\n          // Support: Android <=4.0 only, PhantomJS 1 only\r\n          // push.apply(_, arraylike) throws on ancient WebKit\r\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem)\r\n\r\n          // Convert non-html into a text node\r\n        } else if (!rhtml.test(elem)) {\r\n          nodes.push(context.createTextNode(elem))\r\n\r\n          // Convert html into DOM nodes\r\n        } else {\r\n          tmp = tmp || fragment.appendChild(context.createElement('div'))\r\n\r\n          // Deserialize a standard representation\r\n          tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase()\r\n          wrap = wrapMap[tag] || wrapMap._default\r\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]\r\n\r\n          // Descend through wrappers to the right content\r\n          j = wrap[0]\r\n          while (j--) {\r\n            tmp = tmp.lastChild\r\n          }\r\n\r\n          // Support: Android <=4.0 only, PhantomJS 1 only\r\n          // push.apply(_, arraylike) throws on ancient WebKit\r\n          jQuery.merge(nodes, tmp.childNodes)\r\n\r\n          // Remember the top-level container\r\n          tmp = fragment.firstChild\r\n\r\n          // Ensure the created nodes are orphaned (trac-12392)\r\n          tmp.textContent = ''\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove wrapper from fragment\r\n    fragment.textContent = ''\r\n\r\n    i = 0\r\n    while ((elem = nodes[i++])) {\r\n      // Skip elements already in the context collection (trac-4087)\r\n      if (selection && jQuery.inArray(elem, selection) > -1) {\r\n        if (ignored) {\r\n          ignored.push(elem)\r\n        }\r\n        continue\r\n      }\r\n\r\n      attached = isAttached(elem)\r\n\r\n      // Append to fragment\r\n      tmp = getAll(fragment.appendChild(elem), 'script')\r\n\r\n      // Preserve script evaluation history\r\n      if (attached) {\r\n        setGlobalEval(tmp)\r\n      }\r\n\r\n      // Capture executables\r\n      if (scripts) {\r\n        j = 0\r\n        while ((elem = tmp[j++])) {\r\n          if (rscriptType.test(elem.type || '')) {\r\n            scripts.push(elem)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return fragment\r\n  }\r\n\r\n  const rtypenamespace = /^([^.]*)(?:\\.(.+)|)/\r\n\r\n  function returnTrue () {\r\n    return true\r\n  }\r\n\r\n  function returnFalse () {\r\n    return false\r\n  }\r\n\r\n  function on (elem, types, selector, data, fn, one) {\r\n    let origFn, type\r\n\r\n    // Types can be a map of types/handlers\r\n    if (typeof types === 'object') {\r\n      // ( types-Object, selector, data )\r\n      if (typeof selector !== 'string') {\r\n        // ( types-Object, data )\r\n        data = data || selector\r\n        selector = undefined\r\n      }\r\n      for (type in types) {\r\n        on(elem, type, selector, data, types[type], one)\r\n      }\r\n      return elem\r\n    }\r\n\r\n    if (data == null && fn == null) {\r\n      // ( types, fn )\r\n      fn = selector\r\n      data = selector = undefined\r\n    } else if (fn == null) {\r\n      if (typeof selector === 'string') {\r\n        // ( types, selector, fn )\r\n        fn = data\r\n        data = undefined\r\n      } else {\r\n        // ( types, data, fn )\r\n        fn = data\r\n        data = selector\r\n        selector = undefined\r\n      }\r\n    }\r\n    if (fn === false) {\r\n      fn = returnFalse\r\n    } else if (!fn) {\r\n      return elem\r\n    }\r\n\r\n    if (one === 1) {\r\n      origFn = fn\r\n      fn = function (event) {\r\n        // Can use an empty set, since event contains the info\r\n        jQuery().off(event)\r\n        return origFn.apply(this, arguments)\r\n      }\r\n\r\n      // Use same guid so caller can remove using origFn\r\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)\r\n    }\r\n    return elem.each(function () {\r\n      jQuery.event.add(this, types, fn, data, selector)\r\n    })\r\n  }\r\n\r\n  /*\r\n * Helper functions for managing events -- not part of the public interface.\r\n * Props to Dean Edwards' addEvent library for many of the ideas.\r\n */\r\n  jQuery.event = {\r\n\r\n    global: {},\r\n\r\n    add: function (elem, types, handler, data, selector) {\r\n      let handleObjIn; let eventHandle; let tmp\r\n      let events; let t; let handleObj\r\n      let special; let handlers; let type; let namespaces; let origType\r\n      const elemData = dataPriv.get(elem)\r\n\r\n      // Only attach events to objects that accept data\r\n      if (!acceptData(elem)) {\r\n        return\r\n      }\r\n\r\n      // Caller can pass in an object of custom data in lieu of the handler\r\n      if (handler.handler) {\r\n        handleObjIn = handler\r\n        handler = handleObjIn.handler\r\n        selector = handleObjIn.selector\r\n      }\r\n\r\n      // Ensure that invalid selectors throw exceptions at attach time\r\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\r\n      if (selector) {\r\n        jQuery.find.matchesSelector(documentElement, selector)\r\n      }\r\n\r\n      // Make sure that the handler has a unique ID, used to find/remove it later\r\n      if (!handler.guid) {\r\n        handler.guid = jQuery.guid++\r\n      }\r\n\r\n      // Init the element's event structure and main handler, if this is the first\r\n      if (!(events = elemData.events)) {\r\n        events = elemData.events = Object.create(null)\r\n      }\r\n      if (!(eventHandle = elemData.handle)) {\r\n        eventHandle = elemData.handle = function (e) {\r\n          // Discard the second event of a jQuery.event.trigger() and\r\n          // when an event is called after a page has unloaded\r\n          return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type\r\n            ? jQuery.event.dispatch.apply(elem, arguments)\r\n            : undefined\r\n        }\r\n      }\r\n\r\n      // Handle multiple events separated by a space\r\n      types = (types || '').match(rnothtmlwhite) || ['']\r\n      t = types.length\r\n      while (t--) {\r\n        tmp = rtypenamespace.exec(types[t]) || []\r\n        type = origType = tmp[1]\r\n        namespaces = (tmp[2] || '').split('.').sort()\r\n\r\n        // There *must* be a type, no attaching namespace-only handlers\r\n        if (!type) {\r\n          continue\r\n        }\r\n\r\n        // If event changes its type, use the special event handlers for the changed type\r\n        special = jQuery.event.special[type] || {}\r\n\r\n        // If selector defined, determine special event api type, otherwise given type\r\n        type = (selector ? special.delegateType : special.bindType) || type\r\n\r\n        // Update special based on newly reset type\r\n        special = jQuery.event.special[type] || {}\r\n\r\n        // handleObj is passed to all event handlers\r\n        handleObj = jQuery.extend({\r\n          type,\r\n          origType,\r\n          data,\r\n          handler,\r\n          guid: handler.guid,\r\n          selector,\r\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\r\n          namespace: namespaces.join('.')\r\n        }, handleObjIn)\r\n\r\n        // Init the event handler queue if we're the first\r\n        if (!(handlers = events[type])) {\r\n          handlers = events[type] = []\r\n          handlers.delegateCount = 0\r\n\r\n          // Only use addEventListener if the special events handler returns false\r\n          if (!special.setup ||\r\n\t\t\t\t\tspecial.setup.call(elem, data, namespaces, eventHandle) === false) {\r\n            if (elem.addEventListener) {\r\n              elem.addEventListener(type, eventHandle)\r\n            }\r\n          }\r\n        }\r\n\r\n        if (special.add) {\r\n          special.add.call(elem, handleObj)\r\n\r\n          if (!handleObj.handler.guid) {\r\n            handleObj.handler.guid = handler.guid\r\n          }\r\n        }\r\n\r\n        // Add to the element's handler list, delegates in front\r\n        if (selector) {\r\n          handlers.splice(handlers.delegateCount++, 0, handleObj)\r\n        } else {\r\n          handlers.push(handleObj)\r\n        }\r\n\r\n        // Keep track of which events have ever been used, for event optimization\r\n        jQuery.event.global[type] = true\r\n      }\r\n    },\r\n\r\n    // Detach an event or set of events from an element\r\n    remove: function (elem, types, handler, selector, mappedTypes) {\r\n      let j; let origCount; let tmp\r\n      let events; let t; let handleObj\r\n      let special; let handlers; let type; let namespaces; let origType\r\n      const elemData = dataPriv.hasData(elem) && dataPriv.get(elem)\r\n\r\n      if (!elemData || !(events = elemData.events)) {\r\n        return\r\n      }\r\n\r\n      // Once for each type.namespace in types; type may be omitted\r\n      types = (types || '').match(rnothtmlwhite) || ['']\r\n      t = types.length\r\n      while (t--) {\r\n        tmp = rtypenamespace.exec(types[t]) || []\r\n        type = origType = tmp[1]\r\n        namespaces = (tmp[2] || '').split('.').sort()\r\n\r\n        // Unbind all events (on this namespace, if provided) for the element\r\n        if (!type) {\r\n          for (type in events) {\r\n            jQuery.event.remove(elem, type + types[t], handler, selector, true)\r\n          }\r\n          continue\r\n        }\r\n\r\n        special = jQuery.event.special[type] || {}\r\n        type = (selector ? special.delegateType : special.bindType) || type\r\n        handlers = events[type] || []\r\n        tmp = tmp[2] &&\r\n\t\t\t\tnew RegExp('(^|\\\\.)' + namespaces.join('\\\\.(?:.*\\\\.|)') + '(\\\\.|$)')\r\n\r\n        // Remove matching events\r\n        origCount = j = handlers.length\r\n        while (j--) {\r\n          handleObj = handlers[j]\r\n\r\n          if ((mappedTypes || origType === handleObj.origType) &&\r\n\t\t\t\t\t(!handler || handler.guid === handleObj.guid) &&\r\n\t\t\t\t\t(!tmp || tmp.test(handleObj.namespace)) &&\r\n\t\t\t\t\t(!selector || selector === handleObj.selector ||\r\n\t\t\t\t\t\tselector === '**' && handleObj.selector)) {\r\n            handlers.splice(j, 1)\r\n\r\n            if (handleObj.selector) {\r\n              handlers.delegateCount--\r\n            }\r\n            if (special.remove) {\r\n              special.remove.call(elem, handleObj)\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove generic event handler if we removed something and no more handlers exist\r\n        // (avoids potential for endless recursion during removal of special event handlers)\r\n        if (origCount && !handlers.length) {\r\n          if (!special.teardown ||\r\n\t\t\t\t\tspecial.teardown.call(elem, namespaces, elemData.handle) === false) {\r\n            jQuery.removeEvent(elem, type, elemData.handle)\r\n          }\r\n\r\n          delete events[type]\r\n        }\r\n      }\r\n\r\n      // Remove data and the expando if it's no longer used\r\n      if (jQuery.isEmptyObject(events)) {\r\n        dataPriv.remove(elem, 'handle events')\r\n      }\r\n    },\r\n\r\n    dispatch: function (nativeEvent) {\r\n      let i; let j; let ret; let matched; let handleObj; let handlerQueue\r\n      const args = new Array(arguments.length)\r\n\r\n      // Make a writable jQuery.Event from the native event object\r\n      const event = jQuery.event.fix(nativeEvent)\r\n\r\n      const handlers = (\r\n        dataPriv.get(this, 'events') || Object.create(null)\r\n      )[event.type] || []\r\n      const special = jQuery.event.special[event.type] || {}\r\n\r\n      // Use the fix-ed jQuery.Event rather than the (read-only) native event\r\n      args[0] = event\r\n\r\n      for (i = 1; i < arguments.length; i++) {\r\n        args[i] = arguments[i]\r\n      }\r\n\r\n      event.delegateTarget = this\r\n\r\n      // Call the preDispatch hook for the mapped type, and let it bail if desired\r\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\r\n        return\r\n      }\r\n\r\n      // Determine handlers\r\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers)\r\n\r\n      // Run delegates first; they may want to stop propagation beneath us\r\n      i = 0\r\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\r\n        event.currentTarget = matched.elem\r\n\r\n        j = 0\r\n        while ((handleObj = matched.handlers[j++]) &&\r\n\t\t\t\t!event.isImmediatePropagationStopped()) {\r\n          // If the event is namespaced, then each handler is only invoked if it is\r\n          // specially universal or its namespaces are a superset of the event's.\r\n          if (!event.rnamespace || handleObj.namespace === false ||\r\n\t\t\t\t\tevent.rnamespace.test(handleObj.namespace)) {\r\n            event.handleObj = handleObj\r\n            event.data = handleObj.data\r\n\r\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||\r\n\t\t\t\t\t\thandleObj.handler).apply(matched.elem, args)\r\n\r\n            if (ret !== undefined) {\r\n              if ((event.result = ret) === false) {\r\n                event.preventDefault()\r\n                event.stopPropagation()\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Call the postDispatch hook for the mapped type\r\n      if (special.postDispatch) {\r\n        special.postDispatch.call(this, event)\r\n      }\r\n\r\n      return event.result\r\n    },\r\n\r\n    handlers: function (event, handlers) {\r\n      let i; let handleObj; let sel; let matchedHandlers; let matchedSelectors\r\n      const handlerQueue = []\r\n      const delegateCount = handlers.delegateCount\r\n      let cur = event.target\r\n\r\n      // Find delegate handlers\r\n      if (delegateCount &&\r\n\r\n\t\t\t// Support: IE <=9\r\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\r\n\t\t\tcur.nodeType &&\r\n\r\n\t\t\t// Support: Firefox <=42\r\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\r\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\r\n\t\t\t// Support: IE 11 only\r\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\r\n\t\t\t!(event.type === 'click' && event.button >= 1)) {\r\n        for (; cur !== this; cur = cur.parentNode || this) {\r\n          // Don't check non-elements (trac-13208)\r\n          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\r\n          if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {\r\n            matchedHandlers = []\r\n            matchedSelectors = {}\r\n            for (i = 0; i < delegateCount; i++) {\r\n              handleObj = handlers[i]\r\n\r\n              // Don't conflict with Object.prototype properties (trac-13203)\r\n              sel = handleObj.selector + ' '\r\n\r\n              if (matchedSelectors[sel] === undefined) {\r\n                matchedSelectors[sel] = handleObj.needsContext\r\n                  ? jQuery(sel, this).index(cur) > -1\r\n                  : jQuery.find(sel, this, null, [cur]).length\r\n              }\r\n              if (matchedSelectors[sel]) {\r\n                matchedHandlers.push(handleObj)\r\n              }\r\n            }\r\n            if (matchedHandlers.length) {\r\n              handlerQueue.push({ elem: cur, handlers: matchedHandlers })\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add the remaining (directly-bound) handlers\r\n      cur = this\r\n      if (delegateCount < handlers.length) {\r\n        handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) })\r\n      }\r\n\r\n      return handlerQueue\r\n    },\r\n\r\n    addProp: function (name, hook) {\r\n      Object.defineProperty(jQuery.Event.prototype, name, {\r\n        enumerable: true,\r\n        configurable: true,\r\n\r\n        get: isFunction(hook)\r\n          ? function () {\r\n            if (this.originalEvent) {\r\n              return hook(this.originalEvent)\r\n            }\r\n          }\r\n          : function () {\r\n            if (this.originalEvent) {\r\n              return this.originalEvent[name]\r\n            }\r\n          },\r\n\r\n        set: function (value) {\r\n          Object.defineProperty(this, name, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value\r\n          })\r\n        }\r\n      })\r\n    },\r\n\r\n    fix: function (originalEvent) {\r\n      return originalEvent[jQuery.expando]\r\n        ? originalEvent\r\n        : new jQuery.Event(originalEvent)\r\n    },\r\n\r\n    special: {\r\n      load: {\r\n\r\n        // Prevent triggered image.load events from bubbling to window.load\r\n        noBubble: true\r\n      },\r\n      click: {\r\n\r\n        // Utilize native event to ensure correct state for checkable inputs\r\n        setup: function (data) {\r\n          // For mutual compressibility with _default, replace `this` access with a local var.\r\n          // `|| data` is dead code meant only to preserve the variable through minification.\r\n          const el = this || data\r\n\r\n          // Claim the first handler\r\n          if (rcheckableType.test(el.type) &&\r\n\t\t\t\t\tel.click && nodeName(el, 'input')) {\r\n            // dataPriv.set( el, \"click\", ... )\r\n            leverageNative(el, 'click', true)\r\n          }\r\n\r\n          // Return false to allow normal processing in the caller\r\n          return false\r\n        },\r\n        trigger: function (data) {\r\n          // For mutual compressibility with _default, replace `this` access with a local var.\r\n          // `|| data` is dead code meant only to preserve the variable through minification.\r\n          const el = this || data\r\n\r\n          // Force setup before triggering a click\r\n          if (rcheckableType.test(el.type) &&\r\n\t\t\t\t\tel.click && nodeName(el, 'input')) {\r\n            leverageNative(el, 'click')\r\n          }\r\n\r\n          // Return non-false to allow normal event-path propagation\r\n          return true\r\n        },\r\n\r\n        // For cross-browser consistency, suppress native .click() on links\r\n        // Also prevent it if we're currently inside a leveraged native-event stack\r\n        _default: function (event) {\r\n          const target = event.target\r\n          return rcheckableType.test(target.type) &&\r\n\t\t\t\t\ttarget.click && nodeName(target, 'input') &&\r\n\t\t\t\t\tdataPriv.get(target, 'click') ||\r\n\t\t\t\t\tnodeName(target, 'a')\r\n        }\r\n      },\r\n\r\n      beforeunload: {\r\n        postDispatch: function (event) {\r\n          // Support: Firefox 20+\r\n          // Firefox doesn't alert if the returnValue field is not set.\r\n          if (event.result !== undefined && event.originalEvent) {\r\n            event.originalEvent.returnValue = event.result\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Ensure the presence of an event listener that handles manually-triggered\r\n  // synthetic events by interrupting progress until reinvoked in response to\r\n  // *native* events that it fires directly, ensuring that state changes have\r\n  // already occurred before other listeners are invoked.\r\n  function leverageNative (el, type, isSetup) {\r\n    // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\r\n    if (!isSetup) {\r\n      if (dataPriv.get(el, type) === undefined) {\r\n        jQuery.event.add(el, type, returnTrue)\r\n      }\r\n      return\r\n    }\r\n\r\n    // Register the controller as a special universal handler for all event namespaces\r\n    dataPriv.set(el, type, false)\r\n    jQuery.event.add(el, type, {\r\n      namespace: false,\r\n      handler: function (event) {\r\n        let result\r\n        let saved = dataPriv.get(this, type)\r\n\r\n        if ((event.isTrigger & 1) && this[type]) {\r\n          // Interrupt processing of the outer synthetic .trigger()ed event\r\n          if (!saved) {\r\n            // Store arguments for use when handling the inner native event\r\n            // There will always be at least one argument (an event object), so this array\r\n            // will not be confused with a leftover capture object.\r\n            saved = slice.call(arguments)\r\n            dataPriv.set(this, type, saved)\r\n\r\n            // Trigger the native event and capture its result\r\n            this[type]()\r\n            result = dataPriv.get(this, type)\r\n            dataPriv.set(this, type, false)\r\n\r\n            if (saved !== result) {\r\n              // Cancel the outer synthetic event\r\n              event.stopImmediatePropagation()\r\n              event.preventDefault()\r\n\r\n              return result\r\n            }\r\n\r\n            // If this is an inner synthetic event for an event with a bubbling surrogate\r\n            // (focus or blur), assume that the surrogate already propagated from triggering\r\n            // the native event and prevent that from happening again here.\r\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\r\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\r\n            // less bad than duplication.\r\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\r\n            event.stopPropagation()\r\n          }\r\n\r\n          // If this is a native event triggered above, everything is now in order\r\n          // Fire an inner synthetic event with the original arguments\r\n        } else if (saved) {\r\n          // ...and capture the result\r\n          dataPriv.set(this, type, jQuery.event.trigger(\r\n            saved[0],\r\n            saved.slice(1),\r\n            this\r\n          ))\r\n\r\n          // Abort handling of the native event by all jQuery handlers while allowing\r\n          // native handlers on the same element to run. On target, this is achieved\r\n          // by stopping immediate propagation just on the jQuery event. However,\r\n          // the native event is re-wrapped by a jQuery one on each level of the\r\n          // propagation so the only way to stop it for jQuery is to stop it for\r\n          // everyone via native `stopPropagation()`. This is not a problem for\r\n          // focus/blur which don't bubble, but it does also stop click on checkboxes\r\n          // and radios. We accept this limitation.\r\n          event.stopPropagation()\r\n          event.isImmediatePropagationStopped = returnTrue\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  jQuery.removeEvent = function (elem, type, handle) {\r\n    // This \"if\" is needed for plain objects\r\n    if (elem.removeEventListener) {\r\n      elem.removeEventListener(type, handle)\r\n    }\r\n  }\r\n\r\n  jQuery.Event = function (src, props) {\r\n    // Allow instantiation without the 'new' keyword\r\n    if (!(this instanceof jQuery.Event)) {\r\n      return new jQuery.Event(src, props)\r\n    }\r\n\r\n    // Event object\r\n    if (src && src.type) {\r\n      this.originalEvent = src\r\n      this.type = src.type\r\n\r\n      // Events bubbling up the document may have been marked as prevented\r\n      // by a handler lower down the tree; reflect the correct value.\r\n      this.isDefaultPrevented = src.defaultPrevented ||\r\n\t\t\t\tsrc.defaultPrevented === undefined &&\r\n\r\n\t\t\t\t// Support: Android <=2.3 only\r\n\t\t\t\tsrc.returnValue === false\r\n        ? returnTrue\r\n        : returnFalse\r\n\r\n      // Create target properties\r\n      // Support: Safari <=6 - 7 only\r\n      // Target should not be a text node (trac-504, trac-13143)\r\n      this.target = (src.target && src.target.nodeType === 3)\r\n        ? src.target.parentNode\r\n        : src.target\r\n\r\n      this.currentTarget = src.currentTarget\r\n      this.relatedTarget = src.relatedTarget\r\n\r\n      // Event type\r\n    } else {\r\n      this.type = src\r\n    }\r\n\r\n    // Put explicitly provided properties onto the event object\r\n    if (props) {\r\n      jQuery.extend(this, props)\r\n    }\r\n\r\n    // Create a timestamp if incoming event doesn't have one\r\n    this.timeStamp = src && src.timeStamp || Date.now()\r\n\r\n    // Mark it as fixed\r\n    this[jQuery.expando] = true\r\n  }\r\n\r\n  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\r\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\r\n  jQuery.Event.prototype = {\r\n    constructor: jQuery.Event,\r\n    isDefaultPrevented: returnFalse,\r\n    isPropagationStopped: returnFalse,\r\n    isImmediatePropagationStopped: returnFalse,\r\n    isSimulated: false,\r\n\r\n    preventDefault: function () {\r\n      const e = this.originalEvent\r\n\r\n      this.isDefaultPrevented = returnTrue\r\n\r\n      if (e && !this.isSimulated) {\r\n        e.preventDefault()\r\n      }\r\n    },\r\n    stopPropagation: function () {\r\n      const e = this.originalEvent\r\n\r\n      this.isPropagationStopped = returnTrue\r\n\r\n      if (e && !this.isSimulated) {\r\n        e.stopPropagation()\r\n      }\r\n    },\r\n    stopImmediatePropagation: function () {\r\n      const e = this.originalEvent\r\n\r\n      this.isImmediatePropagationStopped = returnTrue\r\n\r\n      if (e && !this.isSimulated) {\r\n        e.stopImmediatePropagation()\r\n      }\r\n\r\n      this.stopPropagation()\r\n    }\r\n  }\r\n\r\n  // Includes all common event props including KeyEvent and MouseEvent specific props\r\n  jQuery.each({\r\n    altKey: true,\r\n    bubbles: true,\r\n    cancelable: true,\r\n    changedTouches: true,\r\n    ctrlKey: true,\r\n    detail: true,\r\n    eventPhase: true,\r\n    metaKey: true,\r\n    pageX: true,\r\n    pageY: true,\r\n    shiftKey: true,\r\n    view: true,\r\n    char: true,\r\n    code: true,\r\n    charCode: true,\r\n    key: true,\r\n    keyCode: true,\r\n    button: true,\r\n    buttons: true,\r\n    clientX: true,\r\n    clientY: true,\r\n    offsetX: true,\r\n    offsetY: true,\r\n    pointerId: true,\r\n    pointerType: true,\r\n    screenX: true,\r\n    screenY: true,\r\n    targetTouches: true,\r\n    toElement: true,\r\n    touches: true,\r\n    which: true\r\n  }, jQuery.event.addProp)\r\n\r\n  jQuery.each({ focus: 'focusin', blur: 'focusout' }, function (type, delegateType) {\r\n    function focusMappedHandler (nativeEvent) {\r\n      if (document.documentMode) {\r\n        // Support: IE 11+\r\n        // Attach a single focusin/focusout handler on the document while someone wants\r\n        // focus/blur. This is because the former are synchronous in IE while the latter\r\n        // are async. In other browsers, all those handlers are invoked synchronously.\r\n\r\n        // `handle` from private data would already wrap the event, but we need\r\n        // to change the `type` here.\r\n        const handle = dataPriv.get(this, 'handle')\r\n        const event = jQuery.event.fix(nativeEvent)\r\n        event.type = nativeEvent.type === 'focusin' ? 'focus' : 'blur'\r\n        event.isSimulated = true\r\n\r\n        // First, handle focusin/focusout\r\n        handle(nativeEvent)\r\n\r\n        // ...then, handle focus/blur\r\n        //\r\n        // focus/blur don't bubble while focusin/focusout do; simulate the former by only\r\n        // invoking the handler at the lower level.\r\n        if (event.target === event.currentTarget) {\r\n          // The setup part calls `leverageNative`, which, in turn, calls\r\n          // `jQuery.event.add`, so event handle will already have been set\r\n          // by this point.\r\n          handle(event)\r\n        }\r\n      } else {\r\n        // For non-IE browsers, attach a single capturing handler on the document\r\n        // while someone wants focusin/focusout.\r\n        jQuery.event.simulate(delegateType, nativeEvent.target,\r\n          jQuery.event.fix(nativeEvent))\r\n      }\r\n    }\r\n\r\n    jQuery.event.special[type] = {\r\n\r\n      // Utilize native event if possible so blur/focus sequence is correct\r\n      setup: function () {\r\n        let attaches\r\n\r\n        // Claim the first handler\r\n        // dataPriv.set( this, \"focus\", ... )\r\n        // dataPriv.set( this, \"blur\", ... )\r\n        leverageNative(this, type, true)\r\n\r\n        if (document.documentMode) {\r\n          // Support: IE 9 - 11+\r\n          // We use the same native handler for focusin & focus (and focusout & blur)\r\n          // so we need to coordinate setup & teardown parts between those events.\r\n          // Use `delegateType` as the key as `type` is already used by `leverageNative`.\r\n          attaches = dataPriv.get(this, delegateType)\r\n          if (!attaches) {\r\n            this.addEventListener(delegateType, focusMappedHandler)\r\n          }\r\n          dataPriv.set(this, delegateType, (attaches || 0) + 1)\r\n        } else {\r\n          // Return false to allow normal processing in the caller\r\n          return false\r\n        }\r\n      },\r\n      trigger: function () {\r\n        // Force setup before trigger\r\n        leverageNative(this, type)\r\n\r\n        // Return non-false to allow normal event-path propagation\r\n        return true\r\n      },\r\n\r\n      teardown: function () {\r\n        let attaches\r\n\r\n        if (document.documentMode) {\r\n          attaches = dataPriv.get(this, delegateType) - 1\r\n          if (!attaches) {\r\n            this.removeEventListener(delegateType, focusMappedHandler)\r\n            dataPriv.remove(this, delegateType)\r\n          } else {\r\n            dataPriv.set(this, delegateType, attaches)\r\n          }\r\n        } else {\r\n          // Return false to indicate standard teardown should be applied\r\n          return false\r\n        }\r\n      },\r\n\r\n      // Suppress native focus or blur if we're currently inside\r\n      // a leveraged native-event stack\r\n      _default: function (event) {\r\n        return dataPriv.get(event.target, type)\r\n      },\r\n\r\n      delegateType\r\n    }\r\n\r\n    // Support: Firefox <=44\r\n    // Firefox doesn't have focus(in | out) events\r\n    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\r\n    //\r\n    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\r\n    // focus(in | out) events fire after focus & blur events,\r\n    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\r\n    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\r\n    //\r\n    // Support: IE 9 - 11+\r\n    // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\r\n    // attach a single handler for both events in IE.\r\n    jQuery.event.special[delegateType] = {\r\n      setup: function () {\r\n        // Handle: regular nodes (via `this.ownerDocument`), window\r\n        // (via `this.document`) & document (via `this`).\r\n        const doc = this.ownerDocument || this.document || this\r\n        const dataHolder = document.documentMode ? this : doc\r\n        const attaches = dataPriv.get(dataHolder, delegateType)\r\n\r\n        // Support: IE 9 - 11+\r\n        // We use the same native handler for focusin & focus (and focusout & blur)\r\n        // so we need to coordinate setup & teardown parts between those events.\r\n        // Use `delegateType` as the key as `type` is already used by `leverageNative`.\r\n        if (!attaches) {\r\n          if (document.documentMode) {\r\n            this.addEventListener(delegateType, focusMappedHandler)\r\n          } else {\r\n            doc.addEventListener(type, focusMappedHandler, true)\r\n          }\r\n        }\r\n        dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1)\r\n      },\r\n      teardown: function () {\r\n        const doc = this.ownerDocument || this.document || this\r\n        const dataHolder = document.documentMode ? this : doc\r\n        const attaches = dataPriv.get(dataHolder, delegateType) - 1\r\n\r\n        if (!attaches) {\r\n          if (document.documentMode) {\r\n            this.removeEventListener(delegateType, focusMappedHandler)\r\n          } else {\r\n            doc.removeEventListener(type, focusMappedHandler, true)\r\n          }\r\n          dataPriv.remove(dataHolder, delegateType)\r\n        } else {\r\n          dataPriv.set(dataHolder, delegateType, attaches)\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  // Create mouseenter/leave events using mouseover/out and event-time checks\r\n  // so that event delegation works in jQuery.\r\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\r\n  //\r\n  // Support: Safari 7 only\r\n  // Safari sends mouseenter too often; see:\r\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\r\n  // for the description of the bug (it existed in older Chrome versions as well).\r\n  jQuery.each({\r\n    mouseenter: 'mouseover',\r\n    mouseleave: 'mouseout',\r\n    pointerenter: 'pointerover',\r\n    pointerleave: 'pointerout'\r\n  }, function (orig, fix) {\r\n    jQuery.event.special[orig] = {\r\n      delegateType: fix,\r\n      bindType: fix,\r\n\r\n      handle: function (event) {\r\n        let ret\r\n        const target = this\r\n        const related = event.relatedTarget\r\n        const handleObj = event.handleObj\r\n\r\n        // For mouseenter/leave call the handler if related is outside the target.\r\n        // NB: No relatedTarget if the mouse left/entered the browser window\r\n        if (!related || (related !== target && !jQuery.contains(target, related))) {\r\n          event.type = handleObj.origType\r\n          ret = handleObj.handler.apply(this, arguments)\r\n          event.type = fix\r\n        }\r\n        return ret\r\n      }\r\n    }\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n\r\n    on: function (types, selector, data, fn) {\r\n      return on(this, types, selector, data, fn)\r\n    },\r\n    one: function (types, selector, data, fn) {\r\n      return on(this, types, selector, data, fn, 1)\r\n    },\r\n    off: function (types, selector, fn) {\r\n      let handleObj, type\r\n      if (types && types.preventDefault && types.handleObj) {\r\n        // ( event )  dispatched jQuery.Event\r\n        handleObj = types.handleObj\r\n        jQuery(types.delegateTarget).off(\r\n          handleObj.namespace\r\n            ? handleObj.origType + '.' + handleObj.namespace\r\n            : handleObj.origType,\r\n          handleObj.selector,\r\n          handleObj.handler\r\n        )\r\n        return this\r\n      }\r\n      if (typeof types === 'object') {\r\n        // ( types-object [, selector] )\r\n        for (type in types) {\r\n          this.off(type, selector, types[type])\r\n        }\r\n        return this\r\n      }\r\n      if (selector === false || typeof selector === 'function') {\r\n        // ( types [, fn] )\r\n        fn = selector\r\n        selector = undefined\r\n      }\r\n      if (fn === false) {\r\n        fn = returnFalse\r\n      }\r\n      return this.each(function () {\r\n        jQuery.event.remove(this, types, fn, selector)\r\n      })\r\n    }\r\n  })\r\n\r\n  const\r\n\r\n    // Support: IE <=10 - 11, Edge 12 - 13 only\r\n    // In IE/Edge using regex groups here causes severe slowdowns.\r\n    // See https://connect.microsoft.com/IE/feedback/details/1736512/\r\n    rnoInnerhtml = /<script|<style|<link/i\r\n\r\n  // checked=\"checked\" or checked\r\n  const rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i\r\n\r\n  const rcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g\r\n\r\n  // Prefer a tbody over its parent table for containing new rows\r\n  function manipulationTarget (elem, content) {\r\n    if (nodeName(elem, 'table') &&\r\n\t\tnodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {\r\n      return jQuery(elem).children('tbody')[0] || elem\r\n    }\r\n\r\n    return elem\r\n  }\r\n\r\n  // Replace/restore the type attribute of script elements for safe DOM manipulation\r\n  function disableScript (elem) {\r\n    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type\r\n    return elem\r\n  }\r\n  function restoreScript (elem) {\r\n    if ((elem.type || '').slice(0, 5) === 'true/') {\r\n      elem.type = elem.type.slice(5)\r\n    } else {\r\n      elem.removeAttribute('type')\r\n    }\r\n\r\n    return elem\r\n  }\r\n\r\n  function cloneCopyEvent (src, dest) {\r\n    let i, l, type, pdataOld, udataOld, udataCur, events\r\n\r\n    if (dest.nodeType !== 1) {\r\n      return\r\n    }\r\n\r\n    // 1. Copy private data: events, handlers, etc.\r\n    if (dataPriv.hasData(src)) {\r\n      pdataOld = dataPriv.get(src)\r\n      events = pdataOld.events\r\n\r\n      if (events) {\r\n        dataPriv.remove(dest, 'handle events')\r\n\r\n        for (type in events) {\r\n          for (i = 0, l = events[type].length; i < l; i++) {\r\n            jQuery.event.add(dest, type, events[type][i])\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // 2. Copy user data\r\n    if (dataUser.hasData(src)) {\r\n      udataOld = dataUser.access(src)\r\n      udataCur = jQuery.extend({}, udataOld)\r\n\r\n      dataUser.set(dest, udataCur)\r\n    }\r\n  }\r\n\r\n  // Fix IE bugs, see support tests\r\n  function fixInput (src, dest) {\r\n    const nodeName = dest.nodeName.toLowerCase()\r\n\r\n    // Fails to persist the checked state of a cloned checkbox or radio button.\r\n    if (nodeName === 'input' && rcheckableType.test(src.type)) {\r\n      dest.checked = src.checked\r\n\r\n      // Fails to return the selected option to the default selected state when cloning options\r\n    } else if (nodeName === 'input' || nodeName === 'textarea') {\r\n      dest.defaultValue = src.defaultValue\r\n    }\r\n  }\r\n\r\n  function domManip (collection, args, callback, ignored) {\r\n    // Flatten any nested arrays\r\n    args = flat(args)\r\n\r\n    let fragment; let first; let scripts; let hasScripts; let node; let doc\r\n    let i = 0\r\n    const l = collection.length\r\n    const iNoClone = l - 1\r\n    const value = args[0]\r\n    const valueIsFunction = isFunction(value)\r\n\r\n    // We can't cloneNode fragments that contain checked, in WebKit\r\n    if (valueIsFunction ||\r\n\t\t\t(l > 1 && typeof value === 'string' &&\r\n\t\t\t\t!support.checkClone && rchecked.test(value))) {\r\n      return collection.each(function (index) {\r\n        const self = collection.eq(index)\r\n        if (valueIsFunction) {\r\n          args[0] = value.call(this, index, self.html())\r\n        }\r\n        domManip(self, args, callback, ignored)\r\n      })\r\n    }\r\n\r\n    if (l) {\r\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored)\r\n      first = fragment.firstChild\r\n\r\n      if (fragment.childNodes.length === 1) {\r\n        fragment = first\r\n      }\r\n\r\n      // Require either new content or an interest in ignored elements to invoke the callback\r\n      if (first || ignored) {\r\n        scripts = jQuery.map(getAll(fragment, 'script'), disableScript)\r\n        hasScripts = scripts.length\r\n\r\n        // Use the original fragment for the last item\r\n        // instead of the first because it can end up\r\n        // being emptied incorrectly in certain situations (trac-8070).\r\n        for (; i < l; i++) {\r\n          node = fragment\r\n\r\n          if (i !== iNoClone) {\r\n            node = jQuery.clone(node, true, true)\r\n\r\n            // Keep references to cloned scripts for later restoration\r\n            if (hasScripts) {\r\n              // Support: Android <=4.0 only, PhantomJS 1 only\r\n              // push.apply(_, arraylike) throws on ancient WebKit\r\n              jQuery.merge(scripts, getAll(node, 'script'))\r\n            }\r\n          }\r\n\r\n          callback.call(collection[i], node, i)\r\n        }\r\n\r\n        if (hasScripts) {\r\n          doc = scripts[scripts.length - 1].ownerDocument\r\n\r\n          // Reenable scripts\r\n          jQuery.map(scripts, restoreScript)\r\n\r\n          // Evaluate executable scripts on first document insertion\r\n          for (i = 0; i < hasScripts; i++) {\r\n            node = scripts[i]\r\n            if (rscriptType.test(node.type || '') &&\r\n\t\t\t\t\t\t!dataPriv.access(node, 'globalEval') &&\r\n\t\t\t\t\t\tjQuery.contains(doc, node)) {\r\n              if (node.src && (node.type || '').toLowerCase() !== 'module') {\r\n                // Optional AJAX dependency, but won't run scripts if not present\r\n                if (jQuery._evalUrl && !node.noModule) {\r\n                  jQuery._evalUrl(node.src, {\r\n                    nonce: node.nonce || node.getAttribute('nonce')\r\n                  }, doc)\r\n                }\r\n              } else {\r\n                // Unwrap a CDATA section containing script contents. This shouldn't be\r\n                // needed as in XML documents they're already not visible when\r\n                // inspecting element contents and in HTML documents they have no\r\n                // meaning but we're preserving that logic for backwards compatibility.\r\n                // This will be removed completely in 4.0. See gh-4904.\r\n                DOMEval(node.textContent.replace(rcleanScript, ''), node, doc)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return collection\r\n  }\r\n\r\n  function remove (elem, selector, keepData) {\r\n    let node\r\n    const nodes = selector ? jQuery.filter(selector, elem) : elem\r\n    let i = 0\r\n\r\n    for (; (node = nodes[i]) != null; i++) {\r\n      if (!keepData && node.nodeType === 1) {\r\n        jQuery.cleanData(getAll(node))\r\n      }\r\n\r\n      if (node.parentNode) {\r\n        if (keepData && isAttached(node)) {\r\n          setGlobalEval(getAll(node, 'script'))\r\n        }\r\n        node.parentNode.removeChild(node)\r\n      }\r\n    }\r\n\r\n    return elem\r\n  }\r\n\r\n  jQuery.extend({\r\n    htmlPrefilter: function (html) {\r\n      return html\r\n    },\r\n\r\n    clone: function (elem, dataAndEvents, deepDataAndEvents) {\r\n      let i; let l; let srcElements; let destElements\r\n      const clone = elem.cloneNode(true)\r\n      const inPage = isAttached(elem)\r\n\r\n      // Fix IE cloning issues\r\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&\r\n\t\t\t\t!jQuery.isXMLDoc(elem)) {\r\n        // We eschew jQuery#find here for performance reasons:\r\n        // https://jsperf.com/getall-vs-sizzle/2\r\n        destElements = getAll(clone)\r\n        srcElements = getAll(elem)\r\n\r\n        for (i = 0, l = srcElements.length; i < l; i++) {\r\n          fixInput(srcElements[i], destElements[i])\r\n        }\r\n      }\r\n\r\n      // Copy the events from the original to the clone\r\n      if (dataAndEvents) {\r\n        if (deepDataAndEvents) {\r\n          srcElements = srcElements || getAll(elem)\r\n          destElements = destElements || getAll(clone)\r\n\r\n          for (i = 0, l = srcElements.length; i < l; i++) {\r\n            cloneCopyEvent(srcElements[i], destElements[i])\r\n          }\r\n        } else {\r\n          cloneCopyEvent(elem, clone)\r\n        }\r\n      }\r\n\r\n      // Preserve script evaluation history\r\n      destElements = getAll(clone, 'script')\r\n      if (destElements.length > 0) {\r\n        setGlobalEval(destElements, !inPage && getAll(elem, 'script'))\r\n      }\r\n\r\n      // Return the cloned set\r\n      return clone\r\n    },\r\n\r\n    cleanData: function (elems) {\r\n      let data; let elem; let type\r\n      const special = jQuery.event.special\r\n      let i = 0\r\n\r\n      for (; (elem = elems[i]) !== undefined; i++) {\r\n        if (acceptData(elem)) {\r\n          if ((data = elem[dataPriv.expando])) {\r\n            if (data.events) {\r\n              for (type in data.events) {\r\n                if (special[type]) {\r\n                  jQuery.event.remove(elem, type)\r\n\r\n                  // This is a shortcut to avoid jQuery.event.remove's overhead\r\n                } else {\r\n                  jQuery.removeEvent(elem, type, data.handle)\r\n                }\r\n              }\r\n            }\r\n\r\n            // Support: Chrome <=35 - 45+\r\n            // Assign undefined instead of using delete, see Data#remove\r\n            elem[dataPriv.expando] = undefined\r\n          }\r\n          if (elem[dataUser.expando]) {\r\n            // Support: Chrome <=35 - 45+\r\n            // Assign undefined instead of using delete, see Data#remove\r\n            elem[dataUser.expando] = undefined\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n    detach: function (selector) {\r\n      return remove(this, selector, true)\r\n    },\r\n\r\n    remove: function (selector) {\r\n      return remove(this, selector)\r\n    },\r\n\r\n    text: function (value) {\r\n      return access(this, function (value) {\r\n        return value === undefined\r\n          ? jQuery.text(this)\r\n          : this.empty().each(function () {\r\n            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\r\n              this.textContent = value\r\n            }\r\n          })\r\n      }, null, value, arguments.length)\r\n    },\r\n\r\n    append: function () {\r\n      return domManip(this, arguments, function (elem) {\r\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\r\n          const target = manipulationTarget(this, elem)\r\n          target.appendChild(elem)\r\n        }\r\n      })\r\n    },\r\n\r\n    prepend: function () {\r\n      return domManip(this, arguments, function (elem) {\r\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\r\n          const target = manipulationTarget(this, elem)\r\n          target.insertBefore(elem, target.firstChild)\r\n        }\r\n      })\r\n    },\r\n\r\n    before: function () {\r\n      return domManip(this, arguments, function (elem) {\r\n        if (this.parentNode) {\r\n          this.parentNode.insertBefore(elem, this)\r\n        }\r\n      })\r\n    },\r\n\r\n    after: function () {\r\n      return domManip(this, arguments, function (elem) {\r\n        if (this.parentNode) {\r\n          this.parentNode.insertBefore(elem, this.nextSibling)\r\n        }\r\n      })\r\n    },\r\n\r\n    empty: function () {\r\n      let elem\r\n      let i = 0\r\n\r\n      for (; (elem = this[i]) != null; i++) {\r\n        if (elem.nodeType === 1) {\r\n          // Prevent memory leaks\r\n          jQuery.cleanData(getAll(elem, false))\r\n\r\n          // Remove any remaining nodes\r\n          elem.textContent = ''\r\n        }\r\n      }\r\n\r\n      return this\r\n    },\r\n\r\n    clone: function (dataAndEvents, deepDataAndEvents) {\r\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents\r\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents\r\n\r\n      return this.map(function () {\r\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents)\r\n      })\r\n    },\r\n\r\n    html: function (value) {\r\n      return access(this, function (value) {\r\n        let elem = this[0] || {}\r\n        let i = 0\r\n        const l = this.length\r\n\r\n        if (value === undefined && elem.nodeType === 1) {\r\n          return elem.innerHTML\r\n        }\r\n\r\n        // See if we can take a shortcut and just use innerHTML\r\n        if (typeof value === 'string' && !rnoInnerhtml.test(value) &&\r\n\t\t\t\t!wrapMap[(rtagName.exec(value) || ['', ''])[1].toLowerCase()]) {\r\n          value = jQuery.htmlPrefilter(value)\r\n\r\n          try {\r\n            for (; i < l; i++) {\r\n              elem = this[i] || {}\r\n\r\n              // Remove element nodes and prevent memory leaks\r\n              if (elem.nodeType === 1) {\r\n                jQuery.cleanData(getAll(elem, false))\r\n                elem.innerHTML = value\r\n              }\r\n            }\r\n\r\n            elem = 0\r\n\r\n            // If using innerHTML throws an exception, use the fallback method\r\n          } catch (e) {}\r\n        }\r\n\r\n        if (elem) {\r\n          this.empty().append(value)\r\n        }\r\n      }, null, value, arguments.length)\r\n    },\r\n\r\n    replaceWith: function () {\r\n      const ignored = []\r\n\r\n      // Make the changes, replacing each non-ignored context element with the new content\r\n      return domManip(this, arguments, function (elem) {\r\n        const parent = this.parentNode\r\n\r\n        if (jQuery.inArray(this, ignored) < 0) {\r\n          jQuery.cleanData(getAll(this))\r\n          if (parent) {\r\n            parent.replaceChild(elem, this)\r\n          }\r\n        }\r\n\r\n        // Force callback invocation\r\n      }, ignored)\r\n    }\r\n  })\r\n\r\n  jQuery.each({\r\n    appendTo: 'append',\r\n    prependTo: 'prepend',\r\n    insertBefore: 'before',\r\n    insertAfter: 'after',\r\n    replaceAll: 'replaceWith'\r\n  }, function (name, original) {\r\n    jQuery.fn[name] = function (selector) {\r\n      let elems\r\n      const ret = []\r\n      const insert = jQuery(selector)\r\n      const last = insert.length - 1\r\n      let i = 0\r\n\r\n      for (; i <= last; i++) {\r\n        elems = i === last ? this : this.clone(true)\r\n        jQuery(insert[i])[original](elems)\r\n\r\n        // Support: Android <=4.0 only, PhantomJS 1 only\r\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n        push.apply(ret, elems.get())\r\n      }\r\n\r\n      return this.pushStack(ret)\r\n    }\r\n  })\r\n  const rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i')\r\n\r\n  const rcustomProp = /^--/\r\n\r\n  const getStyles = function (elem) {\r\n    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\r\n    // IE throws on elements created in popups\r\n    // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\r\n    let view = elem.ownerDocument.defaultView\r\n\r\n    if (!view || !view.opener) {\r\n      view = window\r\n    }\r\n\r\n    return view.getComputedStyle(elem)\r\n  }\r\n\r\n  const swap = function (elem, options, callback) {\r\n    let ret; let name\r\n    const old = {}\r\n\r\n    // Remember the old values, and insert the new ones\r\n    for (name in options) {\r\n      old[name] = elem.style[name]\r\n      elem.style[name] = options[name]\r\n    }\r\n\r\n    ret = callback.call(elem)\r\n\r\n    // Revert the old values\r\n    for (name in options) {\r\n      elem.style[name] = old[name]\r\n    }\r\n\r\n    return ret\r\n  }\r\n\r\n  const rboxStyle = new RegExp(cssExpand.join('|'), 'i');\r\n\r\n  (function () {\r\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\r\n    // so they're executed at the same time to save the second computation.\r\n    function computeStyleTests () {\r\n      // This is a singleton, we need to execute it only once\r\n      if (!div) {\r\n        return\r\n      }\r\n\r\n      container.style.cssText = 'position:absolute;left:-11111px;width:60px;' +\r\n\t\t\t'margin-top:1px;padding:0;border:0'\r\n      div.style.cssText =\r\n\t\t\t'position:relative;display:block;box-sizing:border-box;overflow:scroll;' +\r\n\t\t\t'margin:auto;border:1px;padding:1px;' +\r\n\t\t\t'width:60%;top:1%'\r\n      documentElement.appendChild(container).appendChild(div)\r\n\r\n      const divStyle = window.getComputedStyle(div)\r\n      pixelPositionVal = divStyle.top !== '1%'\r\n\r\n      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\r\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12\r\n\r\n      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\r\n      // Some styles come back with percentage values, even though they shouldn't\r\n      div.style.right = '60%'\r\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36\r\n\r\n      // Support: IE 9 - 11 only\r\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\r\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36\r\n\r\n      // Support: IE 9 only\r\n      // Detect overflow:scroll screwiness (gh-3699)\r\n      // Support: Chrome <=64\r\n      // Don't get tricked when zoom affects offsetWidth (gh-4029)\r\n      div.style.position = 'absolute'\r\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12\r\n\r\n      documentElement.removeChild(container)\r\n\r\n      // Nullify the div so it wouldn't be stored in the memory and\r\n      // it will also be a sign that checks already performed\r\n      div = null\r\n    }\r\n\r\n    function roundPixelMeasures (measure) {\r\n      return Math.round(parseFloat(measure))\r\n    }\r\n\r\n    let pixelPositionVal; let boxSizingReliableVal; let scrollboxSizeVal; let pixelBoxStylesVal\r\n    let reliableTrDimensionsVal; let reliableMarginLeftVal\r\n    var container = document.createElement('div')\r\n    var div = document.createElement('div')\r\n\r\n    // Finish early in limited (non-browser) environments\r\n    if (!div.style) {\r\n      return\r\n    }\r\n\r\n    // Support: IE <=9 - 11 only\r\n    // Style of cloned element affects source element cloned (trac-8908)\r\n    div.style.backgroundClip = 'content-box'\r\n    div.cloneNode(true).style.backgroundClip = ''\r\n    support.clearCloneStyle = div.style.backgroundClip === 'content-box'\r\n\r\n    jQuery.extend(support, {\r\n      boxSizingReliable: function () {\r\n        computeStyleTests()\r\n        return boxSizingReliableVal\r\n      },\r\n      pixelBoxStyles: function () {\r\n        computeStyleTests()\r\n        return pixelBoxStylesVal\r\n      },\r\n      pixelPosition: function () {\r\n        computeStyleTests()\r\n        return pixelPositionVal\r\n      },\r\n      reliableMarginLeft: function () {\r\n        computeStyleTests()\r\n        return reliableMarginLeftVal\r\n      },\r\n      scrollboxSize: function () {\r\n        computeStyleTests()\r\n        return scrollboxSizeVal\r\n      },\r\n\r\n      // Support: IE 9 - 11+, Edge 15 - 18+\r\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\r\n      // set in CSS while `offset*` properties report correct values.\r\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\r\n      // some versions of this test; make sure not to make it pass there!\r\n      //\r\n      // Support: Firefox 70+\r\n      // Only Firefox includes border widths\r\n      // in computed dimensions. (gh-4529)\r\n      reliableTrDimensions: function () {\r\n        let table, tr, trChild, trStyle\r\n        if (reliableTrDimensionsVal == null) {\r\n          table = document.createElement('table')\r\n          tr = document.createElement('tr')\r\n          trChild = document.createElement('div')\r\n\r\n          table.style.cssText = 'position:absolute;left:-11111px;border-collapse:separate'\r\n          tr.style.cssText = 'border:1px solid'\r\n\r\n          // Support: Chrome 86+\r\n          // Height set through cssText does not get applied.\r\n          // Computed height then comes back as 0.\r\n          tr.style.height = '1px'\r\n          trChild.style.height = '9px'\r\n\r\n          // Support: Android 8 Chrome 86+\r\n          // In our bodyBackground.html iframe,\r\n          // display for all div elements is set to \"inline\",\r\n          // which causes a problem only in Android 8 Chrome 86.\r\n          // Ensuring the div is display: block\r\n          // gets around this issue.\r\n          trChild.style.display = 'block'\r\n\r\n          documentElement\r\n            .appendChild(table)\r\n            .appendChild(tr)\r\n            .appendChild(trChild)\r\n\r\n          trStyle = window.getComputedStyle(tr)\r\n          reliableTrDimensionsVal = (parseInt(trStyle.height, 10) +\r\n\t\t\t\t\tparseInt(trStyle.borderTopWidth, 10) +\r\n\t\t\t\t\tparseInt(trStyle.borderBottomWidth, 10)) === tr.offsetHeight\r\n\r\n          documentElement.removeChild(table)\r\n        }\r\n        return reliableTrDimensionsVal\r\n      }\r\n    })\r\n  })()\r\n\r\n  function curCSS (elem, name, computed) {\r\n    let width; let minWidth; let maxWidth; let ret\r\n    const isCustomProp = rcustomProp.test(name)\r\n\r\n    // Support: Firefox 51+\r\n    // Retrieving style before computed somehow\r\n    // fixes an issue with getting wrong values\r\n    // on detached elements\r\n    const style = elem.style\r\n\r\n    computed = computed || getStyles(elem)\r\n\r\n    // getPropertyValue is needed for:\r\n    //   .css('filter') (IE 9 only, trac-12537)\r\n    //   .css('--customProperty) (gh-3144)\r\n    if (computed) {\r\n      // Support: IE <=9 - 11+\r\n      // IE only supports `\"float\"` in `getPropertyValue`; in computed styles\r\n      // it's only available as `\"cssFloat\"`. We no longer modify properties\r\n      // sent to `.css()` apart from camelCasing, so we need to check both.\r\n      // Normally, this would create difference in behavior: if\r\n      // `getPropertyValue` returns an empty string, the value returned\r\n      // by `.css()` would be `undefined`. This is usually the case for\r\n      // disconnected elements. However, in IE even disconnected elements\r\n      // with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\r\n      ret = computed.getPropertyValue(name) || computed[name]\r\n\r\n      if (isCustomProp && ret) {\r\n        // Support: Firefox 105+, Chrome <=105+\r\n        // Spec requires trimming whitespace for custom properties (gh-4926).\r\n        // Firefox only trims leading whitespace. Chrome just collapses\r\n        // both leading & trailing whitespace to a single space.\r\n        //\r\n        // Fall back to `undefined` if empty string returned.\r\n        // This collapses a missing definition with property defined\r\n        // and set to an empty string but there's no standard API\r\n        // allowing us to differentiate them without a performance penalty\r\n        // and returning `undefined` aligns with older jQuery.\r\n        //\r\n        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\r\n        // as whitespace while CSS does not, but this is not a problem\r\n        // because CSS preprocessing replaces them with U+000A LINE FEED\r\n        // (which *is* CSS whitespace)\r\n        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing\r\n        ret = ret.replace(rtrimCSS, '$1') || undefined\r\n      }\r\n\r\n      if (ret === '' && !isAttached(elem)) {\r\n        ret = jQuery.style(elem, name)\r\n      }\r\n\r\n      // A tribute to the \"awesome hack by Dean Edwards\"\r\n      // Android Browser returns percentage for some values,\r\n      // but width seems to be reliably pixels.\r\n      // This is against the CSSOM draft spec:\r\n      // https://drafts.csswg.org/cssom/#resolved-values\r\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\r\n        // Remember the original values\r\n        width = style.width\r\n        minWidth = style.minWidth\r\n        maxWidth = style.maxWidth\r\n\r\n        // Put in the new values to get a computed value out\r\n        style.minWidth = style.maxWidth = style.width = ret\r\n        ret = computed.width\r\n\r\n        // Revert the changed values\r\n        style.width = width\r\n        style.minWidth = minWidth\r\n        style.maxWidth = maxWidth\r\n      }\r\n    }\r\n\r\n    return ret !== undefined\r\n\r\n    // Support: IE <=9 - 11 only\r\n    // IE returns zIndex value as an integer.\r\n      ? ret + ''\r\n      : ret\r\n  }\r\n\r\n  function addGetHookIf (conditionFn, hookFn) {\r\n    // Define the hook, we'll check on the first run if it's really needed.\r\n    return {\r\n      get: function () {\r\n        if (conditionFn()) {\r\n          // Hook not needed (or it's not possible to use it due\r\n          // to missing dependency), remove it.\r\n          delete this.get\r\n          return\r\n        }\r\n\r\n        // Hook needed; redefine it so that the support test is not executed again.\r\n        return (this.get = hookFn).apply(this, arguments)\r\n      }\r\n    }\r\n  }\r\n\r\n  const cssPrefixes = ['Webkit', 'Moz', 'ms']\r\n  const emptyStyle = document.createElement('div').style\r\n  const vendorProps = {}\r\n\r\n  // Return a vendor-prefixed property or undefined\r\n  function vendorPropName (name) {\r\n    // Check for vendor prefixed names\r\n    const capName = name[0].toUpperCase() + name.slice(1)\r\n    let i = cssPrefixes.length\r\n\r\n    while (i--) {\r\n      name = cssPrefixes[i] + capName\r\n      if (name in emptyStyle) {\r\n        return name\r\n      }\r\n    }\r\n  }\r\n\r\n  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\r\n  function finalPropName (name) {\r\n    const final = jQuery.cssProps[name] || vendorProps[name]\r\n\r\n    if (final) {\r\n      return final\r\n    }\r\n    if (name in emptyStyle) {\r\n      return name\r\n    }\r\n    return vendorProps[name] = vendorPropName(name) || name\r\n  }\r\n\r\n  const\r\n\r\n    // Swappable if display is none or starts with table\r\n    // except \"table\", \"table-cell\", or \"table-caption\"\r\n    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\r\n    rdisplayswap = /^(none|table(?!-c[ea]).+)/\r\n  const cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' }\r\n  const cssNormalTransform = {\r\n    letterSpacing: '0',\r\n    fontWeight: '400'\r\n  }\r\n\r\n  function setPositiveNumber (_elem, value, subtract) {\r\n    // Any relative (+/-) values have already been\r\n    // normalized at this point\r\n    const matches = rcssNum.exec(value)\r\n    return matches\r\n\r\n    // Guard against undefined \"subtract\", e.g., when used as in cssHooks\r\n      ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px')\r\n      : value\r\n  }\r\n\r\n  function boxModelAdjustment (elem, dimension, box, isBorderBox, styles, computedVal) {\r\n    let i = dimension === 'width' ? 1 : 0\r\n    let extra = 0\r\n    let delta = 0\r\n    let marginDelta = 0\r\n\r\n    // Adjustment may not be necessary\r\n    if (box === (isBorderBox ? 'border' : 'content')) {\r\n      return 0\r\n    }\r\n\r\n    for (; i < 4; i += 2) {\r\n      // Both box models exclude margin\r\n      // Count margin delta separately to only add it after scroll gutter adjustment.\r\n      // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\r\n      if (box === 'margin') {\r\n        marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles)\r\n      }\r\n\r\n      // If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\r\n      if (!isBorderBox) {\r\n        // Add padding\r\n        delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles)\r\n\r\n        // For \"border\" or \"margin\", add border\r\n        if (box !== 'padding') {\r\n          delta += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)\r\n\r\n          // But still keep track of it otherwise\r\n        } else {\r\n          extra += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)\r\n        }\r\n\r\n        // If we get here with a border-box (content + padding + border), we're seeking \"content\" or\r\n        // \"padding\" or \"margin\"\r\n      } else {\r\n        // For \"content\", subtract padding\r\n        if (box === 'content') {\r\n          delta -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles)\r\n        }\r\n\r\n        // For \"content\" or \"padding\", subtract border\r\n        if (box !== 'margin') {\r\n          delta -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Account for positive content-box scroll gutter when requested by providing computedVal\r\n    if (!isBorderBox && computedVal >= 0) {\r\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\r\n      // Assuming integer scroll gutter, subtract the rest and round down\r\n      delta += Math.max(0, Math.ceil(\r\n        elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] -\r\n\t\t\tcomputedVal -\r\n\t\t\tdelta -\r\n\t\t\textra -\r\n\t\t\t0.5\r\n\r\n        // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\r\n        // Use an explicit zero to avoid NaN (gh-3964)\r\n      )) || 0\r\n    }\r\n\r\n    return delta + marginDelta\r\n  }\r\n\r\n  function getWidthOrHeight (elem, dimension, extra) {\r\n    // Start with computed style\r\n    const styles = getStyles(elem)\r\n\r\n    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\r\n    // Fake content-box until we know it's needed to know the true value.\r\n    const boxSizingNeeded = !support.boxSizingReliable() || extra\r\n    let isBorderBox = boxSizingNeeded &&\r\n\t\t\tjQuery.css(elem, 'boxSizing', false, styles) === 'border-box'\r\n    let valueIsBorderBox = isBorderBox\r\n\r\n    let val = curCSS(elem, dimension, styles)\r\n    const offsetProp = 'offset' + dimension[0].toUpperCase() + dimension.slice(1)\r\n\r\n    // Support: Firefox <=54\r\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\r\n    if (rnumnonpx.test(val)) {\r\n      if (!extra) {\r\n        return val\r\n      }\r\n      val = 'auto'\r\n    }\r\n\r\n    // Support: IE 9 - 11 only\r\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\r\n    // In those cases, the computed value can be trusted to be border-box.\r\n    if ((!support.boxSizingReliable() && isBorderBox ||\r\n\r\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\r\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\r\n\t\t// set in CSS while `offset*` properties report correct values.\r\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\r\n\t\t!support.reliableTrDimensions() && nodeName(elem, 'tr') ||\r\n\r\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\r\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\r\n\t\tval === 'auto' ||\r\n\r\n\t\t// Support: Android <=4.1 - 4.3 only\r\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\r\n\t\t!parseFloat(val) && jQuery.css(elem, 'display', false, styles) === 'inline') &&\r\n\r\n\t\t// Make sure the element is visible & connected\r\n\t\telem.getClientRects().length) {\r\n      isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box'\r\n\r\n      // Where available, offsetWidth/offsetHeight approximate border box dimensions.\r\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\r\n      // retrieved value as a content box dimension.\r\n      valueIsBorderBox = offsetProp in elem\r\n      if (valueIsBorderBox) {\r\n        val = elem[offsetProp]\r\n      }\r\n    }\r\n\r\n    // Normalize \"\" and auto\r\n    val = parseFloat(val) || 0\r\n\r\n    // Adjust for the element's box model\r\n    return (val +\r\n\t\tboxModelAdjustment(\r\n\t\t  elem,\r\n\t\t  dimension,\r\n\t\t  extra || (isBorderBox ? 'border' : 'content'),\r\n\t\t  valueIsBorderBox,\r\n\t\t  styles,\r\n\r\n\t\t  // Provide the current computed size to request scroll gutter calculation (gh-3589)\r\n\t\t  val\r\n\t\t)\r\n    ) + 'px'\r\n  }\r\n\r\n  jQuery.extend({\r\n\r\n    // Add in style property hooks for overriding the default\r\n    // behavior of getting and setting a style property\r\n    cssHooks: {\r\n      opacity: {\r\n        get: function (elem, computed) {\r\n          if (computed) {\r\n            // We should always get a number back from opacity\r\n            const ret = curCSS(elem, 'opacity')\r\n            return ret === '' ? '1' : ret\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    // Don't automatically add \"px\" to these possibly-unitless properties\r\n    cssNumber: {\r\n      animationIterationCount: true,\r\n      aspectRatio: true,\r\n      borderImageSlice: true,\r\n      columnCount: true,\r\n      flexGrow: true,\r\n      flexShrink: true,\r\n      fontWeight: true,\r\n      gridArea: true,\r\n      gridColumn: true,\r\n      gridColumnEnd: true,\r\n      gridColumnStart: true,\r\n      gridRow: true,\r\n      gridRowEnd: true,\r\n      gridRowStart: true,\r\n      lineHeight: true,\r\n      opacity: true,\r\n      order: true,\r\n      orphans: true,\r\n      scale: true,\r\n      widows: true,\r\n      zIndex: true,\r\n      zoom: true,\r\n\r\n      // SVG-related\r\n      fillOpacity: true,\r\n      floodOpacity: true,\r\n      stopOpacity: true,\r\n      strokeMiterlimit: true,\r\n      strokeOpacity: true\r\n    },\r\n\r\n    // Add in properties whose names you wish to fix before\r\n    // setting or getting the value\r\n    cssProps: {},\r\n\r\n    // Get and set the style property on a DOM Node\r\n    style: function (elem, name, value, extra) {\r\n      // Don't set styles on text and comment nodes\r\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\r\n        return\r\n      }\r\n\r\n      // Make sure that we're working with the right name\r\n      let ret; let type; let hooks\r\n      const origName = camelCase(name)\r\n      const isCustomProp = rcustomProp.test(name)\r\n      const style = elem.style\r\n\r\n      // Make sure that we're working with the right name. We don't\r\n      // want to query the value if it is a CSS custom property\r\n      // since they are user-defined.\r\n      if (!isCustomProp) {\r\n        name = finalPropName(origName)\r\n      }\r\n\r\n      // Gets hook for the prefixed version, then unprefixed version\r\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]\r\n\r\n      // Check if we're setting a value\r\n      if (value !== undefined) {\r\n        type = typeof value\r\n\r\n        // Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\r\n        if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {\r\n          value = adjustCSS(elem, name, ret)\r\n\r\n          // Fixes bug trac-9237\r\n          type = 'number'\r\n        }\r\n\r\n        // Make sure that null and NaN values aren't set (trac-7116)\r\n        if (value == null || value !== value) {\r\n          return\r\n        }\r\n\r\n        // If a number was passed in, add the unit (except for certain CSS properties)\r\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\r\n        // \"px\" to a few hardcoded values.\r\n        if (type === 'number' && !isCustomProp) {\r\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px')\r\n        }\r\n\r\n        // background-* props affect original clone's values\r\n        if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {\r\n          style[name] = 'inherit'\r\n        }\r\n\r\n        // If a hook was provided, use that value, otherwise just set the specified value\r\n        if (!hooks || !('set' in hooks) ||\r\n\t\t\t\t(value = hooks.set(elem, value, extra)) !== undefined) {\r\n          if (isCustomProp) {\r\n            style.setProperty(name, value)\r\n          } else {\r\n            style[name] = value\r\n          }\r\n        }\r\n      } else {\r\n        // If a hook was provided get the non-computed value from there\r\n        if (hooks && 'get' in hooks &&\r\n\t\t\t\t(ret = hooks.get(elem, false, extra)) !== undefined) {\r\n          return ret\r\n        }\r\n\r\n        // Otherwise just get the value from the style object\r\n        return style[name]\r\n      }\r\n    },\r\n\r\n    css: function (elem, name, extra, styles) {\r\n      let val; let num; let hooks\r\n      const origName = camelCase(name)\r\n      const isCustomProp = rcustomProp.test(name)\r\n\r\n      // Make sure that we're working with the right name. We don't\r\n      // want to modify the value if it is a CSS custom property\r\n      // since they are user-defined.\r\n      if (!isCustomProp) {\r\n        name = finalPropName(origName)\r\n      }\r\n\r\n      // Try prefixed name followed by the unprefixed name\r\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]\r\n\r\n      // If a hook was provided get the computed value from there\r\n      if (hooks && 'get' in hooks) {\r\n        val = hooks.get(elem, true, extra)\r\n      }\r\n\r\n      // Otherwise, if a way to get the computed value exists, use that\r\n      if (val === undefined) {\r\n        val = curCSS(elem, name, styles)\r\n      }\r\n\r\n      // Convert \"normal\" to computed value\r\n      if (val === 'normal' && name in cssNormalTransform) {\r\n        val = cssNormalTransform[name]\r\n      }\r\n\r\n      // Make numeric if forced or a qualifier was provided and val looks numeric\r\n      if (extra === '' || extra) {\r\n        num = parseFloat(val)\r\n        return extra === true || isFinite(num) ? num || 0 : val\r\n      }\r\n\r\n      return val\r\n    }\r\n  })\r\n\r\n  jQuery.each(['height', 'width'], function (_i, dimension) {\r\n    jQuery.cssHooks[dimension] = {\r\n      get: function (elem, computed, extra) {\r\n        if (computed) {\r\n          // Certain elements can have dimension info if we invisibly show them\r\n          // but it must have a current display style that would benefit\r\n          return rdisplayswap.test(jQuery.css(elem, 'display')) &&\r\n\r\n\t\t\t\t\t// Support: Safari 8+\r\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\r\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\r\n\t\t\t\t\t// Support: IE <=11 only\r\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\r\n\t\t\t\t\t// in IE throws an error.\r\n\t\t\t\t\t(!elem.getClientRects().length || !elem.getBoundingClientRect().width)\r\n            ? swap(elem, cssShow, function () {\r\n              return getWidthOrHeight(elem, dimension, extra)\r\n            })\r\n            : getWidthOrHeight(elem, dimension, extra)\r\n        }\r\n      },\r\n\r\n      set: function (elem, value, extra) {\r\n        let matches\r\n        const styles = getStyles(elem)\r\n\r\n        // Only read styles.position if the test has a chance to fail\r\n        // to avoid forcing a reflow.\r\n        const scrollboxSizeBuggy = !support.scrollboxSize() &&\r\n\t\t\t\t\tstyles.position === 'absolute'\r\n\r\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\r\n        const boxSizingNeeded = scrollboxSizeBuggy || extra\r\n        const isBorderBox = boxSizingNeeded &&\r\n\t\t\t\t\tjQuery.css(elem, 'boxSizing', false, styles) === 'border-box'\r\n        let subtract = extra\r\n          ? boxModelAdjustment(\r\n            elem,\r\n            dimension,\r\n            extra,\r\n            isBorderBox,\r\n            styles\r\n          )\r\n          : 0\r\n\r\n        // Account for unreliable border-box dimensions by comparing offset* to computed and\r\n        // faking a content-box to get border and padding (gh-3699)\r\n        if (isBorderBox && scrollboxSizeBuggy) {\r\n          subtract -= Math.ceil(\r\n            elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] -\r\n\t\t\t\t\tparseFloat(styles[dimension]) -\r\n\t\t\t\t\tboxModelAdjustment(elem, dimension, 'border', false, styles) -\r\n\t\t\t\t\t0.5\r\n          )\r\n        }\r\n\r\n        // Convert to pixels if value adjustment is needed\r\n        if (subtract && (matches = rcssNum.exec(value)) &&\r\n\t\t\t\t(matches[3] || 'px') !== 'px') {\r\n          elem.style[dimension] = value\r\n          value = jQuery.css(elem, dimension)\r\n        }\r\n\r\n        return setPositiveNumber(elem, value, subtract)\r\n      }\r\n    }\r\n  })\r\n\r\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,\r\n    function (elem, computed) {\r\n      if (computed) {\r\n        return (parseFloat(curCSS(elem, 'marginLeft')) ||\r\n\t\t\t\telem.getBoundingClientRect().left -\r\n\t\t\t\t\tswap(elem, { marginLeft: 0 }, function () {\r\n\t\t\t\t\t  return elem.getBoundingClientRect().left\r\n\t\t\t\t\t})\r\n        ) + 'px'\r\n      }\r\n    }\r\n  )\r\n\r\n  // These hooks are used by animate to expand properties\r\n  jQuery.each({\r\n    margin: '',\r\n    padding: '',\r\n    border: 'Width'\r\n  }, function (prefix, suffix) {\r\n    jQuery.cssHooks[prefix + suffix] = {\r\n      expand: function (value) {\r\n        let i = 0\r\n        const expanded = {}\r\n\r\n        // Assumes a single number if not a string\r\n        const parts = typeof value === 'string' ? value.split(' ') : [value]\r\n\r\n        for (; i < 4; i++) {\r\n          expanded[prefix + cssExpand[i] + suffix] =\r\n\t\t\t\t\tparts[i] || parts[i - 2] || parts[0]\r\n        }\r\n\r\n        return expanded\r\n      }\r\n    }\r\n\r\n    if (prefix !== 'margin') {\r\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber\r\n    }\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n    css: function (name, value) {\r\n      return access(this, function (elem, name, value) {\r\n        let styles; let len\r\n        const map = {}\r\n        let i = 0\r\n\r\n        if (Array.isArray(name)) {\r\n          styles = getStyles(elem)\r\n          len = name.length\r\n\r\n          for (; i < len; i++) {\r\n            map[name[i]] = jQuery.css(elem, name[i], false, styles)\r\n          }\r\n\r\n          return map\r\n        }\r\n\r\n        return value !== undefined\r\n          ? jQuery.style(elem, name, value)\r\n          : jQuery.css(elem, name)\r\n      }, name, value, arguments.length > 1)\r\n    }\r\n  })\r\n\r\n  function Tween (elem, options, prop, end, easing) {\r\n    return new Tween.prototype.init(elem, options, prop, end, easing)\r\n  }\r\n  jQuery.Tween = Tween\r\n\r\n  Tween.prototype = {\r\n    constructor: Tween,\r\n    init: function (elem, options, prop, end, easing, unit) {\r\n      this.elem = elem\r\n      this.prop = prop\r\n      this.easing = easing || jQuery.easing._default\r\n      this.options = options\r\n      this.start = this.now = this.cur()\r\n      this.end = end\r\n      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px')\r\n    },\r\n    cur: function () {\r\n      const hooks = Tween.propHooks[this.prop]\r\n\r\n      return hooks && hooks.get\r\n        ? hooks.get(this)\r\n        : Tween.propHooks._default.get(this)\r\n    },\r\n    run: function (percent) {\r\n      let eased\r\n      const hooks = Tween.propHooks[this.prop]\r\n\r\n      if (this.options.duration) {\r\n        this.pos = eased = jQuery.easing[this.easing](\r\n          percent, this.options.duration * percent, 0, 1, this.options.duration\r\n        )\r\n      } else {\r\n        this.pos = eased = percent\r\n      }\r\n      this.now = (this.end - this.start) * eased + this.start\r\n\r\n      if (this.options.step) {\r\n        this.options.step.call(this.elem, this.now, this)\r\n      }\r\n\r\n      if (hooks && hooks.set) {\r\n        hooks.set(this)\r\n      } else {\r\n        Tween.propHooks._default.set(this)\r\n      }\r\n      return this\r\n    }\r\n  }\r\n\r\n  Tween.prototype.init.prototype = Tween.prototype\r\n\r\n  Tween.propHooks = {\r\n    _default: {\r\n      get: function (tween) {\r\n        let result\r\n\r\n        // Use a property on the element directly when it is not a DOM element,\r\n        // or when there is no matching style property that exists.\r\n        if (tween.elem.nodeType !== 1 ||\r\n\t\t\t\ttween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\r\n          return tween.elem[tween.prop]\r\n        }\r\n\r\n        // Passing an empty string as a 3rd parameter to .css will automatically\r\n        // attempt a parseFloat and fallback to a string if the parse fails.\r\n        // Simple values such as \"10px\" are parsed to Float;\r\n        // complex values such as \"rotate(1rad)\" are returned as-is.\r\n        result = jQuery.css(tween.elem, tween.prop, '')\r\n\r\n        // Empty strings, null, undefined and \"auto\" are converted to 0.\r\n        return !result || result === 'auto' ? 0 : result\r\n      },\r\n      set: function (tween) {\r\n        // Use step hook for back compat.\r\n        // Use cssHook if its there.\r\n        // Use .style if available and use plain properties where available.\r\n        if (jQuery.fx.step[tween.prop]) {\r\n          jQuery.fx.step[tween.prop](tween)\r\n        } else if (tween.elem.nodeType === 1 && (\r\n          jQuery.cssHooks[tween.prop] ||\r\n\t\t\t\t\ttween.elem.style[finalPropName(tween.prop)] != null)) {\r\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)\r\n        } else {\r\n          tween.elem[tween.prop] = tween.now\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Support: IE <=9 only\r\n  // Panic based approach to setting things on disconnected nodes\r\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\r\n    set: function (tween) {\r\n      if (tween.elem.nodeType && tween.elem.parentNode) {\r\n        tween.elem[tween.prop] = tween.now\r\n      }\r\n    }\r\n  }\r\n\r\n  jQuery.easing = {\r\n    linear: function (p) {\r\n      return p\r\n    },\r\n    swing: function (p) {\r\n      return 0.5 - Math.cos(p * Math.PI) / 2\r\n    },\r\n    _default: 'swing'\r\n  }\r\n\r\n  jQuery.fx = Tween.prototype.init\r\n\r\n  // Back compat <1.8 extension point\r\n  jQuery.fx.step = {}\r\n\r\n  let\r\n    fxNow; let inProgress\r\n  const rfxtypes = /^(?:toggle|show|hide)$/\r\n  const rrun = /queueHooks$/\r\n\r\n  function schedule () {\r\n    if (inProgress) {\r\n      if (document.hidden === false && window.requestAnimationFrame) {\r\n        window.requestAnimationFrame(schedule)\r\n      } else {\r\n        window.setTimeout(schedule, jQuery.fx.interval)\r\n      }\r\n\r\n      jQuery.fx.tick()\r\n    }\r\n  }\r\n\r\n  // Animations created synchronously will run synchronously\r\n  function createFxNow () {\r\n    window.setTimeout(function () {\r\n      fxNow = undefined\r\n    })\r\n    return (fxNow = Date.now())\r\n  }\r\n\r\n  // Generate parameters to create a standard animation\r\n  function genFx (type, includeWidth) {\r\n    let which\r\n    let i = 0\r\n    const attrs = { height: type }\r\n\r\n    // If we include width, step value is 1 to do all cssExpand values,\r\n    // otherwise step value is 2 to skip over Left and Right\r\n    includeWidth = includeWidth ? 1 : 0\r\n    for (; i < 4; i += 2 - includeWidth) {\r\n      which = cssExpand[i]\r\n      attrs['margin' + which] = attrs['padding' + which] = type\r\n    }\r\n\r\n    if (includeWidth) {\r\n      attrs.opacity = attrs.width = type\r\n    }\r\n\r\n    return attrs\r\n  }\r\n\r\n  function createTween (value, prop, animation) {\r\n    let tween\r\n    const collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*'])\r\n    let index = 0\r\n    const length = collection.length\r\n    for (; index < length; index++) {\r\n      if ((tween = collection[index].call(animation, prop, value))) {\r\n        // We're done with this property\r\n        return tween\r\n      }\r\n    }\r\n  }\r\n\r\n  function defaultPrefilter (elem, props, opts) {\r\n    let prop; let value; let toggle; let hooks; let oldfire; let propTween; let restoreDisplay; let display\r\n    const isBox = 'width' in props || 'height' in props\r\n    const anim = this\r\n    const orig = {}\r\n    const style = elem.style\r\n    let hidden = elem.nodeType && isHiddenWithinTree(elem)\r\n    let dataShow = dataPriv.get(elem, 'fxshow')\r\n\r\n    // Queue-skipping animations hijack the fx hooks\r\n    if (!opts.queue) {\r\n      hooks = jQuery._queueHooks(elem, 'fx')\r\n      if (hooks.unqueued == null) {\r\n        hooks.unqueued = 0\r\n        oldfire = hooks.empty.fire\r\n        hooks.empty.fire = function () {\r\n          if (!hooks.unqueued) {\r\n            oldfire()\r\n          }\r\n        }\r\n      }\r\n      hooks.unqueued++\r\n\r\n      anim.always(function () {\r\n        // Ensure the complete handler is called before this completes\r\n        anim.always(function () {\r\n          hooks.unqueued--\r\n          if (!jQuery.queue(elem, 'fx').length) {\r\n            hooks.empty.fire()\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    // Detect show/hide animations\r\n    for (prop in props) {\r\n      value = props[prop]\r\n      if (rfxtypes.test(value)) {\r\n        delete props[prop]\r\n        toggle = toggle || value === 'toggle'\r\n        if (value === (hidden ? 'hide' : 'show')) {\r\n          // Pretend to be hidden if this is a \"show\" and\r\n          // there is still data from a stopped show/hide\r\n          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {\r\n            hidden = true\r\n\r\n            // Ignore all other no-op show/hide data\r\n          } else {\r\n            continue\r\n          }\r\n        }\r\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)\r\n      }\r\n    }\r\n\r\n    // Bail out if this is a no-op like .hide().hide()\r\n    propTween = !jQuery.isEmptyObject(props)\r\n    if (!propTween && jQuery.isEmptyObject(orig)) {\r\n      return\r\n    }\r\n\r\n    // Restrict \"overflow\" and \"display\" styles during box animations\r\n    if (isBox && elem.nodeType === 1) {\r\n      // Support: IE <=9 - 11, Edge 12 - 15\r\n      // Record all 3 overflow attributes because IE does not infer the shorthand\r\n      // from identically-valued overflowX and overflowY and Edge just mirrors\r\n      // the overflowX value there.\r\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]\r\n\r\n      // Identify a display type, preferring old show/hide data over the CSS cascade\r\n      restoreDisplay = dataShow && dataShow.display\r\n      if (restoreDisplay == null) {\r\n        restoreDisplay = dataPriv.get(elem, 'display')\r\n      }\r\n      display = jQuery.css(elem, 'display')\r\n      if (display === 'none') {\r\n        if (restoreDisplay) {\r\n          display = restoreDisplay\r\n        } else {\r\n          // Get nonempty value(s) by temporarily forcing visibility\r\n          showHide([elem], true)\r\n          restoreDisplay = elem.style.display || restoreDisplay\r\n          display = jQuery.css(elem, 'display')\r\n          showHide([elem])\r\n        }\r\n      }\r\n\r\n      // Animate inline elements as inline-block\r\n      if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {\r\n        if (jQuery.css(elem, 'float') === 'none') {\r\n          // Restore the original display value at the end of pure show/hide animations\r\n          if (!propTween) {\r\n            anim.done(function () {\r\n              style.display = restoreDisplay\r\n            })\r\n            if (restoreDisplay == null) {\r\n              display = style.display\r\n              restoreDisplay = display === 'none' ? '' : display\r\n            }\r\n          }\r\n          style.display = 'inline-block'\r\n        }\r\n      }\r\n    }\r\n\r\n    if (opts.overflow) {\r\n      style.overflow = 'hidden'\r\n      anim.always(function () {\r\n        style.overflow = opts.overflow[0]\r\n        style.overflowX = opts.overflow[1]\r\n        style.overflowY = opts.overflow[2]\r\n      })\r\n    }\r\n\r\n    // Implement show/hide animations\r\n    propTween = false\r\n    for (prop in orig) {\r\n      // General show/hide setup for this element animation\r\n      if (!propTween) {\r\n        if (dataShow) {\r\n          if ('hidden' in dataShow) {\r\n            hidden = dataShow.hidden\r\n          }\r\n        } else {\r\n          dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay })\r\n        }\r\n\r\n        // Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\r\n        if (toggle) {\r\n          dataShow.hidden = !hidden\r\n        }\r\n\r\n        // Show elements before animating them\r\n        if (hidden) {\r\n          showHide([elem], true)\r\n        }\r\n\r\n        /* eslint-disable no-loop-func */\r\n\r\n        anim.done(function () {\r\n          /* eslint-enable no-loop-func */\r\n\r\n          // The final step of a \"hide\" animation is actually hiding the element\r\n          if (!hidden) {\r\n            showHide([elem])\r\n          }\r\n          dataPriv.remove(elem, 'fxshow')\r\n          for (prop in orig) {\r\n            jQuery.style(elem, prop, orig[prop])\r\n          }\r\n        })\r\n      }\r\n\r\n      // Per-property setup\r\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim)\r\n      if (!(prop in dataShow)) {\r\n        dataShow[prop] = propTween.start\r\n        if (hidden) {\r\n          propTween.end = propTween.start\r\n          propTween.start = 0\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function propFilter (props, specialEasing) {\r\n    let index, name, easing, value, hooks\r\n\r\n    // camelCase, specialEasing and expand cssHook pass\r\n    for (index in props) {\r\n      name = camelCase(index)\r\n      easing = specialEasing[name]\r\n      value = props[index]\r\n      if (Array.isArray(value)) {\r\n        easing = value[1]\r\n        value = props[index] = value[0]\r\n      }\r\n\r\n      if (index !== name) {\r\n        props[name] = value\r\n        delete props[index]\r\n      }\r\n\r\n      hooks = jQuery.cssHooks[name]\r\n      if (hooks && 'expand' in hooks) {\r\n        value = hooks.expand(value)\r\n        delete props[name]\r\n\r\n        // Not quite $.extend, this won't overwrite existing keys.\r\n        // Reusing 'index' because we have the correct \"name\"\r\n        for (index in value) {\r\n          if (!(index in props)) {\r\n            props[index] = value[index]\r\n            specialEasing[index] = easing\r\n          }\r\n        }\r\n      } else {\r\n        specialEasing[name] = easing\r\n      }\r\n    }\r\n  }\r\n\r\n  function Animation (elem, properties, options) {\r\n    let result\r\n    let stopped\r\n    let index = 0\r\n    const length = Animation.prefilters.length\r\n    const deferred = jQuery.Deferred().always(function () {\r\n      // Don't match elem in the :animated selector\r\n      delete tick.elem\r\n    })\r\n    var tick = function () {\r\n      if (stopped) {\r\n        return false\r\n      }\r\n      const currentTime = fxNow || createFxNow()\r\n      const remaining = Math.max(0, animation.startTime + animation.duration - currentTime)\r\n\r\n      // Support: Android 2.3 only\r\n      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\r\n      const temp = remaining / animation.duration || 0\r\n      const percent = 1 - temp\r\n      let index = 0\r\n      const length = animation.tweens.length\r\n\r\n      for (; index < length; index++) {\r\n        animation.tweens[index].run(percent)\r\n      }\r\n\r\n      deferred.notifyWith(elem, [animation, percent, remaining])\r\n\r\n      // If there's more to do, yield\r\n      if (percent < 1 && length) {\r\n        return remaining\r\n      }\r\n\r\n      // If this was an empty animation, synthesize a final progress notification\r\n      if (!length) {\r\n        deferred.notifyWith(elem, [animation, 1, 0])\r\n      }\r\n\r\n      // Resolve the animation and report its conclusion\r\n      deferred.resolveWith(elem, [animation])\r\n      return false\r\n    }\r\n    var animation = deferred.promise({\r\n      elem,\r\n      props: jQuery.extend({}, properties),\r\n      opts: jQuery.extend(true, {\r\n        specialEasing: {},\r\n        easing: jQuery.easing._default\r\n      }, options),\r\n      originalProperties: properties,\r\n      originalOptions: options,\r\n      startTime: fxNow || createFxNow(),\r\n      duration: options.duration,\r\n      tweens: [],\r\n      createTween: function (prop, end) {\r\n        const tween = jQuery.Tween(elem, animation.opts, prop, end,\r\n          animation.opts.specialEasing[prop] || animation.opts.easing)\r\n        animation.tweens.push(tween)\r\n        return tween\r\n      },\r\n      stop: function (gotoEnd) {\r\n        let index = 0\r\n\r\n        // If we are going to the end, we want to run all the tweens\r\n        // otherwise we skip this part\r\n        const length = gotoEnd ? animation.tweens.length : 0\r\n        if (stopped) {\r\n          return this\r\n        }\r\n        stopped = true\r\n        for (; index < length; index++) {\r\n          animation.tweens[index].run(1)\r\n        }\r\n\r\n        // Resolve when we played the last frame; otherwise, reject\r\n        if (gotoEnd) {\r\n          deferred.notifyWith(elem, [animation, 1, 0])\r\n          deferred.resolveWith(elem, [animation, gotoEnd])\r\n        } else {\r\n          deferred.rejectWith(elem, [animation, gotoEnd])\r\n        }\r\n        return this\r\n      }\r\n    })\r\n    const props = animation.props\r\n\r\n    propFilter(props, animation.opts.specialEasing)\r\n\r\n    for (; index < length; index++) {\r\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts)\r\n      if (result) {\r\n        if (isFunction(result.stop)) {\r\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop =\r\n\t\t\t\t\tresult.stop.bind(result)\r\n        }\r\n        return result\r\n      }\r\n    }\r\n\r\n    jQuery.map(props, createTween, animation)\r\n\r\n    if (isFunction(animation.opts.start)) {\r\n      animation.opts.start.call(elem, animation)\r\n    }\r\n\r\n    // Attach callbacks from options\r\n    animation\r\n      .progress(animation.opts.progress)\r\n      .done(animation.opts.done, animation.opts.complete)\r\n      .fail(animation.opts.fail)\r\n      .always(animation.opts.always)\r\n\r\n    jQuery.fx.timer(\r\n      jQuery.extend(tick, {\r\n        elem,\r\n        anim: animation,\r\n        queue: animation.opts.queue\r\n      })\r\n    )\r\n\r\n    return animation\r\n  }\r\n\r\n  jQuery.Animation = jQuery.extend(Animation, {\r\n\r\n    tweeners: {\r\n      '*': [function (prop, value) {\r\n        const tween = this.createTween(prop, value)\r\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween)\r\n        return tween\r\n      }]\r\n    },\r\n\r\n    tweener: function (props, callback) {\r\n      if (isFunction(props)) {\r\n        callback = props\r\n        props = ['*']\r\n      } else {\r\n        props = props.match(rnothtmlwhite)\r\n      }\r\n\r\n      let prop\r\n      let index = 0\r\n      const length = props.length\r\n\r\n      for (; index < length; index++) {\r\n        prop = props[index]\r\n        Animation.tweeners[prop] = Animation.tweeners[prop] || []\r\n        Animation.tweeners[prop].unshift(callback)\r\n      }\r\n    },\r\n\r\n    prefilters: [defaultPrefilter],\r\n\r\n    prefilter: function (callback, prepend) {\r\n      if (prepend) {\r\n        Animation.prefilters.unshift(callback)\r\n      } else {\r\n        Animation.prefilters.push(callback)\r\n      }\r\n    }\r\n  })\r\n\r\n  jQuery.speed = function (speed, easing, fn) {\r\n    const opt = speed && typeof speed === 'object'\r\n      ? jQuery.extend({}, speed)\r\n      : {\r\n          complete: fn || !fn && easing ||\r\n\t\t\tisFunction(speed) && speed,\r\n          duration: speed,\r\n          easing: fn && easing || easing && !isFunction(easing) && easing\r\n        }\r\n\r\n    // Go to the end state if fx are off\r\n    if (jQuery.fx.off) {\r\n      opt.duration = 0\r\n    } else {\r\n      if (typeof opt.duration !== 'number') {\r\n        if (opt.duration in jQuery.fx.speeds) {\r\n          opt.duration = jQuery.fx.speeds[opt.duration]\r\n        } else {\r\n          opt.duration = jQuery.fx.speeds._default\r\n        }\r\n      }\r\n    }\r\n\r\n    // Normalize opt.queue - true/undefined/null -> \"fx\"\r\n    if (opt.queue == null || opt.queue === true) {\r\n      opt.queue = 'fx'\r\n    }\r\n\r\n    // Queueing\r\n    opt.old = opt.complete\r\n\r\n    opt.complete = function () {\r\n      if (isFunction(opt.old)) {\r\n        opt.old.call(this)\r\n      }\r\n\r\n      if (opt.queue) {\r\n        jQuery.dequeue(this, opt.queue)\r\n      }\r\n    }\r\n\r\n    return opt\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    fadeTo: function (speed, to, easing, callback) {\r\n      // Show any hidden elements after setting opacity to 0\r\n      return this.filter(isHiddenWithinTree).css('opacity', 0).show()\r\n\r\n      // Animate to the value specified\r\n        .end().animate({ opacity: to }, speed, easing, callback)\r\n    },\r\n    animate: function (prop, speed, easing, callback) {\r\n      const empty = jQuery.isEmptyObject(prop)\r\n      const optall = jQuery.speed(speed, easing, callback)\r\n      const doAnimation = function () {\r\n        // Operate on a copy of prop so per-property easing won't be lost\r\n        const anim = Animation(this, jQuery.extend({}, prop), optall)\r\n\r\n        // Empty animations, or finishing resolves immediately\r\n        if (empty || dataPriv.get(this, 'finish')) {\r\n          anim.stop(true)\r\n        }\r\n      }\r\n\r\n      doAnimation.finish = doAnimation\r\n\r\n      return empty || optall.queue === false\r\n        ? this.each(doAnimation)\r\n        : this.queue(optall.queue, doAnimation)\r\n    },\r\n    stop: function (type, clearQueue, gotoEnd) {\r\n      const stopQueue = function (hooks) {\r\n        const stop = hooks.stop\r\n        delete hooks.stop\r\n        stop(gotoEnd)\r\n      }\r\n\r\n      if (typeof type !== 'string') {\r\n        gotoEnd = clearQueue\r\n        clearQueue = type\r\n        type = undefined\r\n      }\r\n      if (clearQueue) {\r\n        this.queue(type || 'fx', [])\r\n      }\r\n\r\n      return this.each(function () {\r\n        let dequeue = true\r\n        let index = type != null && type + 'queueHooks'\r\n        const timers = jQuery.timers\r\n        const data = dataPriv.get(this)\r\n\r\n        if (index) {\r\n          if (data[index] && data[index].stop) {\r\n            stopQueue(data[index])\r\n          }\r\n        } else {\r\n          for (index in data) {\r\n            if (data[index] && data[index].stop && rrun.test(index)) {\r\n              stopQueue(data[index])\r\n            }\r\n          }\r\n        }\r\n\r\n        for (index = timers.length; index--;) {\r\n          if (timers[index].elem === this &&\r\n\t\t\t\t\t(type == null || timers[index].queue === type)) {\r\n            timers[index].anim.stop(gotoEnd)\r\n            dequeue = false\r\n            timers.splice(index, 1)\r\n          }\r\n        }\r\n\r\n        // Start the next in the queue if the last step wasn't forced.\r\n        // Timers currently will call their complete callbacks, which\r\n        // will dequeue but only if they were gotoEnd.\r\n        if (dequeue || !gotoEnd) {\r\n          jQuery.dequeue(this, type)\r\n        }\r\n      })\r\n    },\r\n    finish: function (type) {\r\n      if (type !== false) {\r\n        type = type || 'fx'\r\n      }\r\n      return this.each(function () {\r\n        let index\r\n        const data = dataPriv.get(this)\r\n        const queue = data[type + 'queue']\r\n        const hooks = data[type + 'queueHooks']\r\n        const timers = jQuery.timers\r\n        const length = queue ? queue.length : 0\r\n\r\n        // Enable finishing flag on private data\r\n        data.finish = true\r\n\r\n        // Empty the queue first\r\n        jQuery.queue(this, type, [])\r\n\r\n        if (hooks && hooks.stop) {\r\n          hooks.stop.call(this, true)\r\n        }\r\n\r\n        // Look for any active animations, and finish them\r\n        for (index = timers.length; index--;) {\r\n          if (timers[index].elem === this && timers[index].queue === type) {\r\n            timers[index].anim.stop(true)\r\n            timers.splice(index, 1)\r\n          }\r\n        }\r\n\r\n        // Look for any animations in the old queue and finish them\r\n        for (index = 0; index < length; index++) {\r\n          if (queue[index] && queue[index].finish) {\r\n            queue[index].finish.call(this)\r\n          }\r\n        }\r\n\r\n        // Turn off finishing flag\r\n        delete data.finish\r\n      })\r\n    }\r\n  })\r\n\r\n  jQuery.each(['toggle', 'show', 'hide'], function (_i, name) {\r\n    const cssFn = jQuery.fn[name]\r\n    jQuery.fn[name] = function (speed, easing, callback) {\r\n      return speed == null || typeof speed === 'boolean'\r\n        ? cssFn.apply(this, arguments)\r\n        : this.animate(genFx(name, true), speed, easing, callback)\r\n    }\r\n  })\r\n\r\n  // Generate shortcuts for custom animations\r\n  jQuery.each({\r\n    slideDown: genFx('show'),\r\n    slideUp: genFx('hide'),\r\n    slideToggle: genFx('toggle'),\r\n    fadeIn: { opacity: 'show' },\r\n    fadeOut: { opacity: 'hide' },\r\n    fadeToggle: { opacity: 'toggle' }\r\n  }, function (name, props) {\r\n    jQuery.fn[name] = function (speed, easing, callback) {\r\n      return this.animate(props, speed, easing, callback)\r\n    }\r\n  })\r\n\r\n  jQuery.timers = []\r\n  jQuery.fx.tick = function () {\r\n    let timer\r\n    let i = 0\r\n    const timers = jQuery.timers\r\n\r\n    fxNow = Date.now()\r\n\r\n    for (; i < timers.length; i++) {\r\n      timer = timers[i]\r\n\r\n      // Run the timer and safely remove it when done (allowing for external removal)\r\n      if (!timer() && timers[i] === timer) {\r\n        timers.splice(i--, 1)\r\n      }\r\n    }\r\n\r\n    if (!timers.length) {\r\n      jQuery.fx.stop()\r\n    }\r\n    fxNow = undefined\r\n  }\r\n\r\n  jQuery.fx.timer = function (timer) {\r\n    jQuery.timers.push(timer)\r\n    jQuery.fx.start()\r\n  }\r\n\r\n  jQuery.fx.interval = 13\r\n  jQuery.fx.start = function () {\r\n    if (inProgress) {\r\n      return\r\n    }\r\n\r\n    inProgress = true\r\n    schedule()\r\n  }\r\n\r\n  jQuery.fx.stop = function () {\r\n    inProgress = null\r\n  }\r\n\r\n  jQuery.fx.speeds = {\r\n    slow: 600,\r\n    fast: 200,\r\n\r\n    // Default speed\r\n    _default: 400\r\n  }\r\n\r\n  // Based off of the plugin by Clint Helfers, with permission.\r\n  jQuery.fn.delay = function (time, type) {\r\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time\r\n    type = type || 'fx'\r\n\r\n    return this.queue(type, function (next, hooks) {\r\n      const timeout = window.setTimeout(next, time)\r\n      hooks.stop = function () {\r\n        window.clearTimeout(timeout)\r\n      }\r\n    })\r\n  };\r\n\r\n  (function () {\r\n    let input = document.createElement('input')\r\n    const select = document.createElement('select')\r\n    const opt = select.appendChild(document.createElement('option'))\r\n\r\n    input.type = 'checkbox'\r\n\r\n    // Support: Android <=4.3 only\r\n    // Default value for a checkbox should be \"on\"\r\n    support.checkOn = input.value !== ''\r\n\r\n    // Support: IE <=11 only\r\n    // Must access selectedIndex to make default options select\r\n    support.optSelected = opt.selected\r\n\r\n    // Support: IE <=11 only\r\n    // An input loses its value after becoming a radio\r\n    input = document.createElement('input')\r\n    input.value = 't'\r\n    input.type = 'radio'\r\n    support.radioValue = input.value === 't'\r\n  })()\r\n\r\n  let boolHook\r\n  const attrHandle = jQuery.expr.attrHandle\r\n\r\n  jQuery.fn.extend({\r\n    attr: function (name, value) {\r\n      return access(this, jQuery.attr, name, value, arguments.length > 1)\r\n    },\r\n\r\n    removeAttr: function (name) {\r\n      return this.each(function () {\r\n        jQuery.removeAttr(this, name)\r\n      })\r\n    }\r\n  })\r\n\r\n  jQuery.extend({\r\n    attr: function (elem, name, value) {\r\n      let ret; let hooks\r\n      const nType = elem.nodeType\r\n\r\n      // Don't get/set attributes on text, comment and attribute nodes\r\n      if (nType === 3 || nType === 8 || nType === 2) {\r\n        return\r\n      }\r\n\r\n      // Fallback to prop when attributes are not supported\r\n      if (typeof elem.getAttribute === 'undefined') {\r\n        return jQuery.prop(elem, name, value)\r\n      }\r\n\r\n      // Attribute hooks are determined by the lowercase version\r\n      // Grab necessary hook if one is defined\r\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\r\n        hooks = jQuery.attrHooks[name.toLowerCase()] ||\r\n\t\t\t\t(jQuery.expr.match.bool.test(name) ? boolHook : undefined)\r\n      }\r\n\r\n      if (value !== undefined) {\r\n        if (value === null) {\r\n          jQuery.removeAttr(elem, name)\r\n          return\r\n        }\r\n\r\n        if (hooks && 'set' in hooks &&\r\n\t\t\t\t(ret = hooks.set(elem, value, name)) !== undefined) {\r\n          return ret\r\n        }\r\n\r\n        elem.setAttribute(name, value + '')\r\n        return value\r\n      }\r\n\r\n      if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {\r\n        return ret\r\n      }\r\n\r\n      ret = jQuery.find.attr(elem, name)\r\n\r\n      // Non-existent attributes return null, we normalize to undefined\r\n      return ret == null ? undefined : ret\r\n    },\r\n\r\n    attrHooks: {\r\n      type: {\r\n        set: function (elem, value) {\r\n          if (!support.radioValue && value === 'radio' &&\r\n\t\t\t\t\tnodeName(elem, 'input')) {\r\n            const val = elem.value\r\n            elem.setAttribute('type', value)\r\n            if (val) {\r\n              elem.value = val\r\n            }\r\n            return value\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    removeAttr: function (elem, value) {\r\n      let name\r\n      let i = 0\r\n\r\n      // Attribute names can contain non-HTML whitespace characters\r\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\r\n      const attrNames = value && value.match(rnothtmlwhite)\r\n\r\n      if (attrNames && elem.nodeType === 1) {\r\n        while ((name = attrNames[i++])) {\r\n          elem.removeAttribute(name)\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  // Hooks for boolean attributes\r\n  boolHook = {\r\n    set: function (elem, value, name) {\r\n      if (value === false) {\r\n        // Remove boolean attributes when set to false\r\n        jQuery.removeAttr(elem, name)\r\n      } else {\r\n        elem.setAttribute(name, name)\r\n      }\r\n      return name\r\n    }\r\n  }\r\n\r\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\r\n    const getter = attrHandle[name] || jQuery.find.attr\r\n\r\n    attrHandle[name] = function (elem, name, isXML) {\r\n      let ret; let handle\r\n      const lowercaseName = name.toLowerCase()\r\n\r\n      if (!isXML) {\r\n        // Avoid an infinite loop by temporarily removing this function from the getter\r\n        handle = attrHandle[lowercaseName]\r\n        attrHandle[lowercaseName] = ret\r\n        ret = getter(elem, name, isXML) != null\r\n          ? lowercaseName\r\n          : null\r\n        attrHandle[lowercaseName] = handle\r\n      }\r\n      return ret\r\n    }\r\n  })\r\n\r\n  const rfocusable = /^(?:input|select|textarea|button)$/i\r\n  const rclickable = /^(?:a|area)$/i\r\n\r\n  jQuery.fn.extend({\r\n    prop: function (name, value) {\r\n      return access(this, jQuery.prop, name, value, arguments.length > 1)\r\n    },\r\n\r\n    removeProp: function (name) {\r\n      return this.each(function () {\r\n        delete this[jQuery.propFix[name] || name]\r\n      })\r\n    }\r\n  })\r\n\r\n  jQuery.extend({\r\n    prop: function (elem, name, value) {\r\n      let ret; let hooks\r\n      const nType = elem.nodeType\r\n\r\n      // Don't get/set properties on text, comment and attribute nodes\r\n      if (nType === 3 || nType === 8 || nType === 2) {\r\n        return\r\n      }\r\n\r\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\r\n        // Fix name and attach hooks\r\n        name = jQuery.propFix[name] || name\r\n        hooks = jQuery.propHooks[name]\r\n      }\r\n\r\n      if (value !== undefined) {\r\n        if (hooks && 'set' in hooks &&\r\n\t\t\t\t(ret = hooks.set(elem, value, name)) !== undefined) {\r\n          return ret\r\n        }\r\n\r\n        return (elem[name] = value)\r\n      }\r\n\r\n      if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {\r\n        return ret\r\n      }\r\n\r\n      return elem[name]\r\n    },\r\n\r\n    propHooks: {\r\n      tabIndex: {\r\n        get: function (elem) {\r\n          // Support: IE <=9 - 11 only\r\n          // elem.tabIndex doesn't always return the\r\n          // correct value when it hasn't been explicitly set\r\n          // Use proper attribute retrieval (trac-12072)\r\n          const tabindex = jQuery.find.attr(elem, 'tabindex')\r\n\r\n          if (tabindex) {\r\n            return parseInt(tabindex, 10)\r\n          }\r\n\r\n          if (\r\n            rfocusable.test(elem.nodeName) ||\r\n\t\t\t\t\trclickable.test(elem.nodeName) &&\r\n\t\t\t\t\telem.href\r\n          ) {\r\n            return 0\r\n          }\r\n\r\n          return -1\r\n        }\r\n      }\r\n    },\r\n\r\n    propFix: {\r\n      for: 'htmlFor',\r\n      class: 'className'\r\n    }\r\n  })\r\n\r\n  // Support: IE <=11 only\r\n  // Accessing the selectedIndex property\r\n  // forces the browser to respect setting selected\r\n  // on the option\r\n  // The getter ensures a default option is selected\r\n  // when in an optgroup\r\n  // eslint rule \"no-unused-expressions\" is disabled for this code\r\n  // since it considers such accessions noop\r\n  if (!support.optSelected) {\r\n    jQuery.propHooks.selected = {\r\n      get: function (elem) {\r\n        /* eslint no-unused-expressions: \"off\" */\r\n\r\n        const parent = elem.parentNode\r\n        if (parent && parent.parentNode) {\r\n          parent.parentNode.selectedIndex\r\n        }\r\n        return null\r\n      },\r\n      set: function (elem) {\r\n        /* eslint no-unused-expressions: \"off\" */\r\n\r\n        const parent = elem.parentNode\r\n        if (parent) {\r\n          parent.selectedIndex\r\n\r\n          if (parent.parentNode) {\r\n            parent.parentNode.selectedIndex\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  jQuery.each([\r\n    'tabIndex',\r\n    'readOnly',\r\n    'maxLength',\r\n    'cellSpacing',\r\n    'cellPadding',\r\n    'rowSpan',\r\n    'colSpan',\r\n    'useMap',\r\n    'frameBorder',\r\n    'contentEditable'\r\n  ], function () {\r\n    jQuery.propFix[this.toLowerCase()] = this\r\n  })\r\n\r\n  // Strip and collapse whitespace according to HTML spec\r\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\r\n  function stripAndCollapse (value) {\r\n    const tokens = value.match(rnothtmlwhite) || []\r\n    return tokens.join(' ')\r\n  }\r\n\r\n  function getClass (elem) {\r\n    return elem.getAttribute && elem.getAttribute('class') || ''\r\n  }\r\n\r\n  function classesToArray (value) {\r\n    if (Array.isArray(value)) {\r\n      return value\r\n    }\r\n    if (typeof value === 'string') {\r\n      return value.match(rnothtmlwhite) || []\r\n    }\r\n    return []\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    addClass: function (value) {\r\n      let classNames, cur, curValue, className, i, finalValue\r\n\r\n      if (isFunction(value)) {\r\n        return this.each(function (j) {\r\n          jQuery(this).addClass(value.call(this, j, getClass(this)))\r\n        })\r\n      }\r\n\r\n      classNames = classesToArray(value)\r\n\r\n      if (classNames.length) {\r\n        return this.each(function () {\r\n          curValue = getClass(this)\r\n          cur = this.nodeType === 1 && (' ' + stripAndCollapse(curValue) + ' ')\r\n\r\n          if (cur) {\r\n            for (i = 0; i < classNames.length; i++) {\r\n              className = classNames[i]\r\n              if (cur.indexOf(' ' + className + ' ') < 0) {\r\n                cur += className + ' '\r\n              }\r\n            }\r\n\r\n            // Only assign if different to avoid unneeded rendering.\r\n            finalValue = stripAndCollapse(cur)\r\n            if (curValue !== finalValue) {\r\n              this.setAttribute('class', finalValue)\r\n            }\r\n          }\r\n        })\r\n      }\r\n\r\n      return this\r\n    },\r\n\r\n    removeClass: function (value) {\r\n      let classNames, cur, curValue, className, i, finalValue\r\n\r\n      if (isFunction(value)) {\r\n        return this.each(function (j) {\r\n          jQuery(this).removeClass(value.call(this, j, getClass(this)))\r\n        })\r\n      }\r\n\r\n      if (!arguments.length) {\r\n        return this.attr('class', '')\r\n      }\r\n\r\n      classNames = classesToArray(value)\r\n\r\n      if (classNames.length) {\r\n        return this.each(function () {\r\n          curValue = getClass(this)\r\n\r\n          // This expression is here for better compressibility (see addClass)\r\n          cur = this.nodeType === 1 && (' ' + stripAndCollapse(curValue) + ' ')\r\n\r\n          if (cur) {\r\n            for (i = 0; i < classNames.length; i++) {\r\n              className = classNames[i]\r\n\r\n              // Remove *all* instances\r\n              while (cur.indexOf(' ' + className + ' ') > -1) {\r\n                cur = cur.replace(' ' + className + ' ', ' ')\r\n              }\r\n            }\r\n\r\n            // Only assign if different to avoid unneeded rendering.\r\n            finalValue = stripAndCollapse(cur)\r\n            if (curValue !== finalValue) {\r\n              this.setAttribute('class', finalValue)\r\n            }\r\n          }\r\n        })\r\n      }\r\n\r\n      return this\r\n    },\r\n\r\n    toggleClass: function (value, stateVal) {\r\n      let classNames; let className; let i; let self\r\n      const type = typeof value\r\n      const isValidValue = type === 'string' || Array.isArray(value)\r\n\r\n      if (isFunction(value)) {\r\n        return this.each(function (i) {\r\n          jQuery(this).toggleClass(\r\n            value.call(this, i, getClass(this), stateVal),\r\n            stateVal\r\n          )\r\n        })\r\n      }\r\n\r\n      if (typeof stateVal === 'boolean' && isValidValue) {\r\n        return stateVal ? this.addClass(value) : this.removeClass(value)\r\n      }\r\n\r\n      classNames = classesToArray(value)\r\n\r\n      return this.each(function () {\r\n        if (isValidValue) {\r\n          // Toggle individual class names\r\n          self = jQuery(this)\r\n\r\n          for (i = 0; i < classNames.length; i++) {\r\n            className = classNames[i]\r\n\r\n            // Check each className given, space separated list\r\n            if (self.hasClass(className)) {\r\n              self.removeClass(className)\r\n            } else {\r\n              self.addClass(className)\r\n            }\r\n          }\r\n\r\n          // Toggle whole class name\r\n        } else if (value === undefined || type === 'boolean') {\r\n          className = getClass(this)\r\n          if (className) {\r\n            // Store className if set\r\n            dataPriv.set(this, '__className__', className)\r\n          }\r\n\r\n          // If the element has a class name or if we're passed `false`,\r\n          // then remove the whole classname (if there was one, the above saved it).\r\n          // Otherwise bring back whatever was previously saved (if anything),\r\n          // falling back to the empty string if nothing was stored.\r\n          if (this.setAttribute) {\r\n            this.setAttribute('class',\r\n              className || value === false\r\n                ? ''\r\n                : dataPriv.get(this, '__className__') || ''\r\n            )\r\n          }\r\n        }\r\n      })\r\n    },\r\n\r\n    hasClass: function (selector) {\r\n      let className; let elem\r\n      let i = 0\r\n\r\n      className = ' ' + selector + ' '\r\n      while ((elem = this[i++])) {\r\n        if (elem.nodeType === 1 &&\r\n\t\t\t\t(' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {\r\n          return true\r\n        }\r\n      }\r\n\r\n      return false\r\n    }\r\n  })\r\n\r\n  const rreturn = /\\r/g\r\n\r\n  jQuery.fn.extend({\r\n    val: function (value) {\r\n      let hooks; let ret; let valueIsFunction\r\n      const elem = this[0]\r\n\r\n      if (!arguments.length) {\r\n        if (elem) {\r\n          hooks = jQuery.valHooks[elem.type] ||\r\n\t\t\t\t\tjQuery.valHooks[elem.nodeName.toLowerCase()]\r\n\r\n          if (hooks &&\r\n\t\t\t\t\t'get' in hooks &&\r\n\t\t\t\t\t(ret = hooks.get(elem, 'value')) !== undefined\r\n          ) {\r\n            return ret\r\n          }\r\n\r\n          ret = elem.value\r\n\r\n          // Handle most common string cases\r\n          if (typeof ret === 'string') {\r\n            return ret.replace(rreturn, '')\r\n          }\r\n\r\n          // Handle cases where value is null/undef or number\r\n          return ret == null ? '' : ret\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      valueIsFunction = isFunction(value)\r\n\r\n      return this.each(function (i) {\r\n        let val\r\n\r\n        if (this.nodeType !== 1) {\r\n          return\r\n        }\r\n\r\n        if (valueIsFunction) {\r\n          val = value.call(this, i, jQuery(this).val())\r\n        } else {\r\n          val = value\r\n        }\r\n\r\n        // Treat null/undefined as \"\"; convert numbers to string\r\n        if (val == null) {\r\n          val = ''\r\n        } else if (typeof val === 'number') {\r\n          val += ''\r\n        } else if (Array.isArray(val)) {\r\n          val = jQuery.map(val, function (value) {\r\n            return value == null ? '' : value + ''\r\n          })\r\n        }\r\n\r\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]\r\n\r\n        // If set returns undefined, fall back to normal setting\r\n        if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {\r\n          this.value = val\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  jQuery.extend({\r\n    valHooks: {\r\n      option: {\r\n        get: function (elem) {\r\n          const val = jQuery.find.attr(elem, 'value')\r\n          return val != null\r\n            ? val\r\n\r\n          // Support: IE <=10 - 11 only\r\n          // option.text throws exceptions (trac-14686, trac-14858)\r\n          // Strip and collapse whitespace\r\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\r\n            : stripAndCollapse(jQuery.text(elem))\r\n        }\r\n      },\r\n      select: {\r\n        get: function (elem) {\r\n          let value; let option; let i\r\n          const options = elem.options\r\n          const index = elem.selectedIndex\r\n          const one = elem.type === 'select-one'\r\n          const values = one ? null : []\r\n          const max = one ? index + 1 : options.length\r\n\r\n          if (index < 0) {\r\n            i = max\r\n          } else {\r\n            i = one ? index : 0\r\n          }\r\n\r\n          // Loop through all the selected options\r\n          for (; i < max; i++) {\r\n            option = options[i]\r\n\r\n            // Support: IE <=9 only\r\n            // IE8-9 doesn't update selected after form reset (trac-2551)\r\n            if ((option.selected || i === index) &&\r\n\r\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\r\n\t\t\t\t\t\t\t!option.disabled &&\r\n\t\t\t\t\t\t\t(!option.parentNode.disabled ||\r\n\t\t\t\t\t\t\t\t!nodeName(option.parentNode, 'optgroup'))) {\r\n              // Get the specific value for the option\r\n              value = jQuery(option).val()\r\n\r\n              // We don't need an array for one selects\r\n              if (one) {\r\n                return value\r\n              }\r\n\r\n              // Multi-Selects return an array\r\n              values.push(value)\r\n            }\r\n          }\r\n\r\n          return values\r\n        },\r\n\r\n        set: function (elem, value) {\r\n          let optionSet; let option\r\n          const options = elem.options\r\n          const values = jQuery.makeArray(value)\r\n          let i = options.length\r\n\r\n          while (i--) {\r\n            option = options[i]\r\n\r\n            /* eslint-disable no-cond-assign */\r\n\r\n            if (option.selected =\r\n\t\t\t\t\t\tjQuery.inArray(jQuery.valHooks.option.get(option), values) > -1\r\n            ) {\r\n              optionSet = true\r\n            }\r\n\r\n            /* eslint-enable no-cond-assign */\r\n          }\r\n\r\n          // Force browsers to behave consistently when non-matching value is set\r\n          if (!optionSet) {\r\n            elem.selectedIndex = -1\r\n          }\r\n          return values\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  // Radios and checkboxes getter/setter\r\n  jQuery.each(['radio', 'checkbox'], function () {\r\n    jQuery.valHooks[this] = {\r\n      set: function (elem, value) {\r\n        if (Array.isArray(value)) {\r\n          return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1)\r\n        }\r\n      }\r\n    }\r\n    if (!support.checkOn) {\r\n      jQuery.valHooks[this].get = function (elem) {\r\n        return elem.getAttribute('value') === null ? 'on' : elem.value\r\n      }\r\n    }\r\n  })\r\n\r\n  // Return jQuery for attributes-only inclusion\r\n  const location = window.location\r\n\r\n  const nonce = { guid: Date.now() }\r\n\r\n  const rquery = (/\\?/)\r\n\r\n  // Cross-browser xml parsing\r\n  jQuery.parseXML = function (data) {\r\n    let xml, parserErrorElem\r\n    if (!data || typeof data !== 'string') {\r\n      return null\r\n    }\r\n\r\n    // Support: IE 9 - 11 only\r\n    // IE throws on parseFromString with invalid input.\r\n    try {\r\n      xml = (new window.DOMParser()).parseFromString(data, 'text/xml')\r\n    } catch (e) {}\r\n\r\n    parserErrorElem = xml && xml.getElementsByTagName('parsererror')[0]\r\n    if (!xml || parserErrorElem) {\r\n      jQuery.error('Invalid XML: ' + (\r\n        parserErrorElem\r\n          ? jQuery.map(parserErrorElem.childNodes, function (el) {\r\n            return el.textContent\r\n          }).join('\\n')\r\n          : data\r\n      ))\r\n    }\r\n    return xml\r\n  }\r\n\r\n  const rfocusMorph = /^(?:focusinfocus|focusoutblur)$/\r\n  const stopPropagationCallback = function (e) {\r\n    e.stopPropagation()\r\n  }\r\n\r\n  jQuery.extend(jQuery.event, {\r\n\r\n    trigger: function (event, data, elem, onlyHandlers) {\r\n      let i; let cur; let tmp; let bubbleType; let ontype; let handle; let special; let lastElement\r\n      const eventPath = [elem || document]\r\n      let type = hasOwn.call(event, 'type') ? event.type : event\r\n      let namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : []\r\n\r\n      cur = lastElement = tmp = elem = elem || document\r\n\r\n      // Don't do events on text and comment nodes\r\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\r\n        return\r\n      }\r\n\r\n      // focus/blur morphs to focusin/out; ensure we're not firing them right now\r\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\r\n        return\r\n      }\r\n\r\n      if (type.indexOf('.') > -1) {\r\n        // Namespaced trigger; create a regexp to match event type in handle()\r\n        namespaces = type.split('.')\r\n        type = namespaces.shift()\r\n        namespaces.sort()\r\n      }\r\n      ontype = type.indexOf(':') < 0 && 'on' + type\r\n\r\n      // Caller can pass in a jQuery.Event object, Object, or just an event type string\r\n      event = event[jQuery.expando]\r\n        ? event\r\n        : new jQuery.Event(type, typeof event === 'object' && event)\r\n\r\n      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\r\n      event.isTrigger = onlyHandlers ? 2 : 3\r\n      event.namespace = namespaces.join('.')\r\n      event.rnamespace = event.namespace\r\n        ? new RegExp('(^|\\\\.)' + namespaces.join('\\\\.(?:.*\\\\.|)') + '(\\\\.|$)')\r\n        : null\r\n\r\n      // Clean up the event in case it is being reused\r\n      event.result = undefined\r\n      if (!event.target) {\r\n        event.target = elem\r\n      }\r\n\r\n      // Clone any incoming data and prepend the event, creating the handler arg list\r\n      data = data == null\r\n        ? [event]\r\n        : jQuery.makeArray(data, [event])\r\n\r\n      // Allow special events to draw outside the lines\r\n      special = jQuery.event.special[type] || {}\r\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\r\n        return\r\n      }\r\n\r\n      // Determine event propagation path in advance, per W3C events spec (trac-9951)\r\n      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\r\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\r\n        bubbleType = special.delegateType || type\r\n        if (!rfocusMorph.test(bubbleType + type)) {\r\n          cur = cur.parentNode\r\n        }\r\n        for (; cur; cur = cur.parentNode) {\r\n          eventPath.push(cur)\r\n          tmp = cur\r\n        }\r\n\r\n        // Only add window if we got to document (e.g., not plain obj or detached DOM)\r\n        if (tmp === (elem.ownerDocument || document)) {\r\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window)\r\n        }\r\n      }\r\n\r\n      // Fire handlers on the event path\r\n      i = 0\r\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\r\n        lastElement = cur\r\n        event.type = i > 1\r\n          ? bubbleType\r\n          : special.bindType || type\r\n\r\n        // jQuery handler\r\n        handle = (dataPriv.get(cur, 'events') || Object.create(null))[event.type] &&\r\n\t\t\t\tdataPriv.get(cur, 'handle')\r\n        if (handle) {\r\n          handle.apply(cur, data)\r\n        }\r\n\r\n        // Native handler\r\n        handle = ontype && cur[ontype]\r\n        if (handle && handle.apply && acceptData(cur)) {\r\n          event.result = handle.apply(cur, data)\r\n          if (event.result === false) {\r\n            event.preventDefault()\r\n          }\r\n        }\r\n      }\r\n      event.type = type\r\n\r\n      // If nobody prevented the default action, do it now\r\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\r\n        if ((!special._default ||\r\n\t\t\t\tspecial._default.apply(eventPath.pop(), data) === false) &&\r\n\t\t\t\tacceptData(elem)) {\r\n          // Call a native DOM method on the target with the same name as the event.\r\n          // Don't do default actions on window, that's where global variables be (trac-6170)\r\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\r\n            // Don't re-trigger an onFOO event when we call its FOO() method\r\n            tmp = elem[ontype]\r\n\r\n            if (tmp) {\r\n              elem[ontype] = null\r\n            }\r\n\r\n            // Prevent re-triggering of the same event, since we already bubbled it above\r\n            jQuery.event.triggered = type\r\n\r\n            if (event.isPropagationStopped()) {\r\n              lastElement.addEventListener(type, stopPropagationCallback)\r\n            }\r\n\r\n            elem[type]()\r\n\r\n            if (event.isPropagationStopped()) {\r\n              lastElement.removeEventListener(type, stopPropagationCallback)\r\n            }\r\n\r\n            jQuery.event.triggered = undefined\r\n\r\n            if (tmp) {\r\n              elem[ontype] = tmp\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return event.result\r\n    },\r\n\r\n    // Piggyback on a donor event to simulate a different one\r\n    // Used only for `focus(in | out)` events\r\n    simulate: function (type, elem, event) {\r\n      const e = jQuery.extend(\r\n        new jQuery.Event(),\r\n        event,\r\n        {\r\n          type,\r\n          isSimulated: true\r\n        }\r\n      )\r\n\r\n      jQuery.event.trigger(e, null, elem)\r\n    }\r\n\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n\r\n    trigger: function (type, data) {\r\n      return this.each(function () {\r\n        jQuery.event.trigger(type, data, this)\r\n      })\r\n    },\r\n    triggerHandler: function (type, data) {\r\n      const elem = this[0]\r\n      if (elem) {\r\n        return jQuery.event.trigger(type, data, elem, true)\r\n      }\r\n    }\r\n  })\r\n\r\n  const\r\n    rbracket = /\\[\\]$/\r\n  const rCRLF = /\\r?\\n/g\r\n  const rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i\r\n  const rsubmittable = /^(?:input|select|textarea|keygen)/i\r\n\r\n  function buildParams (prefix, obj, traditional, add) {\r\n    let name\r\n\r\n    if (Array.isArray(obj)) {\r\n      // Serialize array item.\r\n      jQuery.each(obj, function (i, v) {\r\n        if (traditional || rbracket.test(prefix)) {\r\n          // Treat each array item as a scalar.\r\n          add(prefix, v)\r\n        } else {\r\n          // Item is non-scalar (array or object), encode its numeric index.\r\n          buildParams(\r\n            prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']',\r\n            v,\r\n            traditional,\r\n            add\r\n          )\r\n        }\r\n      })\r\n    } else if (!traditional && toType(obj) === 'object') {\r\n      // Serialize object item.\r\n      for (name in obj) {\r\n        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)\r\n      }\r\n    } else {\r\n      // Serialize scalar item.\r\n      add(prefix, obj)\r\n    }\r\n  }\r\n\r\n  // Serialize an array of form elements or a set of\r\n  // key/values into a query string\r\n  jQuery.param = function (a, traditional) {\r\n    let prefix\r\n    const s = []\r\n    const add = function (key, valueOrFunction) {\r\n      // If value is a function, invoke it and use its return value\r\n      const value = isFunction(valueOrFunction)\r\n        ? valueOrFunction()\r\n        : valueOrFunction\r\n\r\n      s[s.length] = encodeURIComponent(key) + '=' +\r\n\t\t\t\tencodeURIComponent(value == null ? '' : value)\r\n    }\r\n\r\n    if (a == null) {\r\n      return ''\r\n    }\r\n\r\n    // If an array was passed in, assume that it is an array of form elements.\r\n    if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {\r\n      // Serialize the form elements\r\n      jQuery.each(a, function () {\r\n        add(this.name, this.value)\r\n      })\r\n    } else {\r\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\r\n      // did it), otherwise encode params recursively.\r\n      for (prefix in a) {\r\n        buildParams(prefix, a[prefix], traditional, add)\r\n      }\r\n    }\r\n\r\n    // Return the resulting serialization\r\n    return s.join('&')\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    serialize: function () {\r\n      return jQuery.param(this.serializeArray())\r\n    },\r\n    serializeArray: function () {\r\n      return this.map(function () {\r\n        // Can add propHook for \"elements\" to filter or add form elements\r\n        const elements = jQuery.prop(this, 'elements')\r\n        return elements ? jQuery.makeArray(elements) : this\r\n      }).filter(function () {\r\n        const type = this.type\r\n\r\n        // Use .is( \":disabled\" ) so that fieldset[disabled] works\r\n        return this.name && !jQuery(this).is(':disabled') &&\r\n\t\t\t\trsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&\r\n\t\t\t\t(this.checked || !rcheckableType.test(type))\r\n      }).map(function (_i, elem) {\r\n        const val = jQuery(this).val()\r\n\r\n        if (val == null) {\r\n          return null\r\n        }\r\n\r\n        if (Array.isArray(val)) {\r\n          return jQuery.map(val, function (val) {\r\n            return { name: elem.name, value: val.replace(rCRLF, '\\r\\n') }\r\n          })\r\n        }\r\n\r\n        return { name: elem.name, value: val.replace(rCRLF, '\\r\\n') }\r\n      }).get()\r\n    }\r\n  })\r\n\r\n  const\r\n    r20 = /%20/g\r\n  const rhash = /#.*$/\r\n  const rantiCache = /([?&])_=[^&]*/\r\n  const rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg\r\n\r\n  // trac-7653, trac-8125, trac-8152: local protocol detection\r\n  const rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/\r\n  const rnoContent = /^(?:GET|HEAD)$/\r\n  const rprotocol = /^\\/\\//\r\n\r\n  /* Prefilters\r\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n\t * 2) These are called:\r\n\t *    - BEFORE asking for a transport\r\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n\t * 3) key is the dataType\r\n\t * 4) the catchall symbol \"*\" can be used\r\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n\t */\r\n  const prefilters = {}\r\n\r\n  /* Transports bindings\r\n\t * 1) key is the dataType\r\n\t * 2) the catchall symbol \"*\" can be used\r\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n\t */\r\n  const transports = {}\r\n\r\n  // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\r\n  const allTypes = '*/'.concat('*')\r\n\r\n  // Anchor tag for parsing the document origin\r\n  const originAnchor = document.createElement('a')\r\n\r\n  originAnchor.href = location.href\r\n\r\n  // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\n  function addToPrefiltersOrTransports (structure) {\r\n    // dataTypeExpression is optional and defaults to \"*\"\r\n    return function (dataTypeExpression, func) {\r\n      if (typeof dataTypeExpression !== 'string') {\r\n        func = dataTypeExpression\r\n        dataTypeExpression = '*'\r\n      }\r\n\r\n      let dataType\r\n      let i = 0\r\n      const dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || []\r\n\r\n      if (isFunction(func)) {\r\n        // For each dataType in the dataTypeExpression\r\n        while ((dataType = dataTypes[i++])) {\r\n          // Prepend if requested\r\n          if (dataType[0] === '+') {\r\n            dataType = dataType.slice(1) || '*';\r\n            (structure[dataType] = structure[dataType] || []).unshift(func)\r\n\r\n            // Otherwise append\r\n          } else {\r\n            (structure[dataType] = structure[dataType] || []).push(func)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Base inspection function for prefilters and transports\r\n  function inspectPrefiltersOrTransports (structure, options, originalOptions, jqXHR) {\r\n    const inspected = {}\r\n    const seekingTransport = (structure === transports)\r\n\r\n    function inspect (dataType) {\r\n      let selected\r\n      inspected[dataType] = true\r\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\r\n        const dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR)\r\n        if (typeof dataTypeOrTransport === 'string' &&\r\n\t\t\t\t!seekingTransport && !inspected[dataTypeOrTransport]) {\r\n          options.dataTypes.unshift(dataTypeOrTransport)\r\n          inspect(dataTypeOrTransport)\r\n          return false\r\n        } else if (seekingTransport) {\r\n          return !(selected = dataTypeOrTransport)\r\n        }\r\n      })\r\n      return selected\r\n    }\r\n\r\n    return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*')\r\n  }\r\n\r\n  // A special extend for ajax options\r\n  // that takes \"flat\" options (not to be deep extended)\r\n  // Fixes trac-9887\r\n  function ajaxExtend (target, src) {\r\n    let key; let deep\r\n    const flatOptions = jQuery.ajaxSettings.flatOptions || {}\r\n\r\n    for (key in src) {\r\n      if (src[key] !== undefined) {\r\n        (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key]\r\n      }\r\n    }\r\n    if (deep) {\r\n      jQuery.extend(true, target, deep)\r\n    }\r\n\r\n    return target\r\n  }\r\n\r\n  /* Handles responses to an ajax request:\r\n * - finds the right dataType (mediates between content-type and expected dataType)\r\n * - returns the corresponding response\r\n */\r\n  function ajaxHandleResponses (s, jqXHR, responses) {\r\n    let ct; let type; let finalDataType; let firstDataType\r\n    const contents = s.contents\r\n    const dataTypes = s.dataTypes\r\n\r\n    // Remove auto dataType and get content-type in the process\r\n    while (dataTypes[0] === '*') {\r\n      dataTypes.shift()\r\n      if (ct === undefined) {\r\n        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type')\r\n      }\r\n    }\r\n\r\n    // Check if we're dealing with a known content-type\r\n    if (ct) {\r\n      for (type in contents) {\r\n        if (contents[type] && contents[type].test(ct)) {\r\n          dataTypes.unshift(type)\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check to see if we have a response for the expected dataType\r\n    if (dataTypes[0] in responses) {\r\n      finalDataType = dataTypes[0]\r\n    } else {\r\n      // Try convertible dataTypes\r\n      for (type in responses) {\r\n        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {\r\n          finalDataType = type\r\n          break\r\n        }\r\n        if (!firstDataType) {\r\n          firstDataType = type\r\n        }\r\n      }\r\n\r\n      // Or just use first one\r\n      finalDataType = finalDataType || firstDataType\r\n    }\r\n\r\n    // If we found a dataType\r\n    // We add the dataType to the list if needed\r\n    // and return the corresponding response\r\n    if (finalDataType) {\r\n      if (finalDataType !== dataTypes[0]) {\r\n        dataTypes.unshift(finalDataType)\r\n      }\r\n      return responses[finalDataType]\r\n    }\r\n  }\r\n\r\n  /* Chain conversions given the request and the original response\r\n * Also sets the responseXXX fields on the jqXHR instance\r\n */\r\n  function ajaxConvert (s, response, jqXHR, isSuccess) {\r\n    let conv2; let current; let conv; let tmp; let prev\r\n    const converters = {}\r\n\r\n    // Work with a copy of dataTypes in case we need to modify it for conversion\r\n    const dataTypes = s.dataTypes.slice()\r\n\r\n    // Create converters map with lowercased keys\r\n    if (dataTypes[1]) {\r\n      for (conv in s.converters) {\r\n        converters[conv.toLowerCase()] = s.converters[conv]\r\n      }\r\n    }\r\n\r\n    current = dataTypes.shift()\r\n\r\n    // Convert to each sequential dataType\r\n    while (current) {\r\n      if (s.responseFields[current]) {\r\n        jqXHR[s.responseFields[current]] = response\r\n      }\r\n\r\n      // Apply the dataFilter if provided\r\n      if (!prev && isSuccess && s.dataFilter) {\r\n        response = s.dataFilter(response, s.dataType)\r\n      }\r\n\r\n      prev = current\r\n      current = dataTypes.shift()\r\n\r\n      if (current) {\r\n        // There's only work to do if current dataType is non-auto\r\n        if (current === '*') {\r\n          current = prev\r\n\r\n          // Convert response if prev dataType is non-auto and differs from current\r\n        } else if (prev !== '*' && prev !== current) {\r\n          // Seek a direct converter\r\n          conv = converters[prev + ' ' + current] || converters['* ' + current]\r\n\r\n          // If none found, seek a pair\r\n          if (!conv) {\r\n            for (conv2 in converters) {\r\n              // If conv2 outputs current\r\n              tmp = conv2.split(' ')\r\n              if (tmp[1] === current) {\r\n                // If prev can be converted to accepted input\r\n                conv = converters[prev + ' ' + tmp[0]] ||\r\n\t\t\t\t\t\t\t\tconverters['* ' + tmp[0]]\r\n                if (conv) {\r\n                  // Condense equivalence converters\r\n                  if (conv === true) {\r\n                    conv = converters[conv2]\r\n\r\n                    // Otherwise, insert the intermediate dataType\r\n                  } else if (converters[conv2] !== true) {\r\n                    current = tmp[0]\r\n                    dataTypes.unshift(tmp[1])\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Apply converter (if not an equivalence)\r\n          if (conv !== true) {\r\n            // Unless errors are allowed to bubble, catch and return them\r\n            if (conv && s.throws) {\r\n              response = conv(response)\r\n            } else {\r\n              try {\r\n                response = conv(response)\r\n              } catch (e) {\r\n                return {\r\n                  state: 'parsererror',\r\n                  error: conv ? e : 'No conversion from ' + prev + ' to ' + current\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { state: 'success', data: response }\r\n  }\r\n\r\n  jQuery.extend({\r\n\r\n    // Counter for holding the number of active queries\r\n    active: 0,\r\n\r\n    // Last-Modified header cache for next request\r\n    lastModified: {},\r\n    etag: {},\r\n\r\n    ajaxSettings: {\r\n      url: location.href,\r\n      type: 'GET',\r\n      isLocal: rlocalProtocol.test(location.protocol),\r\n      global: true,\r\n      processData: true,\r\n      async: true,\r\n      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\r\n\r\n      /*\r\n\t\ttimeout: 0,\r\n\t\tdata: null,\r\n\t\tdataType: null,\r\n\t\tusername: null,\r\n\t\tpassword: null,\r\n\t\tcache: null,\r\n\t\tthrows: false,\r\n\t\ttraditional: false,\r\n\t\theaders: {},\r\n\t\t*/\r\n\r\n      accepts: {\r\n        '*': allTypes,\r\n        text: 'text/plain',\r\n        html: 'text/html',\r\n        xml: 'application/xml, text/xml',\r\n        json: 'application/json, text/javascript'\r\n      },\r\n\r\n      contents: {\r\n        xml: /\\bxml\\b/,\r\n        html: /\\bhtml/,\r\n        json: /\\bjson\\b/\r\n      },\r\n\r\n      responseFields: {\r\n        xml: 'responseXML',\r\n        text: 'responseText',\r\n        json: 'responseJSON'\r\n      },\r\n\r\n      // Data converters\r\n      // Keys separate source (or catchall \"*\") and destination types with a single space\r\n      converters: {\r\n\r\n        // Convert anything to text\r\n        '* text': String,\r\n\r\n        // Text to html (true = no transformation)\r\n        'text html': true,\r\n\r\n        // Evaluate text as a json expression\r\n        'text json': JSON.parse,\r\n\r\n        // Parse text as xml\r\n        'text xml': jQuery.parseXML\r\n      },\r\n\r\n      // For options that shouldn't be deep extended:\r\n      // you can add your own custom options here if\r\n      // and when you create one that shouldn't be\r\n      // deep extended (see ajaxExtend)\r\n      flatOptions: {\r\n        url: true,\r\n        context: true\r\n      }\r\n    },\r\n\r\n    // Creates a full fledged settings object into target\r\n    // with both ajaxSettings and settings fields.\r\n    // If target is omitted, writes into ajaxSettings.\r\n    ajaxSetup: function (target, settings) {\r\n      return settings\r\n\r\n      // Building a settings object\r\n        ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)\r\n\r\n      // Extending ajaxSettings\r\n        : ajaxExtend(jQuery.ajaxSettings, target)\r\n    },\r\n\r\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\r\n    ajaxTransport: addToPrefiltersOrTransports(transports),\r\n\r\n    // Main method\r\n    ajax: function (url, options) {\r\n      // If url is an object, simulate pre-1.5 signature\r\n      if (typeof url === 'object') {\r\n        options = url\r\n        url = undefined\r\n      }\r\n\r\n      // Force options to be an object\r\n      options = options || {}\r\n\r\n      let transport\r\n\r\n      // URL without anti-cache param\r\n      let cacheURL\r\n\r\n      // Response headers\r\n      let responseHeadersString\r\n      let responseHeaders\r\n\r\n      // timeout handle\r\n      let timeoutTimer\r\n\r\n      // Url cleanup var\r\n      let urlAnchor\r\n\r\n      // Request state (becomes false upon send and true upon completion)\r\n      let completed\r\n\r\n      // To know if global events are to be dispatched\r\n      let fireGlobals\r\n\r\n      // Loop variable\r\n      let i\r\n\r\n      // uncached part of the url\r\n      let uncached\r\n\r\n      // Create the final options object\r\n      const s = jQuery.ajaxSetup({}, options)\r\n\r\n      // Callbacks context\r\n      const callbackContext = s.context || s\r\n\r\n      // Context for global events is callbackContext if it is a DOM node or jQuery collection\r\n      const globalEventContext = s.context &&\r\n\t\t\t\t(callbackContext.nodeType || callbackContext.jquery)\r\n        ? jQuery(callbackContext)\r\n        : jQuery.event\r\n\r\n      // Deferreds\r\n      const deferred = jQuery.Deferred()\r\n      const completeDeferred = jQuery.Callbacks('once memory')\r\n\r\n      // Status-dependent callbacks\r\n      let statusCode = s.statusCode || {}\r\n\r\n      // Headers (they are sent all at once)\r\n      const requestHeaders = {}\r\n      const requestHeadersNames = {}\r\n\r\n      // Default abort message\r\n      let strAbort = 'canceled'\r\n\r\n      // Fake xhr\r\n      var jqXHR = {\r\n        readyState: 0,\r\n\r\n        // Builds headers hashtable if needed\r\n        getResponseHeader: function (key) {\r\n          let match\r\n          if (completed) {\r\n            if (!responseHeaders) {\r\n              responseHeaders = {}\r\n              while ((match = rheaders.exec(responseHeadersString))) {\r\n                responseHeaders[match[1].toLowerCase() + ' '] =\r\n\t\t\t\t\t\t\t\t\t(responseHeaders[match[1].toLowerCase() + ' '] || [])\r\n\t\t\t\t\t\t\t\t\t  .concat(match[2])\r\n              }\r\n            }\r\n            match = responseHeaders[key.toLowerCase() + ' ']\r\n          }\r\n          return match == null ? null : match.join(', ')\r\n        },\r\n\r\n        // Raw string\r\n        getAllResponseHeaders: function () {\r\n          return completed ? responseHeadersString : null\r\n        },\r\n\r\n        // Caches the header\r\n        setRequestHeader: function (name, value) {\r\n          if (completed == null) {\r\n            name = requestHeadersNames[name.toLowerCase()] =\r\n\t\t\t\t\t\t\trequestHeadersNames[name.toLowerCase()] || name\r\n            requestHeaders[name] = value\r\n          }\r\n          return this\r\n        },\r\n\r\n        // Overrides response content-type header\r\n        overrideMimeType: function (type) {\r\n          if (completed == null) {\r\n            s.mimeType = type\r\n          }\r\n          return this\r\n        },\r\n\r\n        // Status-dependent callbacks\r\n        statusCode: function (map) {\r\n          let code\r\n          if (map) {\r\n            if (completed) {\r\n              // Execute the appropriate callbacks\r\n              jqXHR.always(map[jqXHR.status])\r\n            } else {\r\n              // Lazy-add the new callbacks in a way that preserves old ones\r\n              for (code in map) {\r\n                statusCode[code] = [statusCode[code], map[code]]\r\n              }\r\n            }\r\n          }\r\n          return this\r\n        },\r\n\r\n        // Cancel the request\r\n        abort: function (statusText) {\r\n          const finalText = statusText || strAbort\r\n          if (transport) {\r\n            transport.abort(finalText)\r\n          }\r\n          done(0, finalText)\r\n          return this\r\n        }\r\n      }\r\n\r\n      // Attach deferreds\r\n      deferred.promise(jqXHR)\r\n\r\n      // Add protocol if not provided (prefilters might expect it)\r\n      // Handle falsy url in the settings object (trac-10093: consistency with old signature)\r\n      // We also use the url parameter if available\r\n      s.url = ((url || s.url || location.href) + '')\r\n        .replace(rprotocol, location.protocol + '//')\r\n\r\n      // Alias method option to type as per ticket trac-12004\r\n      s.type = options.method || options.type || s.method || s.type\r\n\r\n      // Extract dataTypes list\r\n      s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || ['']\r\n\r\n      // A cross-domain request is in order when the origin doesn't match the current origin.\r\n      if (s.crossDomain == null) {\r\n        urlAnchor = document.createElement('a')\r\n\r\n        // Support: IE <=8 - 11, Edge 12 - 15\r\n        // IE throws exception on accessing the href property if url is malformed,\r\n        // e.g. http://example.com:80x/\r\n        try {\r\n          urlAnchor.href = s.url\r\n\r\n          // Support: IE <=8 - 11 only\r\n          // Anchor's host property isn't correctly set when s.url is relative\r\n          urlAnchor.href = urlAnchor.href\r\n          s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !==\r\n\t\t\t\t\turlAnchor.protocol + '//' + urlAnchor.host\r\n        } catch (e) {\r\n          // If there is an error parsing the URL, assume it is crossDomain,\r\n          // it can be rejected by the transport if it is invalid\r\n          s.crossDomain = true\r\n        }\r\n      }\r\n\r\n      // Convert data if not already a string\r\n      if (s.data && s.processData && typeof s.data !== 'string') {\r\n        s.data = jQuery.param(s.data, s.traditional)\r\n      }\r\n\r\n      // Apply prefilters\r\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR)\r\n\r\n      // If request was aborted inside a prefilter, stop there\r\n      if (completed) {\r\n        return jqXHR\r\n      }\r\n\r\n      // We can fire global events as of now if asked to\r\n      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\r\n      fireGlobals = jQuery.event && s.global\r\n\r\n      // Watch for a new set of requests\r\n      if (fireGlobals && jQuery.active++ === 0) {\r\n        jQuery.event.trigger('ajaxStart')\r\n      }\r\n\r\n      // Uppercase the type\r\n      s.type = s.type.toUpperCase()\r\n\r\n      // Determine if request has content\r\n      s.hasContent = !rnoContent.test(s.type)\r\n\r\n      // Save the URL in case we're toying with the If-Modified-Since\r\n      // and/or If-None-Match header later on\r\n      // Remove hash to simplify url manipulation\r\n      cacheURL = s.url.replace(rhash, '')\r\n\r\n      // More options handling for requests with no content\r\n      if (!s.hasContent) {\r\n        // Remember the hash so we can put it back\r\n        uncached = s.url.slice(cacheURL.length)\r\n\r\n        // If data is available and should be processed, append data to url\r\n        if (s.data && (s.processData || typeof s.data === 'string')) {\r\n          cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data\r\n\r\n          // trac-9682: remove data so that it's not used in an eventual retry\r\n          delete s.data\r\n        }\r\n\r\n        // Add or update anti-cache param if needed\r\n        if (s.cache === false) {\r\n          cacheURL = cacheURL.replace(rantiCache, '$1')\r\n          uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + (nonce.guid++) +\r\n\t\t\t\t\tuncached\r\n        }\r\n\r\n        // Put hash and anti-cache on the URL that will be requested (gh-1732)\r\n        s.url = cacheURL + uncached\r\n\r\n        // Change '%20' to '+' if this is encoded form body content (gh-2658)\r\n      } else if (s.data && s.processData &&\r\n\t\t\t(s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {\r\n        s.data = s.data.replace(r20, '+')\r\n      }\r\n\r\n      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n      if (s.ifModified) {\r\n        if (jQuery.lastModified[cacheURL]) {\r\n          jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL])\r\n        }\r\n        if (jQuery.etag[cacheURL]) {\r\n          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL])\r\n        }\r\n      }\r\n\r\n      // Set the correct header, if data is being sent\r\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\r\n        jqXHR.setRequestHeader('Content-Type', s.contentType)\r\n      }\r\n\r\n      // Set the Accepts header for the server, depending on the dataType\r\n      jqXHR.setRequestHeader(\r\n        'Accept',\r\n        s.dataTypes[0] && s.accepts[s.dataTypes[0]]\r\n          ? s.accepts[s.dataTypes[0]] +\r\n\t\t\t\t\t(s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '')\r\n          : s.accepts['*']\r\n      )\r\n\r\n      // Check for headers option\r\n      for (i in s.headers) {\r\n        jqXHR.setRequestHeader(i, s.headers[i])\r\n      }\r\n\r\n      // Allow custom headers/mimetypes and early abort\r\n      if (s.beforeSend &&\r\n\t\t\t(s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\r\n        // Abort if not done already and return\r\n        return jqXHR.abort()\r\n      }\r\n\r\n      // Aborting is no longer a cancellation\r\n      strAbort = 'abort'\r\n\r\n      // Install callbacks on deferreds\r\n      completeDeferred.add(s.complete)\r\n      jqXHR.done(s.success)\r\n      jqXHR.fail(s.error)\r\n\r\n      // Get transport\r\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR)\r\n\r\n      // If no transport, we auto-abort\r\n      if (!transport) {\r\n        done(-1, 'No Transport')\r\n      } else {\r\n        jqXHR.readyState = 1\r\n\r\n        // Send global event\r\n        if (fireGlobals) {\r\n          globalEventContext.trigger('ajaxSend', [jqXHR, s])\r\n        }\r\n\r\n        // If request was aborted inside ajaxSend, stop there\r\n        if (completed) {\r\n          return jqXHR\r\n        }\r\n\r\n        // Timeout\r\n        if (s.async && s.timeout > 0) {\r\n          timeoutTimer = window.setTimeout(function () {\r\n            jqXHR.abort('timeout')\r\n          }, s.timeout)\r\n        }\r\n\r\n        try {\r\n          completed = false\r\n          transport.send(requestHeaders, done)\r\n        } catch (e) {\r\n          // Rethrow post-completion exceptions\r\n          if (completed) {\r\n            throw e\r\n          }\r\n\r\n          // Propagate others as results\r\n          done(-1, e)\r\n        }\r\n      }\r\n\r\n      // Callback for when everything is done\r\n      function done (status, nativeStatusText, responses, headers) {\r\n        let isSuccess; let success; let error; let response; let modified\r\n        let statusText = nativeStatusText\r\n\r\n        // Ignore repeat invocations\r\n        if (completed) {\r\n          return\r\n        }\r\n\r\n        completed = true\r\n\r\n        // Clear timeout if it exists\r\n        if (timeoutTimer) {\r\n          window.clearTimeout(timeoutTimer)\r\n        }\r\n\r\n        // Dereference transport for early garbage collection\r\n        // (no matter how long the jqXHR object will be used)\r\n        transport = undefined\r\n\r\n        // Cache response headers\r\n        responseHeadersString = headers || ''\r\n\r\n        // Set readyState\r\n        jqXHR.readyState = status > 0 ? 4 : 0\r\n\r\n        // Determine if successful\r\n        isSuccess = status >= 200 && status < 300 || status === 304\r\n\r\n        // Get response data\r\n        if (responses) {\r\n          response = ajaxHandleResponses(s, jqXHR, responses)\r\n        }\r\n\r\n        // Use a noop converter for missing script but not if jsonp\r\n        if (!isSuccess &&\r\n\t\t\t\tjQuery.inArray('script', s.dataTypes) > -1 &&\r\n\t\t\t\tjQuery.inArray('json', s.dataTypes) < 0) {\r\n          s.converters['text script'] = function () {}\r\n        }\r\n\r\n        // Convert no matter what (that way responseXXX fields are always set)\r\n        response = ajaxConvert(s, response, jqXHR, isSuccess)\r\n\r\n        // If successful, handle type chaining\r\n        if (isSuccess) {\r\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n          if (s.ifModified) {\r\n            modified = jqXHR.getResponseHeader('Last-Modified')\r\n            if (modified) {\r\n              jQuery.lastModified[cacheURL] = modified\r\n            }\r\n            modified = jqXHR.getResponseHeader('etag')\r\n            if (modified) {\r\n              jQuery.etag[cacheURL] = modified\r\n            }\r\n          }\r\n\r\n          // if no content\r\n          if (status === 204 || s.type === 'HEAD') {\r\n            statusText = 'nocontent'\r\n\r\n            // if not modified\r\n          } else if (status === 304) {\r\n            statusText = 'notmodified'\r\n\r\n            // If we have data, let's convert it\r\n          } else {\r\n            statusText = response.state\r\n            success = response.data\r\n            error = response.error\r\n            isSuccess = !error\r\n          }\r\n        } else {\r\n          // Extract error from statusText and normalize for non-aborts\r\n          error = statusText\r\n          if (status || !statusText) {\r\n            statusText = 'error'\r\n            if (status < 0) {\r\n              status = 0\r\n            }\r\n          }\r\n        }\r\n\r\n        // Set data for the fake xhr object\r\n        jqXHR.status = status\r\n        jqXHR.statusText = (nativeStatusText || statusText) + ''\r\n\r\n        // Success/Error\r\n        if (isSuccess) {\r\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR])\r\n        } else {\r\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error])\r\n        }\r\n\r\n        // Status-dependent callbacks\r\n        jqXHR.statusCode(statusCode)\r\n        statusCode = undefined\r\n\r\n        if (fireGlobals) {\r\n          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError',\r\n            [jqXHR, s, isSuccess ? success : error])\r\n        }\r\n\r\n        // Complete\r\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText])\r\n\r\n        if (fireGlobals) {\r\n          globalEventContext.trigger('ajaxComplete', [jqXHR, s])\r\n\r\n          // Handle the global AJAX counter\r\n          if (!(--jQuery.active)) {\r\n            jQuery.event.trigger('ajaxStop')\r\n          }\r\n        }\r\n      }\r\n\r\n      return jqXHR\r\n    },\r\n\r\n    getJSON: function (url, data, callback) {\r\n      return jQuery.get(url, data, callback, 'json')\r\n    },\r\n\r\n    getScript: function (url, callback) {\r\n      return jQuery.get(url, undefined, callback, 'script')\r\n    }\r\n  })\r\n\r\n  jQuery.each(['get', 'post'], function (_i, method) {\r\n    jQuery[method] = function (url, data, callback, type) {\r\n      // Shift arguments if data argument was omitted\r\n      if (isFunction(data)) {\r\n        type = type || callback\r\n        callback = data\r\n        data = undefined\r\n      }\r\n\r\n      // The url can be an options object (which then must have .url)\r\n      return jQuery.ajax(jQuery.extend({\r\n        url,\r\n        type: method,\r\n        dataType: type,\r\n        data,\r\n        success: callback\r\n      }, jQuery.isPlainObject(url) && url))\r\n    }\r\n  })\r\n\r\n  jQuery.ajaxPrefilter(function (s) {\r\n    let i\r\n    for (i in s.headers) {\r\n      if (i.toLowerCase() === 'content-type') {\r\n        s.contentType = s.headers[i] || ''\r\n      }\r\n    }\r\n  })\r\n\r\n  jQuery._evalUrl = function (url, options, doc) {\r\n    return jQuery.ajax({\r\n      url,\r\n\r\n      // Make this explicit, since user can override this through ajaxSetup (trac-11264)\r\n      type: 'GET',\r\n      dataType: 'script',\r\n      cache: true,\r\n      async: false,\r\n      global: false,\r\n\r\n      // Only evaluate the response if it is successful (gh-4126)\r\n      // dataFilter is not invoked for failure responses, so using it instead\r\n      // of the default converter is kludgy but it works.\r\n      converters: {\r\n        'text script': function () {}\r\n      },\r\n      dataFilter: function (response) {\r\n        jQuery.globalEval(response, options, doc)\r\n      }\r\n    })\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n    wrapAll: function (html) {\r\n      let wrap\r\n\r\n      if (this[0]) {\r\n        if (isFunction(html)) {\r\n          html = html.call(this[0])\r\n        }\r\n\r\n        // The elements to wrap the target around\r\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true)\r\n\r\n        if (this[0].parentNode) {\r\n          wrap.insertBefore(this[0])\r\n        }\r\n\r\n        wrap.map(function () {\r\n          let elem = this\r\n\r\n          while (elem.firstElementChild) {\r\n            elem = elem.firstElementChild\r\n          }\r\n\r\n          return elem\r\n        }).append(this)\r\n      }\r\n\r\n      return this\r\n    },\r\n\r\n    wrapInner: function (html) {\r\n      if (isFunction(html)) {\r\n        return this.each(function (i) {\r\n          jQuery(this).wrapInner(html.call(this, i))\r\n        })\r\n      }\r\n\r\n      return this.each(function () {\r\n        const self = jQuery(this)\r\n        const contents = self.contents()\r\n\r\n        if (contents.length) {\r\n          contents.wrapAll(html)\r\n        } else {\r\n          self.append(html)\r\n        }\r\n      })\r\n    },\r\n\r\n    wrap: function (html) {\r\n      const htmlIsFunction = isFunction(html)\r\n\r\n      return this.each(function (i) {\r\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html)\r\n      })\r\n    },\r\n\r\n    unwrap: function (selector) {\r\n      this.parent(selector).not('body').each(function () {\r\n        jQuery(this).replaceWith(this.childNodes)\r\n      })\r\n      return this\r\n    }\r\n  })\r\n\r\n  jQuery.expr.pseudos.hidden = function (elem) {\r\n    return !jQuery.expr.pseudos.visible(elem)\r\n  }\r\n  jQuery.expr.pseudos.visible = function (elem) {\r\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length)\r\n  }\r\n\r\n  jQuery.ajaxSettings.xhr = function () {\r\n    try {\r\n      return new window.XMLHttpRequest()\r\n    } catch (e) {}\r\n  }\r\n\r\n  const xhrSuccessStatus = {\r\n\r\n    // File protocol always yields status code 0, assume 200\r\n    0: 200,\r\n\r\n    // Support: IE <=9 only\r\n    // trac-1450: sometimes IE returns 1223 when it should be 204\r\n    1223: 204\r\n  }\r\n  let xhrSupported = jQuery.ajaxSettings.xhr()\r\n\r\n  support.cors = !!xhrSupported && ('withCredentials' in xhrSupported)\r\n  support.ajax = xhrSupported = !!xhrSupported\r\n\r\n  jQuery.ajaxTransport(function (options) {\r\n    let callback, errorCallback\r\n\r\n    // Cross domain only allowed if supported through XMLHttpRequest\r\n    if (support.cors || xhrSupported && !options.crossDomain) {\r\n      return {\r\n        send: function (headers, complete) {\r\n          let i\r\n          const xhr = options.xhr()\r\n\r\n          xhr.open(\r\n            options.type,\r\n            options.url,\r\n            options.async,\r\n            options.username,\r\n            options.password\r\n          )\r\n\r\n          // Apply custom fields if provided\r\n          if (options.xhrFields) {\r\n            for (i in options.xhrFields) {\r\n              xhr[i] = options.xhrFields[i]\r\n            }\r\n          }\r\n\r\n          // Override mime type if needed\r\n          if (options.mimeType && xhr.overrideMimeType) {\r\n            xhr.overrideMimeType(options.mimeType)\r\n          }\r\n\r\n          // X-Requested-With header\r\n          // For cross-domain requests, seeing as conditions for a preflight are\r\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\r\n          // (it can always be set on a per-request basis or even using ajaxSetup)\r\n          // For same-domain requests, won't change header if already provided.\r\n          if (!options.crossDomain && !headers['X-Requested-With']) {\r\n            headers['X-Requested-With'] = 'XMLHttpRequest'\r\n          }\r\n\r\n          // Set headers\r\n          for (i in headers) {\r\n            xhr.setRequestHeader(i, headers[i])\r\n          }\r\n\r\n          // Callback\r\n          callback = function (type) {\r\n            return function () {\r\n              if (callback) {\r\n                callback = errorCallback = xhr.onload =\r\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\r\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null\r\n\r\n                if (type === 'abort') {\r\n                  xhr.abort()\r\n                } else if (type === 'error') {\r\n                  // Support: IE <=9 only\r\n                  // On a manual native abort, IE9 throws\r\n                  // errors on any property access that is not readyState\r\n                  if (typeof xhr.status !== 'number') {\r\n                    complete(0, 'error')\r\n                  } else {\r\n                    complete(\r\n\r\n                      // File: protocol always yields status 0; see trac-8605, trac-14207\r\n                      xhr.status,\r\n                      xhr.statusText\r\n                    )\r\n                  }\r\n                } else {\r\n                  complete(\r\n                    xhrSuccessStatus[xhr.status] || xhr.status,\r\n                    xhr.statusText,\r\n\r\n                    // Support: IE <=9 only\r\n                    // IE9 has no XHR2 but throws on binary (trac-11426)\r\n                    // For XHR2 non-text, let the caller handle it (gh-2498)\r\n                    (xhr.responseType || 'text') !== 'text' ||\r\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== 'string'\r\n                      ? { binary: xhr.response }\r\n                      : { text: xhr.responseText },\r\n                    xhr.getAllResponseHeaders()\r\n                  )\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Listen to events\r\n          xhr.onload = callback()\r\n          errorCallback = xhr.onerror = xhr.ontimeout = callback('error')\r\n\r\n          // Support: IE 9 only\r\n          // Use onreadystatechange to replace onabort\r\n          // to handle uncaught aborts\r\n          if (xhr.onabort !== undefined) {\r\n            xhr.onabort = errorCallback\r\n          } else {\r\n            xhr.onreadystatechange = function () {\r\n              // Check readyState before timeout as it changes\r\n              if (xhr.readyState === 4) {\r\n                // Allow onerror to be called first,\r\n                // but that will not handle a native abort\r\n                // Also, save errorCallback to a variable\r\n                // as xhr.onerror cannot be accessed\r\n                window.setTimeout(function () {\r\n                  if (callback) {\r\n                    errorCallback()\r\n                  }\r\n                })\r\n              }\r\n            }\r\n          }\r\n\r\n          // Create the abort callback\r\n          callback = callback('abort')\r\n\r\n          try {\r\n            // Do send the request (this may raise an exception)\r\n            xhr.send(options.hasContent && options.data || null)\r\n          } catch (e) {\r\n            // trac-14683: Only rethrow if this hasn't been notified as an error yet\r\n            if (callback) {\r\n              throw e\r\n            }\r\n          }\r\n        },\r\n\r\n        abort: function () {\r\n          if (callback) {\r\n            callback()\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\r\n  jQuery.ajaxPrefilter(function (s) {\r\n    if (s.crossDomain) {\r\n      s.contents.script = false\r\n    }\r\n  })\r\n\r\n  // Install script dataType\r\n  jQuery.ajaxSetup({\r\n    accepts: {\r\n      script: 'text/javascript, application/javascript, ' +\r\n\t\t\t'application/ecmascript, application/x-ecmascript'\r\n    },\r\n    contents: {\r\n      script: /\\b(?:java|ecma)script\\b/\r\n    },\r\n    converters: {\r\n      'text script': function (text) {\r\n        jQuery.globalEval(text)\r\n        return text\r\n      }\r\n    }\r\n  })\r\n\r\n  // Handle cache's special case and crossDomain\r\n  jQuery.ajaxPrefilter('script', function (s) {\r\n    if (s.cache === undefined) {\r\n      s.cache = false\r\n    }\r\n    if (s.crossDomain) {\r\n      s.type = 'GET'\r\n    }\r\n  })\r\n\r\n  // Bind script tag hack transport\r\n  jQuery.ajaxTransport('script', function (s) {\r\n    // This transport only deals with cross domain or forced-by-attrs requests\r\n    if (s.crossDomain || s.scriptAttrs) {\r\n      let script, callback\r\n      return {\r\n        send: function (_, complete) {\r\n          script = jQuery('<script>')\r\n            .attr(s.scriptAttrs || {})\r\n            .prop({ charset: s.scriptCharset, src: s.url })\r\n            .on('load error', callback = function (evt) {\r\n              script.remove()\r\n              callback = null\r\n              if (evt) {\r\n                complete(evt.type === 'error' ? 404 : 200, evt.type)\r\n              }\r\n            })\r\n\r\n          // Use native DOM manipulation to avoid our domManip AJAX trickery\r\n          document.head.appendChild(script[0])\r\n        },\r\n        abort: function () {\r\n          if (callback) {\r\n            callback()\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  const oldCallbacks = []\r\n  const rjsonp = /(=)\\?(?=&|$)|\\?\\?/\r\n\r\n  // Default jsonp settings\r\n  jQuery.ajaxSetup({\r\n    jsonp: 'callback',\r\n    jsonpCallback: function () {\r\n      const callback = oldCallbacks.pop() || (jQuery.expando + '_' + (nonce.guid++))\r\n      this[callback] = true\r\n      return callback\r\n    }\r\n  })\r\n\r\n  // Detect, normalize options and install callbacks for jsonp requests\r\n  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {\r\n    let callbackName; let overwritten; let responseContainer\r\n    const jsonProp = s.jsonp !== false && (rjsonp.test(s.url)\r\n      ? 'url'\r\n      : typeof s.data === 'string' &&\r\n\t\t\t\t(s.contentType || '')\r\n\t\t\t\t  .indexOf('application/x-www-form-urlencoded') === 0 &&\r\n\t\t\t\trjsonp.test(s.data) && 'data'\r\n    )\r\n\r\n    // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\r\n    if (jsonProp || s.dataTypes[0] === 'jsonp') {\r\n      // Get callback name, remembering preexisting value associated with it\r\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)\r\n        ? s.jsonpCallback()\r\n        : s.jsonpCallback\r\n\r\n      // Insert callback into url or form data\r\n      if (jsonProp) {\r\n        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName)\r\n      } else if (s.jsonp !== false) {\r\n        s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName\r\n      }\r\n\r\n      // Use data converter to retrieve json after script execution\r\n      s.converters['script json'] = function () {\r\n        if (!responseContainer) {\r\n          jQuery.error(callbackName + ' was not called')\r\n        }\r\n        return responseContainer[0]\r\n      }\r\n\r\n      // Force json dataType\r\n      s.dataTypes[0] = 'json'\r\n\r\n      // Install callback\r\n      overwritten = window[callbackName]\r\n      window[callbackName] = function () {\r\n        responseContainer = arguments\r\n      }\r\n\r\n      // Clean-up function (fires after converters)\r\n      jqXHR.always(function () {\r\n        // If previous value didn't exist - remove it\r\n        if (overwritten === undefined) {\r\n          jQuery(window).removeProp(callbackName)\r\n\r\n          // Otherwise restore preexisting value\r\n        } else {\r\n          window[callbackName] = overwritten\r\n        }\r\n\r\n        // Save back as free\r\n        if (s[callbackName]) {\r\n          // Make sure that re-using the options doesn't screw things around\r\n          s.jsonpCallback = originalSettings.jsonpCallback\r\n\r\n          // Save the callback name for future use\r\n          oldCallbacks.push(callbackName)\r\n        }\r\n\r\n        // Call if it was a function and we have a response\r\n        if (responseContainer && isFunction(overwritten)) {\r\n          overwritten(responseContainer[0])\r\n        }\r\n\r\n        responseContainer = overwritten = undefined\r\n      })\r\n\r\n      // Delegate to script\r\n      return 'script'\r\n    }\r\n  })\r\n\r\n  // Support: Safari 8 only\r\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\r\n  // collapse sibling forms: the second one becomes a child of the first one.\r\n  // Because of that, this security measure has to be disabled in Safari 8.\r\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\r\n  support.createHTMLDocument = (function () {\r\n    const body = document.implementation.createHTMLDocument('').body\r\n    body.innerHTML = '<form></form><form></form>'\r\n    return body.childNodes.length === 2\r\n  })()\r\n\r\n  // Argument \"data\" should be string of html\r\n  // context (optional): If specified, the fragment will be created in this context,\r\n  // defaults to document\r\n  // keepScripts (optional): If true, will include scripts passed in the html string\r\n  jQuery.parseHTML = function (data, context, keepScripts) {\r\n    if (typeof data !== 'string') {\r\n      return []\r\n    }\r\n    if (typeof context === 'boolean') {\r\n      keepScripts = context\r\n      context = false\r\n    }\r\n\r\n    let base, parsed, scripts\r\n\r\n    if (!context) {\r\n      // Stop scripts or inline event handlers from being executed immediately\r\n      // by using document.implementation\r\n      if (support.createHTMLDocument) {\r\n        context = document.implementation.createHTMLDocument('')\r\n\r\n        // Set the base href for the created document\r\n        // so any parsed elements with URLs\r\n        // are based on the document's URL (gh-2965)\r\n        base = context.createElement('base')\r\n        base.href = document.location.href\r\n        context.head.appendChild(base)\r\n      } else {\r\n        context = document\r\n      }\r\n    }\r\n\r\n    parsed = rsingleTag.exec(data)\r\n    scripts = !keepScripts && []\r\n\r\n    // Single tag\r\n    if (parsed) {\r\n      return [context.createElement(parsed[1])]\r\n    }\r\n\r\n    parsed = buildFragment([data], context, scripts)\r\n\r\n    if (scripts && scripts.length) {\r\n      jQuery(scripts).remove()\r\n    }\r\n\r\n    return jQuery.merge([], parsed.childNodes)\r\n  }\r\n\r\n  /**\r\n * Load a url into a page\r\n */\r\n  jQuery.fn.load = function (url, params, callback) {\r\n    let selector; let type; let response\r\n    const self = this\r\n    const off = url.indexOf(' ')\r\n\r\n    if (off > -1) {\r\n      selector = stripAndCollapse(url.slice(off))\r\n      url = url.slice(0, off)\r\n    }\r\n\r\n    // If it's a function\r\n    if (isFunction(params)) {\r\n      // We assume that it's the callback\r\n      callback = params\r\n      params = undefined\r\n\r\n      // Otherwise, build a param string\r\n    } else if (params && typeof params === 'object') {\r\n      type = 'POST'\r\n    }\r\n\r\n    // If we have elements to modify, make the request\r\n    if (self.length > 0) {\r\n      jQuery.ajax({\r\n        url,\r\n\r\n        // If \"type\" variable is undefined, then \"GET\" method will be used.\r\n        // Make value of this field explicit since\r\n        // user can override it through ajaxSetup method\r\n        type: type || 'GET',\r\n        dataType: 'html',\r\n        data: params\r\n      }).done(function (responseText) {\r\n        // Save response for use in complete callback\r\n        response = arguments\r\n\r\n        self.html(selector\r\n\r\n        // If a selector was specified, locate the right elements in a dummy div\r\n        // Exclude scripts to avoid IE 'Permission Denied' errors\r\n          ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector)\r\n\r\n        // Otherwise use the full result\r\n          : responseText)\r\n\r\n        // If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\r\n        // but they are ignored because response was set above.\r\n        // If it fails, this function gets \"jqXHR\", \"status\", \"error\"\r\n      }).always(callback && function (jqXHR, status) {\r\n        self.each(function () {\r\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR])\r\n        })\r\n      })\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  jQuery.expr.pseudos.animated = function (elem) {\r\n    return jQuery.grep(jQuery.timers, function (fn) {\r\n      return elem === fn.elem\r\n    }).length\r\n  }\r\n\r\n  jQuery.offset = {\r\n    setOffset: function (elem, options, i) {\r\n      let curPosition; let curLeft; let curCSSTop; let curTop; let curOffset; let curCSSLeft; let calculatePosition\r\n      const position = jQuery.css(elem, 'position')\r\n      const curElem = jQuery(elem)\r\n      const props = {}\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        elem.style.position = 'relative'\r\n      }\r\n\r\n      curOffset = curElem.offset()\r\n      curCSSTop = jQuery.css(elem, 'top')\r\n      curCSSLeft = jQuery.css(elem, 'left')\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n\t\t\t(curCSSTop + curCSSLeft).indexOf('auto') > -1\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = curElem.position()\r\n        curTop = curPosition.top\r\n        curLeft = curPosition.left\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0\r\n        curLeft = parseFloat(curCSSLeft) || 0\r\n      }\r\n\r\n      if (isFunction(options)) {\r\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\r\n        options = options.call(elem, i, jQuery.extend({}, curOffset))\r\n      }\r\n\r\n      if (options.top != null) {\r\n        props.top = (options.top - curOffset.top) + curTop\r\n      }\r\n      if (options.left != null) {\r\n        props.left = (options.left - curOffset.left) + curLeft\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(elem, props)\r\n      } else {\r\n        curElem.css(props)\r\n      }\r\n    }\r\n  }\r\n\r\n  jQuery.fn.extend({\r\n\r\n    // offset() relates an element's border box to the document origin\r\n    offset: function (options) {\r\n      // Preserve chaining for setter\r\n      if (arguments.length) {\r\n        return options === undefined\r\n          ? this\r\n          : this.each(function (i) {\r\n            jQuery.offset.setOffset(this, options, i)\r\n          })\r\n      }\r\n\r\n      let rect; let win\r\n      const elem = this[0]\r\n\r\n      if (!elem) {\r\n        return\r\n      }\r\n\r\n      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\r\n      // Support: IE <=11 only\r\n      // Running getBoundingClientRect on a\r\n      // disconnected node in IE throws an error\r\n      if (!elem.getClientRects().length) {\r\n        return { top: 0, left: 0 }\r\n      }\r\n\r\n      // Get document-relative position by adding viewport scroll to viewport-relative gBCR\r\n      rect = elem.getBoundingClientRect()\r\n      win = elem.ownerDocument.defaultView\r\n      return {\r\n        top: rect.top + win.pageYOffset,\r\n        left: rect.left + win.pageXOffset\r\n      }\r\n    },\r\n\r\n    // position() relates an element's margin box to its offset parent's padding box\r\n    // This corresponds to the behavior of CSS absolute positioning\r\n    position: function () {\r\n      if (!this[0]) {\r\n        return\r\n      }\r\n\r\n      let offsetParent; let offset; let doc\r\n      const elem = this[0]\r\n      let parentOffset = { top: 0, left: 0 }\r\n\r\n      // position:fixed elements are offset from the viewport, which itself always has zero offset\r\n      if (jQuery.css(elem, 'position') === 'fixed') {\r\n        // Assume position:fixed implies availability of getBoundingClientRect\r\n        offset = elem.getBoundingClientRect()\r\n      } else {\r\n        offset = this.offset()\r\n\r\n        // Account for the *real* offset parent, which can be the document or its root element\r\n        // when a statically positioned element is identified\r\n        doc = elem.ownerDocument\r\n        offsetParent = elem.offsetParent || doc.documentElement\r\n        while (offsetParent &&\r\n\t\t\t\t(offsetParent === doc.body || offsetParent === doc.documentElement) &&\r\n\t\t\t\tjQuery.css(offsetParent, 'position') === 'static') {\r\n          offsetParent = offsetParent.parentNode\r\n        }\r\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\r\n          // Incorporate borders into its offset, since they are outside its content origin\r\n          parentOffset = jQuery(offsetParent).offset()\r\n          parentOffset.top += jQuery.css(offsetParent, 'borderTopWidth', true)\r\n          parentOffset.left += jQuery.css(offsetParent, 'borderLeftWidth', true)\r\n        }\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),\r\n        left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)\r\n      }\r\n    },\r\n\r\n    // This method will return documentElement in the following cases:\r\n    // 1) For the element inside the iframe without offsetParent, this method will return\r\n    //    documentElement of the parent window\r\n    // 2) For the hidden or detached element\r\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\r\n    //\r\n    // but those exceptions were never presented as a real life use-cases\r\n    // and might be considered as more preferable results.\r\n    //\r\n    // This logic, however, is not guaranteed and can change at any point in the future\r\n    offsetParent: function () {\r\n      return this.map(function () {\r\n        let offsetParent = this.offsetParent\r\n\r\n        while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {\r\n          offsetParent = offsetParent.offsetParent\r\n        }\r\n\r\n        return offsetParent || documentElement\r\n      })\r\n    }\r\n  })\r\n\r\n  // Create scrollLeft and scrollTop methods\r\n  jQuery.each({ scrollLeft: 'pageXOffset', scrollTop: 'pageYOffset' }, function (method, prop) {\r\n    const top = prop === 'pageYOffset'\r\n\r\n    jQuery.fn[method] = function (val) {\r\n      return access(this, function (elem, method, val) {\r\n        // Coalesce documents and windows\r\n        let win\r\n        if (isWindow(elem)) {\r\n          win = elem\r\n        } else if (elem.nodeType === 9) {\r\n          win = elem.defaultView\r\n        }\r\n\r\n        if (val === undefined) {\r\n          return win ? win[prop] : elem[method]\r\n        }\r\n\r\n        if (win) {\r\n          win.scrollTo(\r\n            !top ? val : win.pageXOffset,\r\n            top ? val : win.pageYOffset\r\n          )\r\n        } else {\r\n          elem[method] = val\r\n        }\r\n      }, method, val, arguments.length)\r\n    }\r\n  })\r\n\r\n  // Support: Safari <=7 - 9.1, Chrome <=37 - 49\r\n  // Add the top/left cssHooks using jQuery.fn.position\r\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\r\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\r\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\r\n  // rather than make the css module depend on the offset module, just check for it here\r\n  jQuery.each(['top', 'left'], function (_i, prop) {\r\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,\r\n      function (elem, computed) {\r\n        if (computed) {\r\n          computed = curCSS(elem, prop)\r\n\r\n          // If curCSS returns percentage, fallback to offset\r\n          return rnumnonpx.test(computed)\r\n            ? jQuery(elem).position()[prop] + 'px'\r\n            : computed\r\n        }\r\n      }\r\n    )\r\n  })\r\n\r\n  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\r\n  jQuery.each({ Height: 'height', Width: 'width' }, function (name, type) {\r\n    jQuery.each({\r\n      padding: 'inner' + name,\r\n      content: type,\r\n      '': 'outer' + name\r\n    }, function (defaultExtra, funcName) {\r\n      // Margin is only for outerHeight, outerWidth\r\n      jQuery.fn[funcName] = function (margin, value) {\r\n        const chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean')\r\n        const extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border')\r\n\r\n        return access(this, function (elem, type, value) {\r\n          let doc\r\n\r\n          if (isWindow(elem)) {\r\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\r\n            return funcName.indexOf('outer') === 0\r\n              ? elem['inner' + name]\r\n              : elem.document.documentElement['client' + name]\r\n          }\r\n\r\n          // Get document width or height\r\n          if (elem.nodeType === 9) {\r\n            doc = elem.documentElement\r\n\r\n            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\r\n            // whichever is greatest\r\n            return Math.max(\r\n              elem.body['scroll' + name], doc['scroll' + name],\r\n              elem.body['offset' + name], doc['offset' + name],\r\n              doc['client' + name]\r\n            )\r\n          }\r\n\r\n          return value === undefined\r\n\r\n          // Get width or height on the element, requesting but not forcing parseFloat\r\n            ? jQuery.css(elem, type, extra)\r\n\r\n          // Set width or height on the element\r\n            : jQuery.style(elem, type, value, extra)\r\n        }, type, chainable ? margin : undefined, chainable)\r\n      }\r\n    })\r\n  })\r\n\r\n  jQuery.each([\r\n    'ajaxStart',\r\n    'ajaxStop',\r\n    'ajaxComplete',\r\n    'ajaxError',\r\n    'ajaxSuccess',\r\n    'ajaxSend'\r\n  ], function (_i, type) {\r\n    jQuery.fn[type] = function (fn) {\r\n      return this.on(type, fn)\r\n    }\r\n  })\r\n\r\n  jQuery.fn.extend({\r\n\r\n    bind: function (types, data, fn) {\r\n      return this.on(types, null, data, fn)\r\n    },\r\n    unbind: function (types, fn) {\r\n      return this.off(types, null, fn)\r\n    },\r\n\r\n    delegate: function (selector, types, data, fn) {\r\n      return this.on(types, selector, data, fn)\r\n    },\r\n    undelegate: function (selector, types, fn) {\r\n      // ( namespace ) or ( selector, types [, fn] )\r\n      return arguments.length === 1\r\n        ? this.off(selector, '**')\r\n        : this.off(types, selector || '**', fn)\r\n    },\r\n\r\n    hover: function (fnOver, fnOut) {\r\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)\r\n    }\r\n  })\r\n\r\n  jQuery.each(\r\n    ('blur focus focusin focusout resize scroll click dblclick ' +\r\n\t'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +\r\n\t'change select submit keydown keypress keyup contextmenu').split(' '),\r\n    function (_i, name) {\r\n      // Handle event binding\r\n      jQuery.fn[name] = function (data, fn) {\r\n        return arguments.length > 0\r\n          ? this.on(name, null, data, fn)\r\n          : this.trigger(name)\r\n      }\r\n    }\r\n  )\r\n\r\n  // Support: Android <=4.0 only\r\n  // Make sure we trim BOM and NBSP\r\n  // Require that the \"whitespace run\" starts from a non-whitespace\r\n  // to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\r\n  const rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g\r\n\r\n  // Bind a function to a context, optionally partially applying any\r\n  // arguments.\r\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\r\n  // However, it is not slated for removal any time soon\r\n  jQuery.proxy = function (fn, context) {\r\n    let tmp, args, proxy\r\n\r\n    if (typeof context === 'string') {\r\n      tmp = fn[context]\r\n      context = fn\r\n      fn = tmp\r\n    }\r\n\r\n    // Quick check to determine if target is callable, in the spec\r\n    // this throws a TypeError, but we will just return undefined.\r\n    if (!isFunction(fn)) {\r\n      return undefined\r\n    }\r\n\r\n    // Simulated bind\r\n    args = slice.call(arguments, 2)\r\n    proxy = function () {\r\n      return fn.apply(context || this, args.concat(slice.call(arguments)))\r\n    }\r\n\r\n    // Set the guid of unique handler to the same of original handler, so it can be removed\r\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++\r\n\r\n    return proxy\r\n  }\r\n\r\n  jQuery.holdReady = function (hold) {\r\n    if (hold) {\r\n      jQuery.readyWait++\r\n    } else {\r\n      jQuery.ready(true)\r\n    }\r\n  }\r\n  jQuery.isArray = Array.isArray\r\n  jQuery.parseJSON = JSON.parse\r\n  jQuery.nodeName = nodeName\r\n  jQuery.isFunction = isFunction\r\n  jQuery.isWindow = isWindow\r\n  jQuery.camelCase = camelCase\r\n  jQuery.type = toType\r\n\r\n  jQuery.now = Date.now\r\n\r\n  jQuery.isNumeric = function (obj) {\r\n    // As of jQuery 3.0, isNumeric is limited to\r\n    // strings and numbers (primitives or objects)\r\n    // that can be coerced to finite numbers (gh-2662)\r\n    const type = jQuery.type(obj)\r\n    return (type === 'number' || type === 'string') &&\r\n\r\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\r\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n\t\t// subtraction forces infinities to NaN\r\n\t\t!isNaN(obj - parseFloat(obj))\r\n  }\r\n\r\n  jQuery.trim = function (text) {\r\n    return text == null\r\n      ? ''\r\n      : (text + '').replace(rtrim, '$1')\r\n  }\r\n\r\n  // Register as a named AMD module, since jQuery can be concatenated with other\r\n  // files that may use define, but not via a proper concatenation script that\r\n  // understands anonymous AMD modules. A named AMD is safest and most robust\r\n  // way to register. Lowercase jquery is used because AMD module names are\r\n  // derived from file names, and jQuery is normally delivered in a lowercase\r\n  // file name. Do this after creating the global so that if an AMD module wants\r\n  // to call noConflict to hide this version of jQuery, it will work.\r\n\r\n  // Note that for maximum portability, libraries that are not jQuery should\r\n  // declare themselves as anonymous modules, and avoid setting a global if an\r\n  // AMD loader is present. jQuery is a special case. For more information, see\r\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\r\n\r\n  if (typeof define === 'function' && define.amd) {\r\n    define('jquery', [], function () {\r\n      return jQuery\r\n    })\r\n  }\r\n\r\n  const\r\n\r\n    // Map over jQuery in case of overwrite\r\n    _jQuery = window.jQuery\r\n\r\n  // Map over the $ in case of overwrite\r\n  const _$ = window.$\r\n\r\n  jQuery.noConflict = function (deep) {\r\n    if (window.$ === jQuery) {\r\n      window.$ = _$\r\n    }\r\n\r\n    if (deep && window.jQuery === jQuery) {\r\n      window.jQuery = _jQuery\r\n    }\r\n\r\n    return jQuery\r\n  }\r\n\r\n  // Expose jQuery and $ identifiers, even in AMD\r\n  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\r\n  // and CommonJS for browser emulators (trac-13566)\r\n  if (typeof noGlobal === 'undefined') {\r\n    window.jQuery = window.$ = jQuery\r\n  }\r\n\r\n  return jQuery\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/jquery.js?");

/***/ }),

/***/ "./src/js/modules/menuBurger.js":
/*!**************************************!*\
  !*** ./src/js/modules/menuBurger.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst burgerButton = document.querySelector('.menu-burger__button')\r\nconst navLinks = document.querySelector('.menu-burger__nav')\r\nconst burgerButtonChilds = burgerButton.children\r\n\r\nlet burgerButtonState = 0\r\n\r\nconst buttonAnim = (burgerButtonState) => {\r\n  if (burgerButtonState === 0) {\r\n    burgerButtonChilds[0].style.transform = 'translate(0, 12px) rotate(45deg)'\r\n    burgerButtonChilds[1].style.transform = 'rotate(315deg)'\r\n    burgerButtonChilds[2].style.transform = 'translate(0, 12px)'\r\n    burgerButton.classList.add('menu-burger__button__active')\r\n    console.log(burgerButtonChilds[0].style.transform)\r\n  } else {\r\n    burgerButtonChilds[0].style.transform = 'none'\r\n    burgerButtonChilds[1].style.transform = 'none'\r\n    burgerButtonChilds[2].style.transform = 'none'\r\n    burgerButton.classList.remove('menu-burger__button__active')\r\n  }\r\n}\r\n\r\nconst menuAction = (burgerButtonState) => {\r\n  if (burgerButtonState === 0) {\r\n    navLinks.style.display = 'flex'\r\n    setTimeout(() => {\r\n      navLinks.style.right = '0%'\r\n    }, 100)\r\n\r\n    burgerButtonState = 1\r\n    buttonAnim(0)\r\n  } else {\r\n    navLinks.style.right = '100%'\r\n    setTimeout(() => {\r\n      navLinks.style.display = 'none'\r\n    }, 200)\r\n    burgerButtonState = 0\r\n    buttonAnim(1)\r\n  }\r\n}\r\n\r\nburgerButton.addEventListener('click', () => {\r\n  menuAction(burgerButtonState)\r\n  buttonAnim(burgerButtonState)\r\n  burgerButtonState = burgerButtonState === 0 ? 1 : 0\r\n})\r\nnavLinks.addEventListener('click', () => {\r\n  menuAction(1)\r\n  buttonAnim(1)\r\n  burgerButtonState = 0\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/menuBurger.js?");

/***/ }),

/***/ "./src/js/modules/owl.carousel.min.js":
/*!********************************************!*\
  !*** ./src/js/modules/owl.carousel.min.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable new-cap */\n/* eslint-disable no-unused-expressions */\n/* eslint-disable space-before-blocks */\n/**\n * Owl Carousel v2.3.4\n * Copyright 2013-2018 David Deutsch\n * Licensed under: SEE LICENSE IN https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE\n */\n!(function (a, b, c, d){ function e (b, c){ this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = { time: null, target: null, pointer: null, stage: { start: null, current: null }, direction: null }, this._states = { current: {}, tags: { initializing: ['busy'], animating: ['busy'], dragging: ['interacting'] } }, a.each(['onResize', 'onThrottledResize'], a.proxy(function (b, c){ this._handlers[c] = a.proxy(this[c], this) }, this)), a.each(e.Plugins, a.proxy(function (a, b){ this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this) }, this)), a.each(e.Workers, a.proxy(function (b, c){ this._pipe.push({ filter: c.filter, run: a.proxy(c.run, this) }) }, this)), this.setup(), this.initialize() }e.Defaults = { items: 3, loop: !1, center: !1, rewind: !1, checkVisibility: !0, mouseDrag: !0, touchDrag: !0, pullDrag: !0, freeDrag: !1, margin: 0, stagePadding: 0, merge: !1, mergeFit: !0, autoWidth: !1, startPosition: 0, rtl: !1, smartSpeed: 250, fluidSpeed: !1, dragEndSpeed: !1, responsive: {}, responsiveRefreshRate: 200, responsiveBaseElement: b, fallbackEasing: 'swing', slideTransition: '', info: !1, nestedItemSelector: !1, itemElement: 'div', stageElement: 'div', refreshClass: 'owl-refresh', loadedClass: 'owl-loaded', loadingClass: 'owl-loading', rtlClass: 'owl-rtl', responsiveClass: 'owl-responsive', dragClass: 'owl-drag', itemClass: 'owl-item', stageClass: 'owl-stage', stageOuterClass: 'owl-stage-outer', grabClass: 'owl-grab' }, e.Width = { Default: 'default', Inner: 'inner', Outer: 'outer' }, e.Type = { Event: 'event', State: 'state' }, e.Plugins = {}, e.Workers = [{ filter: ['width', 'settings'], run: function (){ this._width = this.$element.width() } }, { filter: ['width', 'items', 'settings'], run: function (a){ a.current = this._items && this._items[this.relative(this._current)] } }, { filter: ['items', 'settings'], run: function (){ this.$stage.children('.cloned').remove() } }, { filter: ['width', 'items', 'settings'], run: function (a){ const b = this.settings.margin || ''; const c = !this.settings.autoWidth; const d = this.settings.rtl; const e = { width: 'auto', 'margin-left': d ? b : '', 'margin-right': d ? '' : b }; !c && this.$stage.children().css(e), a.css = e } }, { filter: ['width', 'items', 'settings'], run: function (a){ const b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin; let c = null; let d = this._items.length; const e = !this.settings.autoWidth; const f = []; for (a.items = { merge: !1, width: b }; d--;)c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width(); this._widths = f } }, { filter: ['items', 'settings'], run: function (){ const b = []; const c = this._items; const d = this.settings; const e = Math.max(2 * d.items, 4); const f = 2 * Math.ceil(c.length / 2); let g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0; let h = ''; let i = ''; for (g /= 2; g > 0;)b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i, g -= 1; this._clones = b, a(h).addClass('cloned').appendTo(this.$stage), a(i).addClass('cloned').prependTo(this.$stage) } }, { filter: ['width', 'items', 'settings'], run: function (){ for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;)d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a); this._coordinates = f } }, { filter: ['width', 'items', 'settings'], run: function (){ const a = this.settings.stagePadding; const b = this._coordinates; const c = { width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a, 'padding-left': a || '', 'padding-right': a || '' }; this.$stage.css(c) } }, { filter: ['width', 'items', 'settings'], run: function (a){ let b = this._coordinates.length; const c = !this.settings.autoWidth; const d = this.$stage.children(); if (c && a.items.merge) for (;b--;)a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css); else c && (a.css.width = a.items.width, d.css(a.css)) } }, { filter: ['items'], run: function (){ this._coordinates.length < 1 && this.$stage.removeAttr('style') } }, { filter: ['width', 'items', 'settings'], run: function (a){ a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current) } }, { filter: ['position'], run: function (){ this.animate(this.coordinates(this._current)) } }, { filter: ['width', 'position', 'items', 'settings'], run: function (){ let a; let b; let c; let d; const e = this.settings.rtl ? 1 : -1; const f = 2 * this.settings.stagePadding; const g = this.coordinates(this.current()) + f; const h = g + this.width() * e; const i = []; for (c = 0, d = this._coordinates.length; c < d; c++)a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, '<=', g) && this.op(a, '>', h) || this.op(b, '<', g) && this.op(b, '>', h)) && i.push(c); this.$stage.children('.active').removeClass('active'), this.$stage.children(':eq(' + i.join('), :eq(') + ')').addClass('active'), this.$stage.children('.center').removeClass('center'), this.settings.center && this.$stage.children().eq(this.current()).addClass('center') } }], e.prototype.initializeStage = function (){ this.$stage = this.$element.find('.' + this.settings.stageClass), this.$stage.length || (this.$element.addClass(this.options.loadingClass), this.$stage = a('<' + this.settings.stageElement + '>', { class: this.settings.stageClass }).wrap(a('<div/>', { class: this.settings.stageOuterClass })), this.$element.append(this.$stage.parent())) }, e.prototype.initializeItems = function (){ const b = this.$element.find('.owl-item'); if (b.length) return this._items = b.get().map(function (b){ return a(b) }), this._mergers = this._items.map(function (){ return 1 }), void this.refresh(); this.replace(this.$element.children().not(this.$stage.parent())), this.isVisible() ? this.refresh() : this.invalidate('width'), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass) }, e.prototype.initialize = function (){ if (this.enter('initializing'), this.trigger('initialize'), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is('pre-loading')){ let a, b, c; a = this.$element.find('img'), b = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : d, c = this.$element.children(b).width(), a.length && c <= 0 && this.preloadAutoWidthImages(a) } this.initializeStage(), this.initializeItems(), this.registerEventHandlers(), this.leave('initializing'), this.trigger('initialized') }, e.prototype.isVisible = function (){ return !this.settings.checkVisibility || this.$element.is(':visible') }, e.prototype.setup = function (){ const b = this.viewport(); const c = this.options.responsive; let d = -1; let e = null; c ? (a.each(c, function (a){ a <= b && a > d && (d = Number(a)) }), e = a.extend({}, this.options, c[d]), typeof e.stagePadding === 'function' && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\\\S+\\\\s', 'g'), '$1' + d))) : e = a.extend({}, this.options), this.trigger('change', { property: { name: 'settings', value: e } }), this._breakpoint = d, this.settings = e, this.invalidate('settings'), this.trigger('changed', { property: { name: 'settings', value: this.settings } }) }, e.prototype.optionsLogic = function (){ this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1) }, e.prototype.prepare = function (b){ const c = this.trigger('prepare', { content: b }); return c.data || (c.data = a('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(b)), this.trigger('prepared', { content: c.data }), c.data }, e.prototype.update = function (){ for (let b = 0, c = this._pipe.length, d = a.proxy(function (a){ return this[a] }, this._invalidated), e = {}; b < c;)(this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++; this._invalidated = {}, !this.is('valid') && this.enter('valid') }, e.prototype.width = function (a){ switch (a = a || e.Width.Default){ case e.Width.Inner:case e.Width.Outer:return this._width; default:return this._width - 2 * this.settings.stagePadding + this.settings.margin } }, e.prototype.refresh = function (){ this.enter('refreshing'), this.trigger('refresh'), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave('refreshing'), this.trigger('refreshed') }, e.prototype.onThrottledResize = function (){ b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate) }, e.prototype.onResize = function (){ return !!this._items.length && (this._width !== this.$element.width() && (!!this.isVisible() && (this.enter('resizing'), this.trigger('resize').isDefaultPrevented() ? (this.leave('resizing'), !1) : (this.invalidate('width'), this.refresh(), this.leave('resizing'), void this.trigger('resized'))))) }, e.prototype.registerEventHandlers = function (){ a.support.transition && this.$stage.on(a.support.transition.end + '.owl.core', a.proxy(this.onTransitionEnd, this)), !1 !== this.settings.responsive && this.on(b, 'resize', this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on('mousedown.owl.core', a.proxy(this.onDragStart, this)), this.$stage.on('dragstart.owl.core selectstart.owl.core', function (){ return !1 })), this.settings.touchDrag && (this.$stage.on('touchstart.owl.core', a.proxy(this.onDragStart, this)), this.$stage.on('touchcancel.owl.core', a.proxy(this.onDragEnd, this))) }, e.prototype.onDragStart = function (b){ let d = null; b.which !== 3 && (a.support.transform ? (d = this.$stage.css('transform').replace(/.*\\(|\\)| /g, '').split(','), d = { x: d[d.length === 16 ? 12 : 4], y: d[d.length === 16 ? 13 : 5] }) : (d = this.$stage.position(), d = { x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left, y: d.top }), this.is('animating') && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate('position')), this.$element.toggleClass(this.options.grabClass, b.type === 'mousedown'), this.speed(0), this._drag.time = (new Date()).getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on('mouseup.owl.core touchend.owl.core', a.proxy(this.onDragEnd, this)), a(c).one('mousemove.owl.core touchmove.owl.core', a.proxy(function (b){ const d = this.difference(this._drag.pointer, this.pointer(b)); a(c).on('mousemove.owl.core touchmove.owl.core', a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is('valid') || (b.preventDefault(), this.enter('dragging'), this.trigger('drag')) }, this))) }, e.prototype.onDragMove = function (a){ let b = null; let c = null; let d = null; const e = this.difference(this._drag.pointer, this.pointer(a)); const f = this.difference(this._drag.stage.start, e); this.is('dragging') && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x)) }, e.prototype.onDragEnd = function (b){ const d = this.difference(this._drag.pointer, this.pointer(b)); const e = this._drag.stage.current; const f = d.x > 0 ^ this.settings.rtl ? 'left' : 'right'; a(c).off('.owl.core'), this.$element.removeClass(this.options.grabClass), (d.x !== 0 && this.is('dragging') || !this.is('valid')) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, d.x !== 0 ? f : this._drag.direction)), this.invalidate('position'), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || (new Date()).getTime() - this._drag.time > 300) && this._drag.target.one('click.owl.core', function (){ return !1 })), this.is('dragging') && (this.leave('dragging'), this.trigger('dragged')) }, e.prototype.closest = function (b, c){ let e = -1; const f = 30; const g = this.width(); const h = this.coordinates(); return this.settings.freeDrag || a.each(h, a.proxy(function (a, i){ return c === 'left' && b > i - f && b < i + f ? e = a : c === 'right' && b > i - g - f && b < i - g + f ? e = a + 1 : this.op(b, '<', i) && this.op(b, '>', h[a + 1] !== d ? h[a + 1] : i - g) && (e = c === 'left' ? a + 1 : a), e === -1 }, this)), this.settings.loop || (this.op(b, '>', h[this.minimum()]) ? e = b = this.minimum() : this.op(b, '<', h[this.maximum()]) && (e = b = this.maximum())), e }, e.prototype.animate = function (b){ const c = this.speed() > 0; this.is('animating') && this.onTransitionEnd(), c && (this.enter('animating'), this.trigger('translate')), a.support.transform3d && a.support.transition ? this.$stage.css({ transform: 'translate3d(' + b + 'px,0px,0px)', transition: this.speed() / 1e3 + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : '') }) : c ? this.$stage.animate({ left: b + 'px' }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({ left: b + 'px' }) }, e.prototype.is = function (a){ return this._states.current[a] && this._states.current[a] > 0 }, e.prototype.current = function (a){ if (a === d) return this._current; if (this._items.length === 0) return d; if (a = this.normalize(a), this._current !== a){ const b = this.trigger('change', { property: { name: 'position', value: a } }); b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate('position'), this.trigger('changed', { property: { name: 'position', value: this._current } }) } return this._current }, e.prototype.invalidate = function (b){ return a.type(b) === 'string' && (this._invalidated[b] = !0, this.is('valid') && this.leave('valid')), a.map(this._invalidated, function (a, b){ return b }) }, e.prototype.reset = function (a){ (a = this.normalize(a)) !== d && (this._speed = 0, this._current = a, this.suppress(['translate', 'translated']), this.animate(this.coordinates(a)), this.release(['translate', 'translated'])) }, e.prototype.normalize = function (a, b){ const c = this._items.length; const e = b ? 0 : this._clones.length; return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a }, e.prototype.relative = function (a){ return a -= this._clones.length / 2, this.normalize(a, !0) }, e.prototype.maximum = function (a){ let b; let c; let d; const e = this.settings; let f = this._coordinates.length; if (e.loop)f = this._clones.length / 2 + this._items.length - 1; else if (e.autoWidth || e.merge){ if (b = this._items.length) for (c = this._items[--b].width(), d = this.$element.width(); b-- && !((c += this._items[b].width() + this.settings.margin) > d););f = b + 1 } else f = e.center ? this._items.length - 1 : this._items.length - e.items; return a && (f -= this._clones.length / 2), Math.max(f, 0) }, e.prototype.minimum = function (a){ return a ? 0 : this._clones.length / 2 }, e.prototype.items = function (a){ return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]) }, e.prototype.mergers = function (a){ return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]) }, e.prototype.clones = function (b){ const c = this._clones.length / 2; const e = c + this._items.length; const f = function (a){ return a % 2 == 0 ? e + a / 2 : c - (a + 1) / 2 }; return b === d ? a.map(this._clones, function (a, b){ return f(b) }) : a.map(this._clones, function (a, c){ return a === b ? f(c) : null }) }, e.prototype.speed = function (a){ return a !== d && (this._speed = a), this._speed }, e.prototype.coordinates = function (b){ let c; let e = 1; let f = b - 1; return b === d ? a.map(this._coordinates, a.proxy(function (a, b){ return this.coordinates(b) }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c)) }, e.prototype.duration = function (a, b, c){ return c === 0 ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed) }, e.prototype.to = function (a, b){ let c = this.current(); let d = null; let e = a - this.relative(c); const f = (e > 0) - (e < 0); const g = this._items.length; const h = this.minimum(); let i = this.maximum(); this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += -1 * f * g), a = c + e, (d = ((a - h) % g + g) % g + h) !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.isVisible() && this.update() }, e.prototype.next = function (a){ a = a || !1, this.to(this.relative(this.current()) + 1, a) }, e.prototype.prev = function (a){ a = a || !1, this.to(this.relative(this.current()) - 1, a) }, e.prototype.onTransitionEnd = function (a){ if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1; this.leave('animating'), this.trigger('translated') }, e.prototype.viewport = function (){ let d; return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn('Can not detect viewport width.'), d }, e.prototype.replace = function (b){ this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find('.' + this.settings.nestedItemSelector)), b.filter(function (){ return this.nodeType === 1 }).each(a.proxy(function (a, b){ b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find('[data-merge]').addBack('[data-merge]').attr('data-merge') || 1) }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate('items') }, e.prototype.add = function (b, c){ const e = this.relative(this._current); c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger('add', { content: b, position: c }), b = this.prepare(b), this._items.length === 0 || c === this._items.length ? (this._items.length === 0 && this.$stage.append(b), this._items.length !== 0 && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find('[data-merge]').addBack('[data-merge]').attr('data-merge') || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find('[data-merge]').addBack('[data-merge]').attr('data-merge') || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate('items'), this.trigger('added', { content: b, position: c }) }, e.prototype.remove = function (a){ (a = this.normalize(a, !0)) !== d && (this.trigger('remove', { content: this._items[a], position: a }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate('items'), this.trigger('removed', { content: null, position: a })) }, e.prototype.preloadAutoWidthImages = function (b){ b.each(a.proxy(function (b, c){ this.enter('pre-loading'), c = a(c), a(new Image()).one('load', a.proxy(function (a){ c.attr('src', a.target.src), c.css('opacity', 1), this.leave('pre-loading'), !this.is('pre-loading') && !this.is('initializing') && this.refresh() }, this)).attr('src', c.attr('src') || c.attr('data-src') || c.attr('data-src-retina')) }, this)) }, e.prototype.destroy = function (){ this.$element.off('.owl.core'), this.$stage.off('.owl.core'), a(c).off('.owl.core'), !1 !== this.settings.responsive && (b.clearTimeout(this.resizeTimer), this.off(b, 'resize', this._handlers.onThrottledResize)); for (const d in this._plugins) this._plugins[d].destroy(); this.$stage.children('.cloned').remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$stage.remove(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\\\S+\\\\s', 'g'), '')).removeData('owl.carousel') }, e.prototype.op = function (a, b, c){ const d = this.settings.rtl; switch (b){ case '<':return d ? a > c : a < c; case '>':return d ? a < c : a > c; case '>=':return d ? a <= c : a >= c; case '<=':return d ? a >= c : a <= c } }, e.prototype.on = function (a, b, c, d){ a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent('on' + b, c) }, e.prototype.off = function (a, b, c, d){ a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent('on' + b, c) }, e.prototype.trigger = function (b, c, d, f, g){ const h = { item: { count: this._items.length, index: this.current() } }; const i = a.camelCase(a.grep(['on', b, d], function (a){ return a }).join('-').toLowerCase()); const j = a.Event([b, 'owl', d || 'carousel'].join('.').toLowerCase(), a.extend({ relatedTarget: this }, h, c)); return this._supress[b] || (a.each(this._plugins, function (a, b){ b.onTrigger && b.onTrigger(j) }), this.register({ type: e.Type.Event, name: b }), this.$element.trigger(j), this.settings && typeof this.settings[i] === 'function' && this.settings[i].call(this, j)), j }, e.prototype.enter = function (b){ a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b){ this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++ }, this)) }, e.prototype.leave = function (b){ a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b){ this._states.current[b]-- }, this)) }, e.prototype.register = function (b){ if (b.type === e.Type.Event){ if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl){ const c = a.event.special[b.name]._default; a.event.special[b.name]._default = function (a){ return !c || !c.apply || a.namespace && a.namespace.indexOf('owl') !== -1 ? a.namespace && a.namespace.indexOf('owl') > -1 : c.apply(this, arguments) }, a.event.special[b.name].owl = !0 } } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d){ return a.inArray(c, this._states.tags[b.name]) === d }, this))) }, e.prototype.suppress = function (b){ a.each(b, a.proxy(function (a, b){ this._supress[b] = !0 }, this)) }, e.prototype.release = function (b){ a.each(b, a.proxy(function (a, b){ delete this._supress[b] }, this)) }, e.prototype.pointer = function (a){ const c = { x: null, y: null }; return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c }, e.prototype.isNumeric = function (a){ return !isNaN(parseFloat(a)) }, e.prototype.difference = function (a, b){ return { x: a.x - b.x, y: a.y - b.y } }, a.fn.owlCarousel = function (b){ const c = Array.prototype.slice.call(arguments, 1); return this.each(function (){ const d = a(this); let f = d.data('owl.carousel'); f || (f = new e(this, typeof b === 'object' && b), d.data('owl.carousel', f), a.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (b, c){ f.register({ type: e.Type.Event, name: c }), f.$element.on(c + '.owl.carousel.core', a.proxy(function (a){ a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c])) }, f)) })), typeof b === 'string' && b.charAt(0) !== '_' && f[b].apply(f, c) }) }, a.fn.owlCarousel.Constructor = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ const e = function (b){ this._core = b, this._interval = null, this._visible = null, this._handlers = { 'initialized.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.autoRefresh && this.watch() }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers) }; e.Defaults = { autoRefresh: !0, autoRefreshInterval: 500 }, e.prototype.watch = function (){ this._interval || (this._visible = this._core.isVisible(), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval)) }, e.prototype.refresh = function (){ this._core.isVisible() !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass('owl-hidden', !this._visible), this._visible && this._core.invalidate('width') && this._core.refresh()) }, e.prototype.destroy = function (){ let a, c; b.clearInterval(this._interval); for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (c in Object.getOwnPropertyNames(this)) typeof this[c] !== 'function' && (this[c] = null) }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ const e = function (b){ this._core = b, this._loaded = [], this._handlers = { 'initialized.owl.carousel change.owl.carousel resized.owl.carousel': a.proxy(function (b){ if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && b.property.name == 'position' || b.type == 'initialized')){ const c = this._core.settings; let e = c.center && Math.ceil(c.items / 2) || c.items; let f = c.center && -1 * e || 0; let g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f; const h = this._core.clones().length; const i = a.proxy(function (a, b){ this.load(b) }, this); for (c.lazyLoadEager > 0 && (e += c.lazyLoadEager, c.loop && (g -= c.lazyLoadEager, e++)); f++ < e;) this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++ } }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers) }; e.Defaults = { lazyLoad: !1, lazyLoadEager: 0 }, e.prototype.load = function (c){ const d = this._core.$stage.children().eq(c); const e = d && d.find('.owl-lazy'); !e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d){ let e; const f = a(d); const g = b.devicePixelRatio > 1 && f.attr('data-src-retina') || f.attr('data-src') || f.attr('data-srcset'); this._core.trigger('load', { element: f, url: g }, 'lazy'), f.is('img') ? f.one('load.owl.lazy', a.proxy(function (){ f.css('opacity', 1), this._core.trigger('loaded', { element: f, url: g }, 'lazy') }, this)).attr('src', g) : f.is('source') ? f.one('load.owl.lazy', a.proxy(function (){ this._core.trigger('loaded', { element: f, url: g }, 'lazy') }, this)).attr('srcset', g) : (e = new Image(), e.onload = a.proxy(function (){ f.css({ 'background-image': 'url(\"' + g + '\")', opacity: '1' }), this._core.trigger('loaded', { element: f, url: g }, 'lazy') }, this), e.src = g) }, this)), this._loaded.push(d.get(0))) }, e.prototype.destroy = function (){ let a, b; for (a in this.handlers) this._core.$element.off(a, this.handlers[a]); for (b in Object.getOwnPropertyNames(this)) typeof this[b] !== 'function' && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ const e = function (c){ this._core = c, this._previousHeight = null, this._handlers = { 'initialized.owl.carousel refreshed.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.autoHeight && this.update() }, this), 'changed.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.autoHeight && a.property.name === 'position' && this.update() }, this), 'loaded.owl.lazy': a.proxy(function (a){ a.namespace && this._core.settings.autoHeight && a.element.closest('.' + this._core.settings.itemClass).index() === this._core.current() && this.update() }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._intervalId = null; const d = this; a(b).on('load', function (){ d._core.settings.autoHeight && d.update() }), a(b).resize(function (){ d._core.settings.autoHeight && (d._intervalId != null && clearTimeout(d._intervalId), d._intervalId = setTimeout(function (){ d.update() }, 250)) }) }; e.Defaults = { autoHeight: !1, autoHeightClass: 'owl-height' }, e.prototype.update = function (){ const b = this._core._current; const c = b + this._core.settings.items; const d = this._core.settings.lazyLoad; const e = this._core.$stage.children().toArray().slice(b, c); const f = []; let g = 0; a.each(e, function (b, c){ f.push(a(c).height()) }), g = Math.max.apply(null, f), g <= 1 && d && this._previousHeight && (g = this._previousHeight), this._previousHeight = g, this._core.$stage.parent().height(g).addClass(this._core.settings.autoHeightClass) }, e.prototype.destroy = function (){ let a, b; for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (b in Object.getOwnPropertyNames(this)) typeof this[b] !== 'function' && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ const e = function (b){ this._core = b, this._videos = {}, this._playing = null, this._handlers = { 'initialized.owl.carousel': a.proxy(function (a){ a.namespace && this._core.register({ type: 'state', name: 'playing', tags: ['interacting'] }) }, this), 'resize.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault() }, this), 'refreshed.owl.carousel': a.proxy(function (a){ a.namespace && this._core.is('resizing') && this._core.$stage.find('.cloned .owl-video-frame').remove() }, this), 'changed.owl.carousel': a.proxy(function (a){ a.namespace && a.property.name === 'position' && this._playing && this.stop() }, this), 'prepared.owl.carousel': a.proxy(function (b){ if (b.namespace){ const c = a(b.content).find('.owl-video'); c.length && (c.css('display', 'none'), this.fetch(c, a(b.content))) } }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on('click.owl.video', '.owl-video-play-icon', a.proxy(function (a){ this.play(a) }, this)) }; e.Defaults = { video: !1, videoHeight: !1, videoWidth: !1 }, e.prototype.fetch = function (a, b){ let c = (function (){ return a.attr('data-vimeo-id') ? 'vimeo' : a.attr('data-vzaar-id') ? 'vzaar' : 'youtube' }()); let d = a.attr('data-vimeo-id') || a.attr('data-youtube-id') || a.attr('data-vzaar-id'); const e = a.attr('data-width') || this._core.settings.videoWidth; const f = a.attr('data-height') || this._core.settings.videoHeight; const g = a.attr('href'); if (!g) throw new Error('Missing video URL.'); if (d = g.match(/(http:|https:|)\\/\\/(player.|www.|app.)?(vimeo\\.com|youtu(be\\.com|\\.be|be\\.googleapis\\.com|be\\-nocookie\\.com)|vzaar\\.com)\\/(video\\/|videos\\/|embed\\/|channels\\/.+\\/|groups\\/.+\\/|watch\\?v=|v\\/)?([A-Za-z0-9._%-]*)(\\&\\S+)?/), d[3].indexOf('youtu') > -1)c = 'youtube'; else if (d[3].indexOf('vimeo') > -1)c = 'vimeo'; else { if (!(d[3].indexOf('vzaar') > -1)) throw new Error('Video URL not supported.'); c = 'vzaar' }d = d[6], this._videos[g] = { type: c, id: d, width: e, height: f }, b.attr('data-video', g), this.thumbnail(a, this._videos[g]) }, e.prototype.thumbnail = function (b, c){ let d; let e; let f; const g = c.width && c.height ? 'width:' + c.width + 'px;height:' + c.height + 'px;' : ''; const h = b.find('img'); let i = 'src'; let j = ''; const k = this._core.settings; const l = function (c){ e = '<div class=\"owl-video-play-icon\"></div>', d = k.lazyLoad ? a('<div/>', { class: 'owl-video-tn ' + j, srcType: c }) : a('<div/>', { class: 'owl-video-tn', style: 'opacity:1;background-image:url(' + c + ')' }), b.after(d), b.after(e) }; if (b.wrap(a('<div/>', { class: 'owl-video-wrapper', style: g })), this._core.settings.lazyLoad && (i = 'data-src', j = 'owl-lazy'), h.length) return l(h.attr(i)), h.remove(), !1; c.type === 'youtube' ? (f = '//img.youtube.com/vi/' + c.id + '/hqdefault.jpg', l(f)) : c.type === 'vimeo' ? a.ajax({ type: 'GET', url: '//vimeo.com/api/v2/video/' + c.id + '.json', jsonp: 'callback', dataType: 'jsonp', success: function (a){ f = a[0].thumbnail_large, l(f) } }) : c.type === 'vzaar' && a.ajax({ type: 'GET', url: '//vzaar.com/api/videos/' + c.id + '.json', jsonp: 'callback', dataType: 'jsonp', success: function (a){ f = a.framegrab_url, l(f) } }) }, e.prototype.stop = function (){ this._core.trigger('stop', null, 'video'), this._playing.find('.owl-video-frame').remove(), this._playing.removeClass('owl-video-playing'), this._playing = null, this._core.leave('playing'), this._core.trigger('stopped', null, 'video') }, e.prototype.play = function (b){ let c; const d = a(b.target); let e = d.closest('.' + this._core.settings.itemClass); const f = this._videos[e.attr('data-video')]; const g = f.width || '100%'; const h = f.height || this._core.$stage.height(); this._playing || (this._core.enter('playing'), this._core.trigger('play', null, 'video'), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), c = a('<iframe frameborder=\"0\" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'), c.attr('height', h), c.attr('width', g), f.type === 'youtube' ? c.attr('src', '//www.youtube.com/embed/' + f.id + '?autoplay=1&rel=0&v=' + f.id) : f.type === 'vimeo' ? c.attr('src', '//player.vimeo.com/video/' + f.id + '?autoplay=1') : f.type === 'vzaar' && c.attr('src', '//view.vzaar.com/' + f.id + '/player?autoplay=true'), a(c).wrap('<div class=\"owl-video-frame\" />').insertAfter(e.find('.owl-video')), this._playing = e.addClass('owl-video-playing')) }, e.prototype.isInFullScreen = function (){ const b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement; return b && a(b).parent().hasClass('owl-video-frame') }, e.prototype.destroy = function (){ let a, b; this._core.$element.off('click.owl.video'); for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (b in Object.getOwnPropertyNames(this)) typeof this[b] !== 'function' && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.Video = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){\n  const e = function (b){ this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = { 'change.owl.carousel': a.proxy(function (a){ a.namespace && a.property.name == 'position' && (this.previous = this.core.current(), this.next = a.property.value) }, this), 'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': a.proxy(function (a){ a.namespace && (this.swapping = a.type == 'translated') }, this), 'translate.owl.carousel': a.proxy(function (a){ a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap() }, this) }, this.core.$element.on(this.handlers) }; e.Defaults = {\n    animateOut: !1,\n    animateIn: !1\n  }, e.prototype.swap = function (){ if (this.core.settings.items === 1 && a.support.animation && a.support.transition){ this.core.speed(0); let b; const c = a.proxy(this.clear, this); const d = this.core.$stage.children().eq(this.previous); const e = this.core.$stage.children().eq(this.next); const f = this.core.settings.animateIn; const g = this.core.settings.animateOut; this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({ left: b + 'px' }).addClass('animated owl-animated-out').addClass(g)), f && e.one(a.support.animation.end, c).addClass('animated owl-animated-in').addClass(f)) } }, e.prototype.clear = function (b){ a(b.target).css({ left: '' }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd() }, e.prototype.destroy = function (){ let a, b; for (a in this.handlers) this.core.$element.off(a, this.handlers[a]); for (b in Object.getOwnPropertyNames(this)) typeof this[b] !== 'function' && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.Animate = e\n}(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ const e = function (b){ this._core = b, this._call = null, this._time = 0, this._timeout = 0, this._paused = !0, this._handlers = { 'changed.owl.carousel': a.proxy(function (a){ a.namespace && a.property.name === 'settings' ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && a.property.name === 'position' && this._paused && (this._time = 0) }, this), 'initialized.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.autoplay && this.play() }, this), 'play.owl.autoplay': a.proxy(function (a, b, c){ a.namespace && this.play(b, c) }, this), 'stop.owl.autoplay': a.proxy(function (a){ a.namespace && this.stop() }, this), 'mouseover.owl.autoplay': a.proxy(function (){ this._core.settings.autoplayHoverPause && this._core.is('rotating') && this.pause() }, this), 'mouseleave.owl.autoplay': a.proxy(function (){ this._core.settings.autoplayHoverPause && this._core.is('rotating') && this.play() }, this), 'touchstart.owl.core': a.proxy(function (){ this._core.settings.autoplayHoverPause && this._core.is('rotating') && this.pause() }, this), 'touchend.owl.core': a.proxy(function (){ this._core.settings.autoplayHoverPause && this.play() }, this) }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options) }; e.Defaults = { autoplay: !1, autoplayTimeout: 5e3, autoplayHoverPause: !1, autoplaySpeed: !1 }, e.prototype._next = function (d){ this._call = b.setTimeout(a.proxy(this._next, this, d), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()), this._core.is('interacting') || c.hidden || this._core.next(d || this._core.settings.autoplaySpeed) }, e.prototype.read = function (){ return (new Date()).getTime() - this._time }, e.prototype.play = function (c, d){ let e; this._core.is('rotating') || this._core.enter('rotating'), c = c || this._core.settings.autoplayTimeout, e = Math.min(this._time % (this._timeout || c), c), this._paused ? (this._time = this.read(), this._paused = !1) : b.clearTimeout(this._call), this._time += this.read() % c - e, this._timeout = c, this._call = b.setTimeout(a.proxy(this._next, this, d), c - e) }, e.prototype.stop = function (){ this._core.is('rotating') && (this._time = 0, this._paused = !0, b.clearTimeout(this._call), this._core.leave('rotating')) }, e.prototype.pause = function (){ this._core.is('rotating') && !this._paused && (this._time = this.read(), this._paused = !0, b.clearTimeout(this._call)) }, e.prototype.destroy = function (){ let a, b; this.stop(); for (a in this._handlers) this._core.$element.off(a, this._handlers[a]); for (b in Object.getOwnPropertyNames(this)) typeof this[b] !== 'function' && (this[b] = null) }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ 'use strict'; const e = function (b){ this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = { next: this._core.next, prev: this._core.prev, to: this._core.to }, this._handlers = { 'prepared.owl.carousel': a.proxy(function (b){ b.namespace && this._core.settings.dotsData && this._templates.push('<div class=\"' + this._core.settings.dotClass + '\">' + a(b.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>') }, this), 'added.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop()) }, this), 'remove.owl.carousel': a.proxy(function (a){ a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1) }, this), 'changed.owl.carousel': a.proxy(function (a){ a.namespace && a.property.name == 'position' && this.draw() }, this), 'initialized.owl.carousel': a.proxy(function (a){ a.namespace && !this._initialized && (this._core.trigger('initialize', null, 'navigation'), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger('initialized', null, 'navigation')) }, this), 'refreshed.owl.carousel': a.proxy(function (a){ a.namespace && this._initialized && (this._core.trigger('refresh', null, 'navigation'), this.update(), this.draw(), this._core.trigger('refreshed', null, 'navigation')) }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers) }; e.Defaults = { nav: !1, navText: ['<span aria-label=\"Previous\">&#x2039;</span>', '<span aria-label=\"Next\">&#x203a;</span>'], navSpeed: !1, navElement: 'button type=\"button\" role=\"presentation\"', navContainer: !1, navContainerClass: 'owl-nav', navClass: ['owl-prev', 'owl-next'], slideBy: 1, dotClass: 'owl-dot', dotsClass: 'owl-dots', dots: !0, dotsEach: !1, dotsData: !1, dotsSpeed: !1, dotsContainer: !1 }, e.prototype.initialize = function (){ let b; const c = this._core.settings; this._controls.$relative = (c.navContainer ? a(c.navContainer) : a('<div>').addClass(c.navContainerClass).appendTo(this.$element)).addClass('disabled'), this._controls.$previous = a('<' + c.navElement + '>').addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on('click', a.proxy(function (a){ this.prev(c.navSpeed) }, this)), this._controls.$next = a('<' + c.navElement + '>').addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on('click', a.proxy(function (a){ this.next(c.navSpeed) }, this)), c.dotsData || (this._templates = [a('<button role=\"button\">').addClass(c.dotClass).append(a('<span>')).prop('outerHTML')]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a('<div>').addClass(c.dotsClass).appendTo(this.$element)).addClass('disabled'), this._controls.$absolute.on('click', 'button', a.proxy(function (b){ const d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index(); b.preventDefault(), this.to(d, c.dotsSpeed) }, this)); for (b in this._overrides) this._core[b] = a.proxy(this[b], this) }, e.prototype.destroy = function (){ let a, b, c, d, e; e = this._core.settings; for (a in this._handlers) this.$element.off(a, this._handlers[a]); for (b in this._controls)b === '$relative' && e.navContainer ? this._controls[b].html('') : this._controls[b].remove(); for (d in this.overides) this._core[d] = this._overrides[d]; for (c in Object.getOwnPropertyNames(this)) typeof this[c] !== 'function' && (this[c] = null) }, e.prototype.update = function (){ let a; let b; let c; const d = this._core.clones().length / 2; const e = d + this._core.items().length; const f = this._core.maximum(!0); const g = this._core.settings; const h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items; if (g.slideBy !== 'page' && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || g.slideBy == 'page') for (this._pages = [], a = d, b = 0, c = 0; a < e; a++){ if (b >= h || b === 0){ if (this._pages.push({ start: Math.min(f, a - d), end: a - d + h - 1 }), Math.min(f, a - d) === f) break; b = 0, ++c }b += this._core.mergers(this._core.relative(a)) } }, e.prototype.draw = function (){ let b; const c = this._core.settings; const d = this._core.items().length <= c.items; const e = this._core.relative(this._core.current()); const f = c.loop || c.rewind; this._controls.$relative.toggleClass('disabled', !c.nav || d), c.nav && (this._controls.$previous.toggleClass('disabled', !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass('disabled', !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass('disabled', !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && b !== 0 ? this._controls.$absolute.html(this._templates.join('')) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find('.active').removeClass('active'), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass('active')) }, e.prototype.onTrigger = function (b){ const c = this._core.settings; b.page = { index: a.inArray(this.current(), this._pages), count: this._pages.length, size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items) } }, e.prototype.current = function (){ const b = this._core.relative(this._core.current()); return a.grep(this._pages, a.proxy(function (a, c){ return a.start <= b && a.end >= b }, this)).pop() }, e.prototype.getPosition = function (b){ let c; let d; const e = this._core.settings; return e.slideBy == 'page' ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c }, e.prototype.next = function (b){ a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b) }, e.prototype.prev = function (b){ a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b) }, e.prototype.to = function (b, c, d){ let e; !d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c) }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ 'use strict'; const e = function (c){ this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = { 'initialized.owl.carousel': a.proxy(function (c){ c.namespace && this._core.settings.startPosition === 'URLHash' && a(b).trigger('hashchange.owl.navigation') }, this), 'prepared.owl.carousel': a.proxy(function (b){ if (b.namespace){ const c = a(b.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash'); if (!c) return; this._hashes[c] = b.content } }, this), 'changed.owl.carousel': a.proxy(function (c){ if (c.namespace && c.property.name === 'position'){ const d = this._core.items(this._core.relative(this._core.current())); const e = a.map(this._hashes, function (a, b){ return a === d ? b : null }).join(); if (!e || b.location.hash.slice(1) === e) return; b.location.hash = e } }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on('hashchange.owl.navigation', a.proxy(function (a){ const c = b.location.hash.substring(1); const e = this._core.$stage.children(); const f = this._hashes[c] && e.index(this._hashes[c]); f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0) }, this)) }; e.Defaults = { URLhashListener: !1 }, e.prototype.destroy = function (){ let c, d; a(b).off('hashchange.owl.navigation'); for (c in this._handlers) this._core.$element.off(c, this._handlers[c]); for (d in Object.getOwnPropertyNames(this)) typeof this[d] !== 'function' && (this[d] = null) }, a.fn.owlCarousel.Constructor.Plugins.Hash = e }(window.Zepto || window.jQuery, window, document)), (function (a, b, c, d){ function e (b, c){ let e = !1; const f = b.charAt(0).toUpperCase() + b.slice(1); return a.each((b + ' ' + h.join(f + ' ') + f).split(' '), function (a, b){ if (g[b] !== d) return e = !c || b, !1 }), e } function f (a){ return e(a, !0) } var g = a('<support>').get(0).style; var h = 'Webkit Moz O ms'.split(' '); const i = { transition: { end: { WebkitTransition: 'webkitTransitionEnd', MozTransition: 'transitionend', OTransition: 'oTransitionEnd', transition: 'transitionend' } }, animation: { end: { WebkitAnimation: 'webkitAnimationEnd', MozAnimation: 'animationend', OAnimation: 'oAnimationEnd', animation: 'animationend' } } }; const j = { csstransforms: function (){ return !!e('transform') }, csstransforms3d: function (){ return !!e('perspective') }, csstransitions: function (){ return !!e('transition') }, cssanimations: function (){ return !!e('animation') } }; j.csstransitions() && (a.support.transition = new String(f('transition')), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f('animation')), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f('transform')), a.support.transform3d = j.csstransforms3d()) }(window.Zepto || window.jQuery, window, document))\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/owl.carousel.min.js?");

/***/ }),

/***/ "./src/js/modules/owlAbout.js":
/*!************************************!*\
  !*** ./src/js/modules/owlAbout.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nconst owlAbout = $('.about__owl-carousel')\r\n\r\n$(document).ready(function () {\r\n  owlAbout.owlCarousel({\r\n    loop: true,\r\n    items: 3,\r\n    autoplay: true,\r\n    autoplayTimeout: 2000,\r\n    dots: false,\r\n    nav: false,\r\n    touchDrag: false,\r\n    mouseDrag: false\r\n  })\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/owlAbout.js?");

/***/ }),

/***/ "./src/js/modules/owlBanner.js":
/*!*************************************!*\
  !*** ./src/js/modules/owlBanner.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nconst owlBanners = $('.banner__owl-carousel')\r\n\r\n$(document).ready(function () {\r\n  owlBanners.owlCarousel({\r\n    autoplay: true,\r\n    autoplayTimeout: 2000,\r\n    items: 1,\r\n    loop: true,\r\n    dots: false,\r\n    nav: false\r\n  })\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/owlBanner.js?");

/***/ }),

/***/ "./src/js/modules/owlFeatures.js":
/*!***************************************!*\
  !*** ./src/js/modules/owlFeatures.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nconst owlFeatures = $('.features__owl-carousel')\r\n\r\n$(document).ready(function () {\r\n  owlFeatures.owlCarousel({\r\n    autoplay: true,\r\n    autoplayTimeout: 2000,\r\n    items: 6,\r\n    loop: true,\r\n    dots: false,\r\n    nav: false,\r\n    responsive: {\r\n      1441: {\r\n        items: 6\r\n      },\r\n      1025: {\r\n        items: 4\r\n      },\r\n      769: {\r\n        items: 3\r\n      },\r\n      321: {\r\n        items: 3\r\n      },\r\n      0: {\r\n        items: 2\r\n      }\r\n    }\r\n  })\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/owlFeatures.js?");

/***/ }),

/***/ "./src/js/modules/owlPromo.js":
/*!************************************!*\
  !*** ./src/js/modules/owlPromo.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nconst owlPromo = $('.promo__owl-carousel')\r\n\r\n$(document).ready(function () {\r\n  owlPromo.owlCarousel({\r\n    autoplay: true,\r\n    autoplayTimeout: 2000,\r\n    items: 5,\r\n    loop: true,\r\n    dots: false,\r\n    nav: false,\r\n    responsive: {\r\n      0: {\r\n        items: 1\r\n      },\r\n      768: {\r\n        items: 3\r\n      },\r\n      1024: {\r\n        items: 4\r\n      },\r\n      1920: {\r\n        items: 5\r\n      }\r\n    }\r\n  })\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/owlPromo.js?");

/***/ }),

/***/ "./src/js/modules/owlReviews.js":
/*!**************************************!*\
  !*** ./src/js/modules/owlReviews.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\n/* eslint-disable no-unused-vars */\r\nconst owlReviews = $('.reviews__owl-carousel')\r\n\r\n$(document).ready(function () {\r\n  owlReviews.owlCarousel({\r\n    margin: 250,\r\n    loop: true,\r\n    items: 1,\r\n    autoplay: true,\r\n    autoplayTimeout: 5000,\r\n    dots: false,\r\n    nav: false,\r\n    responsive: {\r\n      1441: {\r\n        margin: 250,\r\n        dots: false\r\n      },\r\n      0: {\r\n        dots: true,\r\n        margin: 0\r\n      }\r\n    }\r\n  })\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/owlReviews.js?");

/***/ }),

/***/ "./src/js/modules/switchTools.js":
/*!***************************************!*\
  !*** ./src/js/modules/switchTools.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-return-assign */\r\nconst toolsBlock = document.querySelector('.our-tools__items')\r\nconst tools = Array.from(toolsBlock.children)\r\nconst scrollWidth = tools[0].clientWidth\r\n\r\ntoolsBlock.scrollTo({\r\n  left: scrollWidth * 4\r\n})\r\n\r\nlet thisItem = 4\r\nlet state = 1\r\ndocument.addEventListener('click', (event) => {\r\n  if (state === 1) {\r\n    state = 0\r\n    if (event.target.closest('.our-tools__arrow-l')) {\r\n      thisItem -= 1\r\n      tools.forEach(e => e.classList.remove('our-tools__item__active'))\r\n      tools[thisItem].classList.add('our-tools__item__active')\r\n      toolsBlock.scrollTo({\r\n        left: toolsBlock.scrollLeft - scrollWidth,\r\n        behavior: 'smooth'\r\n      })\r\n    }\r\n    if (event.target.closest('.our-tools__arrow-r')) {\r\n      thisItem += 1\r\n      tools.forEach(e => e.classList.remove('our-tools__item__active'))\r\n      tools[thisItem].classList.add('our-tools__item__active')\r\n      toolsBlock.scrollTo({\r\n        left: toolsBlock.scrollLeft + scrollWidth,\r\n        behavior: 'smooth'\r\n      })\r\n    }\r\n\r\n    if (thisItem === 0 || thisItem === 8) {\r\n      thisItem = 4\r\n      tools[thisItem].classList.add('our-tools__item__active')\r\n      setTimeout(() => {\r\n        toolsBlock.scrollTo({\r\n          left: scrollWidth * 4\r\n        })\r\n        tools.forEach(e => e.classList.remove('our-tools__item__active'))\r\n        tools[thisItem].classList.add('our-tools__item__active')\r\n      }, 300)\r\n    }\r\n\r\n    setTimeout(() => {\r\n      state = 1\r\n    }, 500)\r\n  }\r\n})\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/switchTools.js?");

/***/ }),

/***/ "./src/js/modules/yMap.js":
/*!********************************!*\
  !*** ./src/js/modules/yMap.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* eslint-disable no-undef */\r\nconst point = [55.169650, 61.379000]\r\nconst center = [55.169650, 61.377000]\r\n\r\nfunction init () {\r\n  const map = new ymaps.Map('map', {\r\n    center,\r\n    zoom: 15\r\n  })\r\n\r\n  const placemark = new ymaps.Placemark(point, {}, {\r\n    iconLayout: 'default#image',\r\n    iconImageHref: '../img/address-svgrepo-com.svg',\r\n    iconImageSize: [50, 50],\r\n    iconImageOffset: [-19, -44]\r\n  })\r\n\r\n  map.controls.remove('geolocationControl') // удаляем геолокацию\r\n  map.controls.remove('searchControl') // удаляем поиск\r\n  map.controls.remove('trafficControl') // удаляем контроль трафика\r\n  map.controls.remove('typeSelector') // удаляем тип\r\n  map.controls.remove('fullscreenControl') // удаляем кнопку перехода в полноэкранный режим\r\n  map.controls.remove('zoomControl') // удаляем контрол зуммирования\r\n  map.controls.remove('rulerControl') // удаляем контрол правил\r\n  // map.behaviors.disable(['scrollZoom']); // отключаем скролл карты (опционально)\r\n\r\n  map.geoObjects.add(placemark)\r\n}\r\n\r\nymaps.ready(init)\r\n\n\n//# sourceURL=webpack://seelentov-gulp-webdev-n-php/./src/js/modules/yMap.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;